// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package postgresql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-postgresql/sdk/v3/go/postgresql/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type FunctionArg struct {
	// An expression to be used as default value if the parameter is not specified.
	Default *string `pulumi:"default"`
	// Can be one of IN, INOUT, OUT, or VARIADIC. Default is IN.
	Mode *string `pulumi:"mode"`
	// The name of the argument.
	Name *string `pulumi:"name"`
	// The type of the argument.
	Type string `pulumi:"type"`
}

// FunctionArgInput is an input type that accepts FunctionArgArgs and FunctionArgOutput values.
// You can construct a concrete instance of `FunctionArgInput` via:
//
//	FunctionArgArgs{...}
type FunctionArgInput interface {
	pulumi.Input

	ToFunctionArgOutput() FunctionArgOutput
	ToFunctionArgOutputWithContext(context.Context) FunctionArgOutput
}

type FunctionArgArgs struct {
	// An expression to be used as default value if the parameter is not specified.
	Default pulumi.StringPtrInput `pulumi:"default"`
	// Can be one of IN, INOUT, OUT, or VARIADIC. Default is IN.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// The name of the argument.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The type of the argument.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FunctionArgArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionArg)(nil)).Elem()
}

func (i FunctionArgArgs) ToFunctionArgOutput() FunctionArgOutput {
	return i.ToFunctionArgOutputWithContext(context.Background())
}

func (i FunctionArgArgs) ToFunctionArgOutputWithContext(ctx context.Context) FunctionArgOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionArgOutput)
}

func (i FunctionArgArgs) ToOutput(ctx context.Context) pulumix.Output[FunctionArg] {
	return pulumix.Output[FunctionArg]{
		OutputState: i.ToFunctionArgOutputWithContext(ctx).OutputState,
	}
}

// FunctionArgArrayInput is an input type that accepts FunctionArgArray and FunctionArgArrayOutput values.
// You can construct a concrete instance of `FunctionArgArrayInput` via:
//
//	FunctionArgArray{ FunctionArgArgs{...} }
type FunctionArgArrayInput interface {
	pulumi.Input

	ToFunctionArgArrayOutput() FunctionArgArrayOutput
	ToFunctionArgArrayOutputWithContext(context.Context) FunctionArgArrayOutput
}

type FunctionArgArray []FunctionArgInput

func (FunctionArgArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionArg)(nil)).Elem()
}

func (i FunctionArgArray) ToFunctionArgArrayOutput() FunctionArgArrayOutput {
	return i.ToFunctionArgArrayOutputWithContext(context.Background())
}

func (i FunctionArgArray) ToFunctionArgArrayOutputWithContext(ctx context.Context) FunctionArgArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionArgArrayOutput)
}

func (i FunctionArgArray) ToOutput(ctx context.Context) pulumix.Output[[]FunctionArg] {
	return pulumix.Output[[]FunctionArg]{
		OutputState: i.ToFunctionArgArrayOutputWithContext(ctx).OutputState,
	}
}

type FunctionArgOutput struct{ *pulumi.OutputState }

func (FunctionArgOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionArg)(nil)).Elem()
}

func (o FunctionArgOutput) ToFunctionArgOutput() FunctionArgOutput {
	return o
}

func (o FunctionArgOutput) ToFunctionArgOutputWithContext(ctx context.Context) FunctionArgOutput {
	return o
}

func (o FunctionArgOutput) ToOutput(ctx context.Context) pulumix.Output[FunctionArg] {
	return pulumix.Output[FunctionArg]{
		OutputState: o.OutputState,
	}
}

// An expression to be used as default value if the parameter is not specified.
func (o FunctionArgOutput) Default() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionArg) *string { return v.Default }).(pulumi.StringPtrOutput)
}

// Can be one of IN, INOUT, OUT, or VARIADIC. Default is IN.
func (o FunctionArgOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionArg) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// The name of the argument.
func (o FunctionArgOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionArg) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The type of the argument.
func (o FunctionArgOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionArg) string { return v.Type }).(pulumi.StringOutput)
}

type FunctionArgArrayOutput struct{ *pulumi.OutputState }

func (FunctionArgArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionArg)(nil)).Elem()
}

func (o FunctionArgArrayOutput) ToFunctionArgArrayOutput() FunctionArgArrayOutput {
	return o
}

func (o FunctionArgArrayOutput) ToFunctionArgArrayOutputWithContext(ctx context.Context) FunctionArgArrayOutput {
	return o
}

func (o FunctionArgArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FunctionArg] {
	return pulumix.Output[[]FunctionArg]{
		OutputState: o.OutputState,
	}
}

func (o FunctionArgArrayOutput) Index(i pulumi.IntInput) FunctionArgOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FunctionArg {
		return vs[0].([]FunctionArg)[vs[1].(int)]
	}).(FunctionArgOutput)
}

type ProviderClientcert struct {
	Cert      string `pulumi:"cert"`
	Key       string `pulumi:"key"`
	Sslinline *bool  `pulumi:"sslinline"`
}

// ProviderClientcertInput is an input type that accepts ProviderClientcertArgs and ProviderClientcertOutput values.
// You can construct a concrete instance of `ProviderClientcertInput` via:
//
//	ProviderClientcertArgs{...}
type ProviderClientcertInput interface {
	pulumi.Input

	ToProviderClientcertOutput() ProviderClientcertOutput
	ToProviderClientcertOutputWithContext(context.Context) ProviderClientcertOutput
}

type ProviderClientcertArgs struct {
	Cert      pulumi.StringInput  `pulumi:"cert"`
	Key       pulumi.StringInput  `pulumi:"key"`
	Sslinline pulumi.BoolPtrInput `pulumi:"sslinline"`
}

func (ProviderClientcertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderClientcert)(nil)).Elem()
}

func (i ProviderClientcertArgs) ToProviderClientcertOutput() ProviderClientcertOutput {
	return i.ToProviderClientcertOutputWithContext(context.Background())
}

func (i ProviderClientcertArgs) ToProviderClientcertOutputWithContext(ctx context.Context) ProviderClientcertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderClientcertOutput)
}

func (i ProviderClientcertArgs) ToOutput(ctx context.Context) pulumix.Output[ProviderClientcert] {
	return pulumix.Output[ProviderClientcert]{
		OutputState: i.ToProviderClientcertOutputWithContext(ctx).OutputState,
	}
}

func (i ProviderClientcertArgs) ToProviderClientcertPtrOutput() ProviderClientcertPtrOutput {
	return i.ToProviderClientcertPtrOutputWithContext(context.Background())
}

func (i ProviderClientcertArgs) ToProviderClientcertPtrOutputWithContext(ctx context.Context) ProviderClientcertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderClientcertOutput).ToProviderClientcertPtrOutputWithContext(ctx)
}

// ProviderClientcertPtrInput is an input type that accepts ProviderClientcertArgs, ProviderClientcertPtr and ProviderClientcertPtrOutput values.
// You can construct a concrete instance of `ProviderClientcertPtrInput` via:
//
//	        ProviderClientcertArgs{...}
//
//	or:
//
//	        nil
type ProviderClientcertPtrInput interface {
	pulumi.Input

	ToProviderClientcertPtrOutput() ProviderClientcertPtrOutput
	ToProviderClientcertPtrOutputWithContext(context.Context) ProviderClientcertPtrOutput
}

type providerClientcertPtrType ProviderClientcertArgs

func ProviderClientcertPtr(v *ProviderClientcertArgs) ProviderClientcertPtrInput {
	return (*providerClientcertPtrType)(v)
}

func (*providerClientcertPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderClientcert)(nil)).Elem()
}

func (i *providerClientcertPtrType) ToProviderClientcertPtrOutput() ProviderClientcertPtrOutput {
	return i.ToProviderClientcertPtrOutputWithContext(context.Background())
}

func (i *providerClientcertPtrType) ToProviderClientcertPtrOutputWithContext(ctx context.Context) ProviderClientcertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderClientcertPtrOutput)
}

func (i *providerClientcertPtrType) ToOutput(ctx context.Context) pulumix.Output[*ProviderClientcert] {
	return pulumix.Output[*ProviderClientcert]{
		OutputState: i.ToProviderClientcertPtrOutputWithContext(ctx).OutputState,
	}
}

type ProviderClientcertOutput struct{ *pulumi.OutputState }

func (ProviderClientcertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderClientcert)(nil)).Elem()
}

func (o ProviderClientcertOutput) ToProviderClientcertOutput() ProviderClientcertOutput {
	return o
}

func (o ProviderClientcertOutput) ToProviderClientcertOutputWithContext(ctx context.Context) ProviderClientcertOutput {
	return o
}

func (o ProviderClientcertOutput) ToProviderClientcertPtrOutput() ProviderClientcertPtrOutput {
	return o.ToProviderClientcertPtrOutputWithContext(context.Background())
}

func (o ProviderClientcertOutput) ToProviderClientcertPtrOutputWithContext(ctx context.Context) ProviderClientcertPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderClientcert) *ProviderClientcert {
		return &v
	}).(ProviderClientcertPtrOutput)
}

func (o ProviderClientcertOutput) ToOutput(ctx context.Context) pulumix.Output[ProviderClientcert] {
	return pulumix.Output[ProviderClientcert]{
		OutputState: o.OutputState,
	}
}

func (o ProviderClientcertOutput) Cert() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderClientcert) string { return v.Cert }).(pulumi.StringOutput)
}

func (o ProviderClientcertOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderClientcert) string { return v.Key }).(pulumi.StringOutput)
}

func (o ProviderClientcertOutput) Sslinline() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProviderClientcert) *bool { return v.Sslinline }).(pulumi.BoolPtrOutput)
}

type ProviderClientcertPtrOutput struct{ *pulumi.OutputState }

func (ProviderClientcertPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderClientcert)(nil)).Elem()
}

func (o ProviderClientcertPtrOutput) ToProviderClientcertPtrOutput() ProviderClientcertPtrOutput {
	return o
}

func (o ProviderClientcertPtrOutput) ToProviderClientcertPtrOutputWithContext(ctx context.Context) ProviderClientcertPtrOutput {
	return o
}

func (o ProviderClientcertPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ProviderClientcert] {
	return pulumix.Output[*ProviderClientcert]{
		OutputState: o.OutputState,
	}
}

func (o ProviderClientcertPtrOutput) Elem() ProviderClientcertOutput {
	return o.ApplyT(func(v *ProviderClientcert) ProviderClientcert {
		if v != nil {
			return *v
		}
		var ret ProviderClientcert
		return ret
	}).(ProviderClientcertOutput)
}

func (o ProviderClientcertPtrOutput) Cert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderClientcert) *string {
		if v == nil {
			return nil
		}
		return &v.Cert
	}).(pulumi.StringPtrOutput)
}

func (o ProviderClientcertPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderClientcert) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

func (o ProviderClientcertPtrOutput) Sslinline() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProviderClientcert) *bool {
		if v == nil {
			return nil
		}
		return v.Sslinline
	}).(pulumi.BoolPtrOutput)
}

type SchemaPolicy struct {
	// Should the specified ROLE have CREATE privileges to the specified SCHEMA.
	Create *bool `pulumi:"create"`
	// Should the specified ROLE have CREATE privileges to the specified SCHEMA and the ability to GRANT the CREATE privilege to other ROLEs.
	CreateWithGrant *bool `pulumi:"createWithGrant"`
	// The ROLE who is receiving the policy.  If this value is empty or not specified it implies the policy is referring to the [`PUBLIC` role](https://www.postgresql.org/docs/current/static/sql-grant.html).
	Role *string `pulumi:"role"`
	// Should the specified ROLE have USAGE privileges to the specified SCHEMA.
	Usage *bool `pulumi:"usage"`
	// Should the specified ROLE have USAGE privileges to the specified SCHEMA and the ability to GRANT the USAGE privilege to other ROLEs.
	//
	// > **NOTE on `policy`:** The permissions of a role specified in multiple policy blocks is cumulative.  For example, if the same role is specified in two different `policy` each with different permissions (e.g. `create` and `usageWithGrant`, respectively), then the specified role with have both `create` and `usageWithGrant` privileges.
	UsageWithGrant *bool `pulumi:"usageWithGrant"`
}

// SchemaPolicyInput is an input type that accepts SchemaPolicyArgs and SchemaPolicyOutput values.
// You can construct a concrete instance of `SchemaPolicyInput` via:
//
//	SchemaPolicyArgs{...}
type SchemaPolicyInput interface {
	pulumi.Input

	ToSchemaPolicyOutput() SchemaPolicyOutput
	ToSchemaPolicyOutputWithContext(context.Context) SchemaPolicyOutput
}

type SchemaPolicyArgs struct {
	// Should the specified ROLE have CREATE privileges to the specified SCHEMA.
	Create pulumi.BoolPtrInput `pulumi:"create"`
	// Should the specified ROLE have CREATE privileges to the specified SCHEMA and the ability to GRANT the CREATE privilege to other ROLEs.
	CreateWithGrant pulumi.BoolPtrInput `pulumi:"createWithGrant"`
	// The ROLE who is receiving the policy.  If this value is empty or not specified it implies the policy is referring to the [`PUBLIC` role](https://www.postgresql.org/docs/current/static/sql-grant.html).
	Role pulumi.StringPtrInput `pulumi:"role"`
	// Should the specified ROLE have USAGE privileges to the specified SCHEMA.
	Usage pulumi.BoolPtrInput `pulumi:"usage"`
	// Should the specified ROLE have USAGE privileges to the specified SCHEMA and the ability to GRANT the USAGE privilege to other ROLEs.
	//
	// > **NOTE on `policy`:** The permissions of a role specified in multiple policy blocks is cumulative.  For example, if the same role is specified in two different `policy` each with different permissions (e.g. `create` and `usageWithGrant`, respectively), then the specified role with have both `create` and `usageWithGrant` privileges.
	UsageWithGrant pulumi.BoolPtrInput `pulumi:"usageWithGrant"`
}

func (SchemaPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaPolicy)(nil)).Elem()
}

func (i SchemaPolicyArgs) ToSchemaPolicyOutput() SchemaPolicyOutput {
	return i.ToSchemaPolicyOutputWithContext(context.Background())
}

func (i SchemaPolicyArgs) ToSchemaPolicyOutputWithContext(ctx context.Context) SchemaPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaPolicyOutput)
}

func (i SchemaPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[SchemaPolicy] {
	return pulumix.Output[SchemaPolicy]{
		OutputState: i.ToSchemaPolicyOutputWithContext(ctx).OutputState,
	}
}

// SchemaPolicyArrayInput is an input type that accepts SchemaPolicyArray and SchemaPolicyArrayOutput values.
// You can construct a concrete instance of `SchemaPolicyArrayInput` via:
//
//	SchemaPolicyArray{ SchemaPolicyArgs{...} }
type SchemaPolicyArrayInput interface {
	pulumi.Input

	ToSchemaPolicyArrayOutput() SchemaPolicyArrayOutput
	ToSchemaPolicyArrayOutputWithContext(context.Context) SchemaPolicyArrayOutput
}

type SchemaPolicyArray []SchemaPolicyInput

func (SchemaPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchemaPolicy)(nil)).Elem()
}

func (i SchemaPolicyArray) ToSchemaPolicyArrayOutput() SchemaPolicyArrayOutput {
	return i.ToSchemaPolicyArrayOutputWithContext(context.Background())
}

func (i SchemaPolicyArray) ToSchemaPolicyArrayOutputWithContext(ctx context.Context) SchemaPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaPolicyArrayOutput)
}

func (i SchemaPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]SchemaPolicy] {
	return pulumix.Output[[]SchemaPolicy]{
		OutputState: i.ToSchemaPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

type SchemaPolicyOutput struct{ *pulumi.OutputState }

func (SchemaPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaPolicy)(nil)).Elem()
}

func (o SchemaPolicyOutput) ToSchemaPolicyOutput() SchemaPolicyOutput {
	return o
}

func (o SchemaPolicyOutput) ToSchemaPolicyOutputWithContext(ctx context.Context) SchemaPolicyOutput {
	return o
}

func (o SchemaPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[SchemaPolicy] {
	return pulumix.Output[SchemaPolicy]{
		OutputState: o.OutputState,
	}
}

// Should the specified ROLE have CREATE privileges to the specified SCHEMA.
func (o SchemaPolicyOutput) Create() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SchemaPolicy) *bool { return v.Create }).(pulumi.BoolPtrOutput)
}

// Should the specified ROLE have CREATE privileges to the specified SCHEMA and the ability to GRANT the CREATE privilege to other ROLEs.
func (o SchemaPolicyOutput) CreateWithGrant() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SchemaPolicy) *bool { return v.CreateWithGrant }).(pulumi.BoolPtrOutput)
}

// The ROLE who is receiving the policy.  If this value is empty or not specified it implies the policy is referring to the [`PUBLIC` role](https://www.postgresql.org/docs/current/static/sql-grant.html).
func (o SchemaPolicyOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaPolicy) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// Should the specified ROLE have USAGE privileges to the specified SCHEMA.
func (o SchemaPolicyOutput) Usage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SchemaPolicy) *bool { return v.Usage }).(pulumi.BoolPtrOutput)
}

// Should the specified ROLE have USAGE privileges to the specified SCHEMA and the ability to GRANT the USAGE privilege to other ROLEs.
//
// > **NOTE on `policy`:** The permissions of a role specified in multiple policy blocks is cumulative.  For example, if the same role is specified in two different `policy` each with different permissions (e.g. `create` and `usageWithGrant`, respectively), then the specified role with have both `create` and `usageWithGrant` privileges.
func (o SchemaPolicyOutput) UsageWithGrant() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SchemaPolicy) *bool { return v.UsageWithGrant }).(pulumi.BoolPtrOutput)
}

type SchemaPolicyArrayOutput struct{ *pulumi.OutputState }

func (SchemaPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchemaPolicy)(nil)).Elem()
}

func (o SchemaPolicyArrayOutput) ToSchemaPolicyArrayOutput() SchemaPolicyArrayOutput {
	return o
}

func (o SchemaPolicyArrayOutput) ToSchemaPolicyArrayOutputWithContext(ctx context.Context) SchemaPolicyArrayOutput {
	return o
}

func (o SchemaPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SchemaPolicy] {
	return pulumix.Output[[]SchemaPolicy]{
		OutputState: o.OutputState,
	}
}

func (o SchemaPolicyArrayOutput) Index(i pulumi.IntInput) SchemaPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SchemaPolicy {
		return vs[0].([]SchemaPolicy)[vs[1].(int)]
	}).(SchemaPolicyOutput)
}

type GetSequencesSequence struct {
	// The sequence's data type as defined in ``information_schema.sequences``.
	DataType string `pulumi:"dataType"`
	// The sequence name.
	ObjectName string `pulumi:"objectName"`
	// The parent schema.
	SchemaName string `pulumi:"schemaName"`
}

// GetSequencesSequenceInput is an input type that accepts GetSequencesSequenceArgs and GetSequencesSequenceOutput values.
// You can construct a concrete instance of `GetSequencesSequenceInput` via:
//
//	GetSequencesSequenceArgs{...}
type GetSequencesSequenceInput interface {
	pulumi.Input

	ToGetSequencesSequenceOutput() GetSequencesSequenceOutput
	ToGetSequencesSequenceOutputWithContext(context.Context) GetSequencesSequenceOutput
}

type GetSequencesSequenceArgs struct {
	// The sequence's data type as defined in ``information_schema.sequences``.
	DataType pulumi.StringInput `pulumi:"dataType"`
	// The sequence name.
	ObjectName pulumi.StringInput `pulumi:"objectName"`
	// The parent schema.
	SchemaName pulumi.StringInput `pulumi:"schemaName"`
}

func (GetSequencesSequenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSequencesSequence)(nil)).Elem()
}

func (i GetSequencesSequenceArgs) ToGetSequencesSequenceOutput() GetSequencesSequenceOutput {
	return i.ToGetSequencesSequenceOutputWithContext(context.Background())
}

func (i GetSequencesSequenceArgs) ToGetSequencesSequenceOutputWithContext(ctx context.Context) GetSequencesSequenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSequencesSequenceOutput)
}

func (i GetSequencesSequenceArgs) ToOutput(ctx context.Context) pulumix.Output[GetSequencesSequence] {
	return pulumix.Output[GetSequencesSequence]{
		OutputState: i.ToGetSequencesSequenceOutputWithContext(ctx).OutputState,
	}
}

// GetSequencesSequenceArrayInput is an input type that accepts GetSequencesSequenceArray and GetSequencesSequenceArrayOutput values.
// You can construct a concrete instance of `GetSequencesSequenceArrayInput` via:
//
//	GetSequencesSequenceArray{ GetSequencesSequenceArgs{...} }
type GetSequencesSequenceArrayInput interface {
	pulumi.Input

	ToGetSequencesSequenceArrayOutput() GetSequencesSequenceArrayOutput
	ToGetSequencesSequenceArrayOutputWithContext(context.Context) GetSequencesSequenceArrayOutput
}

type GetSequencesSequenceArray []GetSequencesSequenceInput

func (GetSequencesSequenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSequencesSequence)(nil)).Elem()
}

func (i GetSequencesSequenceArray) ToGetSequencesSequenceArrayOutput() GetSequencesSequenceArrayOutput {
	return i.ToGetSequencesSequenceArrayOutputWithContext(context.Background())
}

func (i GetSequencesSequenceArray) ToGetSequencesSequenceArrayOutputWithContext(ctx context.Context) GetSequencesSequenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSequencesSequenceArrayOutput)
}

func (i GetSequencesSequenceArray) ToOutput(ctx context.Context) pulumix.Output[[]GetSequencesSequence] {
	return pulumix.Output[[]GetSequencesSequence]{
		OutputState: i.ToGetSequencesSequenceArrayOutputWithContext(ctx).OutputState,
	}
}

type GetSequencesSequenceOutput struct{ *pulumi.OutputState }

func (GetSequencesSequenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSequencesSequence)(nil)).Elem()
}

func (o GetSequencesSequenceOutput) ToGetSequencesSequenceOutput() GetSequencesSequenceOutput {
	return o
}

func (o GetSequencesSequenceOutput) ToGetSequencesSequenceOutputWithContext(ctx context.Context) GetSequencesSequenceOutput {
	return o
}

func (o GetSequencesSequenceOutput) ToOutput(ctx context.Context) pulumix.Output[GetSequencesSequence] {
	return pulumix.Output[GetSequencesSequence]{
		OutputState: o.OutputState,
	}
}

// The sequence's data type as defined in “information_schema.sequences“.
func (o GetSequencesSequenceOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSequencesSequence) string { return v.DataType }).(pulumi.StringOutput)
}

// The sequence name.
func (o GetSequencesSequenceOutput) ObjectName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSequencesSequence) string { return v.ObjectName }).(pulumi.StringOutput)
}

// The parent schema.
func (o GetSequencesSequenceOutput) SchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSequencesSequence) string { return v.SchemaName }).(pulumi.StringOutput)
}

type GetSequencesSequenceArrayOutput struct{ *pulumi.OutputState }

func (GetSequencesSequenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSequencesSequence)(nil)).Elem()
}

func (o GetSequencesSequenceArrayOutput) ToGetSequencesSequenceArrayOutput() GetSequencesSequenceArrayOutput {
	return o
}

func (o GetSequencesSequenceArrayOutput) ToGetSequencesSequenceArrayOutputWithContext(ctx context.Context) GetSequencesSequenceArrayOutput {
	return o
}

func (o GetSequencesSequenceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetSequencesSequence] {
	return pulumix.Output[[]GetSequencesSequence]{
		OutputState: o.OutputState,
	}
}

func (o GetSequencesSequenceArrayOutput) Index(i pulumi.IntInput) GetSequencesSequenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSequencesSequence {
		return vs[0].([]GetSequencesSequence)[vs[1].(int)]
	}).(GetSequencesSequenceOutput)
}

type GetTablesTable struct {
	// The table name.
	ObjectName string `pulumi:"objectName"`
	// The parent schema.
	SchemaName string `pulumi:"schemaName"`
	// The table type as defined in ``information_schema.tables``.
	TableType string `pulumi:"tableType"`
}

// GetTablesTableInput is an input type that accepts GetTablesTableArgs and GetTablesTableOutput values.
// You can construct a concrete instance of `GetTablesTableInput` via:
//
//	GetTablesTableArgs{...}
type GetTablesTableInput interface {
	pulumi.Input

	ToGetTablesTableOutput() GetTablesTableOutput
	ToGetTablesTableOutputWithContext(context.Context) GetTablesTableOutput
}

type GetTablesTableArgs struct {
	// The table name.
	ObjectName pulumi.StringInput `pulumi:"objectName"`
	// The parent schema.
	SchemaName pulumi.StringInput `pulumi:"schemaName"`
	// The table type as defined in ``information_schema.tables``.
	TableType pulumi.StringInput `pulumi:"tableType"`
}

func (GetTablesTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTablesTable)(nil)).Elem()
}

func (i GetTablesTableArgs) ToGetTablesTableOutput() GetTablesTableOutput {
	return i.ToGetTablesTableOutputWithContext(context.Background())
}

func (i GetTablesTableArgs) ToGetTablesTableOutputWithContext(ctx context.Context) GetTablesTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTablesTableOutput)
}

func (i GetTablesTableArgs) ToOutput(ctx context.Context) pulumix.Output[GetTablesTable] {
	return pulumix.Output[GetTablesTable]{
		OutputState: i.ToGetTablesTableOutputWithContext(ctx).OutputState,
	}
}

// GetTablesTableArrayInput is an input type that accepts GetTablesTableArray and GetTablesTableArrayOutput values.
// You can construct a concrete instance of `GetTablesTableArrayInput` via:
//
//	GetTablesTableArray{ GetTablesTableArgs{...} }
type GetTablesTableArrayInput interface {
	pulumi.Input

	ToGetTablesTableArrayOutput() GetTablesTableArrayOutput
	ToGetTablesTableArrayOutputWithContext(context.Context) GetTablesTableArrayOutput
}

type GetTablesTableArray []GetTablesTableInput

func (GetTablesTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTablesTable)(nil)).Elem()
}

func (i GetTablesTableArray) ToGetTablesTableArrayOutput() GetTablesTableArrayOutput {
	return i.ToGetTablesTableArrayOutputWithContext(context.Background())
}

func (i GetTablesTableArray) ToGetTablesTableArrayOutputWithContext(ctx context.Context) GetTablesTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTablesTableArrayOutput)
}

func (i GetTablesTableArray) ToOutput(ctx context.Context) pulumix.Output[[]GetTablesTable] {
	return pulumix.Output[[]GetTablesTable]{
		OutputState: i.ToGetTablesTableArrayOutputWithContext(ctx).OutputState,
	}
}

type GetTablesTableOutput struct{ *pulumi.OutputState }

func (GetTablesTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTablesTable)(nil)).Elem()
}

func (o GetTablesTableOutput) ToGetTablesTableOutput() GetTablesTableOutput {
	return o
}

func (o GetTablesTableOutput) ToGetTablesTableOutputWithContext(ctx context.Context) GetTablesTableOutput {
	return o
}

func (o GetTablesTableOutput) ToOutput(ctx context.Context) pulumix.Output[GetTablesTable] {
	return pulumix.Output[GetTablesTable]{
		OutputState: o.OutputState,
	}
}

// The table name.
func (o GetTablesTableOutput) ObjectName() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTable) string { return v.ObjectName }).(pulumi.StringOutput)
}

// The parent schema.
func (o GetTablesTableOutput) SchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTable) string { return v.SchemaName }).(pulumi.StringOutput)
}

// The table type as defined in “information_schema.tables“.
func (o GetTablesTableOutput) TableType() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTable) string { return v.TableType }).(pulumi.StringOutput)
}

type GetTablesTableArrayOutput struct{ *pulumi.OutputState }

func (GetTablesTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTablesTable)(nil)).Elem()
}

func (o GetTablesTableArrayOutput) ToGetTablesTableArrayOutput() GetTablesTableArrayOutput {
	return o
}

func (o GetTablesTableArrayOutput) ToGetTablesTableArrayOutputWithContext(ctx context.Context) GetTablesTableArrayOutput {
	return o
}

func (o GetTablesTableArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetTablesTable] {
	return pulumix.Output[[]GetTablesTable]{
		OutputState: o.OutputState,
	}
}

func (o GetTablesTableArrayOutput) Index(i pulumi.IntInput) GetTablesTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTablesTable {
		return vs[0].([]GetTablesTable)[vs[1].(int)]
	}).(GetTablesTableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionArgInput)(nil)).Elem(), FunctionArgArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionArgArrayInput)(nil)).Elem(), FunctionArgArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderClientcertInput)(nil)).Elem(), ProviderClientcertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderClientcertPtrInput)(nil)).Elem(), ProviderClientcertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaPolicyInput)(nil)).Elem(), SchemaPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaPolicyArrayInput)(nil)).Elem(), SchemaPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSequencesSequenceInput)(nil)).Elem(), GetSequencesSequenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSequencesSequenceArrayInput)(nil)).Elem(), GetSequencesSequenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTablesTableInput)(nil)).Elem(), GetTablesTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTablesTableArrayInput)(nil)).Elem(), GetTablesTableArray{})
	pulumi.RegisterOutputType(FunctionArgOutput{})
	pulumi.RegisterOutputType(FunctionArgArrayOutput{})
	pulumi.RegisterOutputType(ProviderClientcertOutput{})
	pulumi.RegisterOutputType(ProviderClientcertPtrOutput{})
	pulumi.RegisterOutputType(SchemaPolicyOutput{})
	pulumi.RegisterOutputType(SchemaPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetSequencesSequenceOutput{})
	pulumi.RegisterOutputType(GetSequencesSequenceArrayOutput{})
	pulumi.RegisterOutputType(GetTablesTableOutput{})
	pulumi.RegisterOutputType(GetTablesTableArrayOutput{})
}
