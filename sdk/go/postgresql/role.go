// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package postgresql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-postgresql/sdk/v3/go/postgresql/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Role struct {
	pulumi.CustomResourceState

	// Defines the role to switch to at login via [`SET ROLE`](https://www.postgresql.org/docs/current/sql-set-role.html).
	AssumeRole pulumi.StringPtrOutput `pulumi:"assumeRole"`
	// Defines whether a role bypasses every
	// row-level security (RLS) policy.  Default value is `false`.
	BypassRowLevelSecurity pulumi.BoolPtrOutput `pulumi:"bypassRowLevelSecurity"`
	// If this role can log in, this specifies how
	// many concurrent connections the role can establish. `-1` (the default) means no
	// limit.
	ConnectionLimit pulumi.IntPtrOutput `pulumi:"connectionLimit"`
	// Defines a role's ability to execute `CREATE
	// DATABASE`.  Default value is `false`.
	CreateDatabase pulumi.BoolPtrOutput `pulumi:"createDatabase"`
	// Defines a role's ability to execute `CREATE ROLE`.
	// A role with this privilege can also alter and drop other roles.  Default value
	// is `false`.
	CreateRole pulumi.BoolPtrOutput `pulumi:"createRole"`
	// Deprecated: Rename PostgreSQL role resource attribute "encrypted" to "encryptedPassword"
	Encrypted pulumi.StringPtrOutput `pulumi:"encrypted"`
	// Defines whether the password is stored
	// encrypted in the system catalogs.  Default value is `true`.  NOTE: this value
	// is always set (to the conservative and safe value), but may interfere with the
	// behavior of
	// [PostgreSQL's `passwordEncryption` setting](https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION).
	EncryptedPassword pulumi.BoolPtrOutput `pulumi:"encryptedPassword"`
	// Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds
	IdleInTransactionSessionTimeout pulumi.IntPtrOutput `pulumi:"idleInTransactionSessionTimeout"`
	// Defines whether a role "inherits" the privileges of
	// roles it is a member of.  Default value is `true`.
	Inherit pulumi.BoolPtrOutput `pulumi:"inherit"`
	// Defines whether role is allowed to log in.  Roles without
	// this attribute are useful for managing database privileges, but are not users
	// in the usual sense of the word.  Default value is `false`.
	Login pulumi.BoolPtrOutput `pulumi:"login"`
	// The name of the role. Must be unique on the PostgreSQL
	// server instance where it is configured.
	Name pulumi.StringOutput `pulumi:"name"`
	// Sets the role's password. A password is only of use
	// for roles having the `login` attribute set to true.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Defines whether a role is allowed to initiate
	// streaming replication or put the system in and out of backup mode.  Default
	// value is `false`
	Replication pulumi.BoolPtrOutput `pulumi:"replication"`
	// Defines list of roles which will be granted to this new role.
	Roles pulumi.StringArrayOutput `pulumi:"roles"`
	// Alters the search path of this new role. Note that
	// due to limitations in the implementation, values cannot contain the substring
	// `", "`.
	SearchPaths pulumi.StringArrayOutput `pulumi:"searchPaths"`
	// When a PostgreSQL ROLE exists in multiple
	// databases and the ROLE is dropped, the
	// [cleanup of ownership of objects](https://www.postgresql.org/docs/current/static/role-removal.html)
	// in each of the respective databases must occur before the ROLE can be dropped
	// from the catalog.  Set this option to true when there are multiple databases
	// in a PostgreSQL cluster using the same PostgreSQL ROLE for object ownership.
	// This is the third and final step taken when removing a ROLE from a database.
	SkipDropRole pulumi.BoolPtrOutput `pulumi:"skipDropRole"`
	// When a PostgreSQL ROLE exists in multiple
	// databases and the ROLE is dropped, a
	// [`REASSIGN OWNED`](https://www.postgresql.org/docs/current/static/sql-reassign-owned.html) in
	// must be executed on each of the respective databases before the `DROP ROLE`
	// can be executed to dropped the ROLE from the catalog.  This is the first and
	// second steps taken when removing a ROLE from a database (the second step being
	// an implicit
	// [`DROP OWNED`](https://www.postgresql.org/docs/current/static/sql-drop-owned.html)).
	SkipReassignOwned pulumi.BoolPtrOutput `pulumi:"skipReassignOwned"`
	// Defines [`statementTimeout`](https://www.postgresql.org/docs/current/runtime-config-client.html#RUNTIME-CONFIG-CLIENT-STATEMENT) setting for this role which allows to abort any statement that takes more than the specified amount of time.
	StatementTimeout pulumi.IntPtrOutput `pulumi:"statementTimeout"`
	// Defines whether the role is a "superuser", and
	// therefore can override all access restrictions within the database.  Default
	// value is `false`.
	Superuser pulumi.BoolPtrOutput `pulumi:"superuser"`
	// Defines the date and time after which the role's
	// password is no longer valid.  Established connections past this `validTime`
	// will have to be manually terminated.  This value corresponds to a PostgreSQL
	// datetime. If omitted or the magic value `NULL` is used, `validUntil` will be
	// set to `infinity`.  Default is `NULL`, therefore `infinity`.
	ValidUntil pulumi.StringPtrOutput `pulumi:"validUntil"`
}

// NewRole registers a new resource with the given unique name, arguments, and options.
func NewRole(ctx *pulumi.Context,
	name string, args *RoleArgs, opts ...pulumi.ResourceOption) (*Role, error) {
	if args == nil {
		args = &RoleArgs{}
	}

	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Role
	err := ctx.RegisterResource("postgresql:index/role:Role", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRole gets an existing Role resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoleState, opts ...pulumi.ResourceOption) (*Role, error) {
	var resource Role
	err := ctx.ReadResource("postgresql:index/role:Role", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Role resources.
type roleState struct {
	// Defines the role to switch to at login via [`SET ROLE`](https://www.postgresql.org/docs/current/sql-set-role.html).
	AssumeRole *string `pulumi:"assumeRole"`
	// Defines whether a role bypasses every
	// row-level security (RLS) policy.  Default value is `false`.
	BypassRowLevelSecurity *bool `pulumi:"bypassRowLevelSecurity"`
	// If this role can log in, this specifies how
	// many concurrent connections the role can establish. `-1` (the default) means no
	// limit.
	ConnectionLimit *int `pulumi:"connectionLimit"`
	// Defines a role's ability to execute `CREATE
	// DATABASE`.  Default value is `false`.
	CreateDatabase *bool `pulumi:"createDatabase"`
	// Defines a role's ability to execute `CREATE ROLE`.
	// A role with this privilege can also alter and drop other roles.  Default value
	// is `false`.
	CreateRole *bool `pulumi:"createRole"`
	// Deprecated: Rename PostgreSQL role resource attribute "encrypted" to "encryptedPassword"
	Encrypted *string `pulumi:"encrypted"`
	// Defines whether the password is stored
	// encrypted in the system catalogs.  Default value is `true`.  NOTE: this value
	// is always set (to the conservative and safe value), but may interfere with the
	// behavior of
	// [PostgreSQL's `passwordEncryption` setting](https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION).
	EncryptedPassword *bool `pulumi:"encryptedPassword"`
	// Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds
	IdleInTransactionSessionTimeout *int `pulumi:"idleInTransactionSessionTimeout"`
	// Defines whether a role "inherits" the privileges of
	// roles it is a member of.  Default value is `true`.
	Inherit *bool `pulumi:"inherit"`
	// Defines whether role is allowed to log in.  Roles without
	// this attribute are useful for managing database privileges, but are not users
	// in the usual sense of the word.  Default value is `false`.
	Login *bool `pulumi:"login"`
	// The name of the role. Must be unique on the PostgreSQL
	// server instance where it is configured.
	Name *string `pulumi:"name"`
	// Sets the role's password. A password is only of use
	// for roles having the `login` attribute set to true.
	Password *string `pulumi:"password"`
	// Defines whether a role is allowed to initiate
	// streaming replication or put the system in and out of backup mode.  Default
	// value is `false`
	Replication *bool `pulumi:"replication"`
	// Defines list of roles which will be granted to this new role.
	Roles []string `pulumi:"roles"`
	// Alters the search path of this new role. Note that
	// due to limitations in the implementation, values cannot contain the substring
	// `", "`.
	SearchPaths []string `pulumi:"searchPaths"`
	// When a PostgreSQL ROLE exists in multiple
	// databases and the ROLE is dropped, the
	// [cleanup of ownership of objects](https://www.postgresql.org/docs/current/static/role-removal.html)
	// in each of the respective databases must occur before the ROLE can be dropped
	// from the catalog.  Set this option to true when there are multiple databases
	// in a PostgreSQL cluster using the same PostgreSQL ROLE for object ownership.
	// This is the third and final step taken when removing a ROLE from a database.
	SkipDropRole *bool `pulumi:"skipDropRole"`
	// When a PostgreSQL ROLE exists in multiple
	// databases and the ROLE is dropped, a
	// [`REASSIGN OWNED`](https://www.postgresql.org/docs/current/static/sql-reassign-owned.html) in
	// must be executed on each of the respective databases before the `DROP ROLE`
	// can be executed to dropped the ROLE from the catalog.  This is the first and
	// second steps taken when removing a ROLE from a database (the second step being
	// an implicit
	// [`DROP OWNED`](https://www.postgresql.org/docs/current/static/sql-drop-owned.html)).
	SkipReassignOwned *bool `pulumi:"skipReassignOwned"`
	// Defines [`statementTimeout`](https://www.postgresql.org/docs/current/runtime-config-client.html#RUNTIME-CONFIG-CLIENT-STATEMENT) setting for this role which allows to abort any statement that takes more than the specified amount of time.
	StatementTimeout *int `pulumi:"statementTimeout"`
	// Defines whether the role is a "superuser", and
	// therefore can override all access restrictions within the database.  Default
	// value is `false`.
	Superuser *bool `pulumi:"superuser"`
	// Defines the date and time after which the role's
	// password is no longer valid.  Established connections past this `validTime`
	// will have to be manually terminated.  This value corresponds to a PostgreSQL
	// datetime. If omitted or the magic value `NULL` is used, `validUntil` will be
	// set to `infinity`.  Default is `NULL`, therefore `infinity`.
	ValidUntil *string `pulumi:"validUntil"`
}

type RoleState struct {
	// Defines the role to switch to at login via [`SET ROLE`](https://www.postgresql.org/docs/current/sql-set-role.html).
	AssumeRole pulumi.StringPtrInput
	// Defines whether a role bypasses every
	// row-level security (RLS) policy.  Default value is `false`.
	BypassRowLevelSecurity pulumi.BoolPtrInput
	// If this role can log in, this specifies how
	// many concurrent connections the role can establish. `-1` (the default) means no
	// limit.
	ConnectionLimit pulumi.IntPtrInput
	// Defines a role's ability to execute `CREATE
	// DATABASE`.  Default value is `false`.
	CreateDatabase pulumi.BoolPtrInput
	// Defines a role's ability to execute `CREATE ROLE`.
	// A role with this privilege can also alter and drop other roles.  Default value
	// is `false`.
	CreateRole pulumi.BoolPtrInput
	// Deprecated: Rename PostgreSQL role resource attribute "encrypted" to "encryptedPassword"
	Encrypted pulumi.StringPtrInput
	// Defines whether the password is stored
	// encrypted in the system catalogs.  Default value is `true`.  NOTE: this value
	// is always set (to the conservative and safe value), but may interfere with the
	// behavior of
	// [PostgreSQL's `passwordEncryption` setting](https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION).
	EncryptedPassword pulumi.BoolPtrInput
	// Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds
	IdleInTransactionSessionTimeout pulumi.IntPtrInput
	// Defines whether a role "inherits" the privileges of
	// roles it is a member of.  Default value is `true`.
	Inherit pulumi.BoolPtrInput
	// Defines whether role is allowed to log in.  Roles without
	// this attribute are useful for managing database privileges, but are not users
	// in the usual sense of the word.  Default value is `false`.
	Login pulumi.BoolPtrInput
	// The name of the role. Must be unique on the PostgreSQL
	// server instance where it is configured.
	Name pulumi.StringPtrInput
	// Sets the role's password. A password is only of use
	// for roles having the `login` attribute set to true.
	Password pulumi.StringPtrInput
	// Defines whether a role is allowed to initiate
	// streaming replication or put the system in and out of backup mode.  Default
	// value is `false`
	Replication pulumi.BoolPtrInput
	// Defines list of roles which will be granted to this new role.
	Roles pulumi.StringArrayInput
	// Alters the search path of this new role. Note that
	// due to limitations in the implementation, values cannot contain the substring
	// `", "`.
	SearchPaths pulumi.StringArrayInput
	// When a PostgreSQL ROLE exists in multiple
	// databases and the ROLE is dropped, the
	// [cleanup of ownership of objects](https://www.postgresql.org/docs/current/static/role-removal.html)
	// in each of the respective databases must occur before the ROLE can be dropped
	// from the catalog.  Set this option to true when there are multiple databases
	// in a PostgreSQL cluster using the same PostgreSQL ROLE for object ownership.
	// This is the third and final step taken when removing a ROLE from a database.
	SkipDropRole pulumi.BoolPtrInput
	// When a PostgreSQL ROLE exists in multiple
	// databases and the ROLE is dropped, a
	// [`REASSIGN OWNED`](https://www.postgresql.org/docs/current/static/sql-reassign-owned.html) in
	// must be executed on each of the respective databases before the `DROP ROLE`
	// can be executed to dropped the ROLE from the catalog.  This is the first and
	// second steps taken when removing a ROLE from a database (the second step being
	// an implicit
	// [`DROP OWNED`](https://www.postgresql.org/docs/current/static/sql-drop-owned.html)).
	SkipReassignOwned pulumi.BoolPtrInput
	// Defines [`statementTimeout`](https://www.postgresql.org/docs/current/runtime-config-client.html#RUNTIME-CONFIG-CLIENT-STATEMENT) setting for this role which allows to abort any statement that takes more than the specified amount of time.
	StatementTimeout pulumi.IntPtrInput
	// Defines whether the role is a "superuser", and
	// therefore can override all access restrictions within the database.  Default
	// value is `false`.
	Superuser pulumi.BoolPtrInput
	// Defines the date and time after which the role's
	// password is no longer valid.  Established connections past this `validTime`
	// will have to be manually terminated.  This value corresponds to a PostgreSQL
	// datetime. If omitted or the magic value `NULL` is used, `validUntil` will be
	// set to `infinity`.  Default is `NULL`, therefore `infinity`.
	ValidUntil pulumi.StringPtrInput
}

func (RoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*roleState)(nil)).Elem()
}

type roleArgs struct {
	// Defines the role to switch to at login via [`SET ROLE`](https://www.postgresql.org/docs/current/sql-set-role.html).
	AssumeRole *string `pulumi:"assumeRole"`
	// Defines whether a role bypasses every
	// row-level security (RLS) policy.  Default value is `false`.
	BypassRowLevelSecurity *bool `pulumi:"bypassRowLevelSecurity"`
	// If this role can log in, this specifies how
	// many concurrent connections the role can establish. `-1` (the default) means no
	// limit.
	ConnectionLimit *int `pulumi:"connectionLimit"`
	// Defines a role's ability to execute `CREATE
	// DATABASE`.  Default value is `false`.
	CreateDatabase *bool `pulumi:"createDatabase"`
	// Defines a role's ability to execute `CREATE ROLE`.
	// A role with this privilege can also alter and drop other roles.  Default value
	// is `false`.
	CreateRole *bool `pulumi:"createRole"`
	// Deprecated: Rename PostgreSQL role resource attribute "encrypted" to "encryptedPassword"
	Encrypted *string `pulumi:"encrypted"`
	// Defines whether the password is stored
	// encrypted in the system catalogs.  Default value is `true`.  NOTE: this value
	// is always set (to the conservative and safe value), but may interfere with the
	// behavior of
	// [PostgreSQL's `passwordEncryption` setting](https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION).
	EncryptedPassword *bool `pulumi:"encryptedPassword"`
	// Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds
	IdleInTransactionSessionTimeout *int `pulumi:"idleInTransactionSessionTimeout"`
	// Defines whether a role "inherits" the privileges of
	// roles it is a member of.  Default value is `true`.
	Inherit *bool `pulumi:"inherit"`
	// Defines whether role is allowed to log in.  Roles without
	// this attribute are useful for managing database privileges, but are not users
	// in the usual sense of the word.  Default value is `false`.
	Login *bool `pulumi:"login"`
	// The name of the role. Must be unique on the PostgreSQL
	// server instance where it is configured.
	Name *string `pulumi:"name"`
	// Sets the role's password. A password is only of use
	// for roles having the `login` attribute set to true.
	Password *string `pulumi:"password"`
	// Defines whether a role is allowed to initiate
	// streaming replication or put the system in and out of backup mode.  Default
	// value is `false`
	Replication *bool `pulumi:"replication"`
	// Defines list of roles which will be granted to this new role.
	Roles []string `pulumi:"roles"`
	// Alters the search path of this new role. Note that
	// due to limitations in the implementation, values cannot contain the substring
	// `", "`.
	SearchPaths []string `pulumi:"searchPaths"`
	// When a PostgreSQL ROLE exists in multiple
	// databases and the ROLE is dropped, the
	// [cleanup of ownership of objects](https://www.postgresql.org/docs/current/static/role-removal.html)
	// in each of the respective databases must occur before the ROLE can be dropped
	// from the catalog.  Set this option to true when there are multiple databases
	// in a PostgreSQL cluster using the same PostgreSQL ROLE for object ownership.
	// This is the third and final step taken when removing a ROLE from a database.
	SkipDropRole *bool `pulumi:"skipDropRole"`
	// When a PostgreSQL ROLE exists in multiple
	// databases and the ROLE is dropped, a
	// [`REASSIGN OWNED`](https://www.postgresql.org/docs/current/static/sql-reassign-owned.html) in
	// must be executed on each of the respective databases before the `DROP ROLE`
	// can be executed to dropped the ROLE from the catalog.  This is the first and
	// second steps taken when removing a ROLE from a database (the second step being
	// an implicit
	// [`DROP OWNED`](https://www.postgresql.org/docs/current/static/sql-drop-owned.html)).
	SkipReassignOwned *bool `pulumi:"skipReassignOwned"`
	// Defines [`statementTimeout`](https://www.postgresql.org/docs/current/runtime-config-client.html#RUNTIME-CONFIG-CLIENT-STATEMENT) setting for this role which allows to abort any statement that takes more than the specified amount of time.
	StatementTimeout *int `pulumi:"statementTimeout"`
	// Defines whether the role is a "superuser", and
	// therefore can override all access restrictions within the database.  Default
	// value is `false`.
	Superuser *bool `pulumi:"superuser"`
	// Defines the date and time after which the role's
	// password is no longer valid.  Established connections past this `validTime`
	// will have to be manually terminated.  This value corresponds to a PostgreSQL
	// datetime. If omitted or the magic value `NULL` is used, `validUntil` will be
	// set to `infinity`.  Default is `NULL`, therefore `infinity`.
	ValidUntil *string `pulumi:"validUntil"`
}

// The set of arguments for constructing a Role resource.
type RoleArgs struct {
	// Defines the role to switch to at login via [`SET ROLE`](https://www.postgresql.org/docs/current/sql-set-role.html).
	AssumeRole pulumi.StringPtrInput
	// Defines whether a role bypasses every
	// row-level security (RLS) policy.  Default value is `false`.
	BypassRowLevelSecurity pulumi.BoolPtrInput
	// If this role can log in, this specifies how
	// many concurrent connections the role can establish. `-1` (the default) means no
	// limit.
	ConnectionLimit pulumi.IntPtrInput
	// Defines a role's ability to execute `CREATE
	// DATABASE`.  Default value is `false`.
	CreateDatabase pulumi.BoolPtrInput
	// Defines a role's ability to execute `CREATE ROLE`.
	// A role with this privilege can also alter and drop other roles.  Default value
	// is `false`.
	CreateRole pulumi.BoolPtrInput
	// Deprecated: Rename PostgreSQL role resource attribute "encrypted" to "encryptedPassword"
	Encrypted pulumi.StringPtrInput
	// Defines whether the password is stored
	// encrypted in the system catalogs.  Default value is `true`.  NOTE: this value
	// is always set (to the conservative and safe value), but may interfere with the
	// behavior of
	// [PostgreSQL's `passwordEncryption` setting](https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION).
	EncryptedPassword pulumi.BoolPtrInput
	// Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds
	IdleInTransactionSessionTimeout pulumi.IntPtrInput
	// Defines whether a role "inherits" the privileges of
	// roles it is a member of.  Default value is `true`.
	Inherit pulumi.BoolPtrInput
	// Defines whether role is allowed to log in.  Roles without
	// this attribute are useful for managing database privileges, but are not users
	// in the usual sense of the word.  Default value is `false`.
	Login pulumi.BoolPtrInput
	// The name of the role. Must be unique on the PostgreSQL
	// server instance where it is configured.
	Name pulumi.StringPtrInput
	// Sets the role's password. A password is only of use
	// for roles having the `login` attribute set to true.
	Password pulumi.StringPtrInput
	// Defines whether a role is allowed to initiate
	// streaming replication or put the system in and out of backup mode.  Default
	// value is `false`
	Replication pulumi.BoolPtrInput
	// Defines list of roles which will be granted to this new role.
	Roles pulumi.StringArrayInput
	// Alters the search path of this new role. Note that
	// due to limitations in the implementation, values cannot contain the substring
	// `", "`.
	SearchPaths pulumi.StringArrayInput
	// When a PostgreSQL ROLE exists in multiple
	// databases and the ROLE is dropped, the
	// [cleanup of ownership of objects](https://www.postgresql.org/docs/current/static/role-removal.html)
	// in each of the respective databases must occur before the ROLE can be dropped
	// from the catalog.  Set this option to true when there are multiple databases
	// in a PostgreSQL cluster using the same PostgreSQL ROLE for object ownership.
	// This is the third and final step taken when removing a ROLE from a database.
	SkipDropRole pulumi.BoolPtrInput
	// When a PostgreSQL ROLE exists in multiple
	// databases and the ROLE is dropped, a
	// [`REASSIGN OWNED`](https://www.postgresql.org/docs/current/static/sql-reassign-owned.html) in
	// must be executed on each of the respective databases before the `DROP ROLE`
	// can be executed to dropped the ROLE from the catalog.  This is the first and
	// second steps taken when removing a ROLE from a database (the second step being
	// an implicit
	// [`DROP OWNED`](https://www.postgresql.org/docs/current/static/sql-drop-owned.html)).
	SkipReassignOwned pulumi.BoolPtrInput
	// Defines [`statementTimeout`](https://www.postgresql.org/docs/current/runtime-config-client.html#RUNTIME-CONFIG-CLIENT-STATEMENT) setting for this role which allows to abort any statement that takes more than the specified amount of time.
	StatementTimeout pulumi.IntPtrInput
	// Defines whether the role is a "superuser", and
	// therefore can override all access restrictions within the database.  Default
	// value is `false`.
	Superuser pulumi.BoolPtrInput
	// Defines the date and time after which the role's
	// password is no longer valid.  Established connections past this `validTime`
	// will have to be manually terminated.  This value corresponds to a PostgreSQL
	// datetime. If omitted or the magic value `NULL` is used, `validUntil` will be
	// set to `infinity`.  Default is `NULL`, therefore `infinity`.
	ValidUntil pulumi.StringPtrInput
}

func (RoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roleArgs)(nil)).Elem()
}

type RoleInput interface {
	pulumi.Input

	ToRoleOutput() RoleOutput
	ToRoleOutputWithContext(ctx context.Context) RoleOutput
}

func (*Role) ElementType() reflect.Type {
	return reflect.TypeOf((**Role)(nil)).Elem()
}

func (i *Role) ToRoleOutput() RoleOutput {
	return i.ToRoleOutputWithContext(context.Background())
}

func (i *Role) ToRoleOutputWithContext(ctx context.Context) RoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleOutput)
}

// RoleArrayInput is an input type that accepts RoleArray and RoleArrayOutput values.
// You can construct a concrete instance of `RoleArrayInput` via:
//
//	RoleArray{ RoleArgs{...} }
type RoleArrayInput interface {
	pulumi.Input

	ToRoleArrayOutput() RoleArrayOutput
	ToRoleArrayOutputWithContext(context.Context) RoleArrayOutput
}

type RoleArray []RoleInput

func (RoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Role)(nil)).Elem()
}

func (i RoleArray) ToRoleArrayOutput() RoleArrayOutput {
	return i.ToRoleArrayOutputWithContext(context.Background())
}

func (i RoleArray) ToRoleArrayOutputWithContext(ctx context.Context) RoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleArrayOutput)
}

// RoleMapInput is an input type that accepts RoleMap and RoleMapOutput values.
// You can construct a concrete instance of `RoleMapInput` via:
//
//	RoleMap{ "key": RoleArgs{...} }
type RoleMapInput interface {
	pulumi.Input

	ToRoleMapOutput() RoleMapOutput
	ToRoleMapOutputWithContext(context.Context) RoleMapOutput
}

type RoleMap map[string]RoleInput

func (RoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Role)(nil)).Elem()
}

func (i RoleMap) ToRoleMapOutput() RoleMapOutput {
	return i.ToRoleMapOutputWithContext(context.Background())
}

func (i RoleMap) ToRoleMapOutputWithContext(ctx context.Context) RoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleMapOutput)
}

type RoleOutput struct{ *pulumi.OutputState }

func (RoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Role)(nil)).Elem()
}

func (o RoleOutput) ToRoleOutput() RoleOutput {
	return o
}

func (o RoleOutput) ToRoleOutputWithContext(ctx context.Context) RoleOutput {
	return o
}

// Defines the role to switch to at login via [`SET ROLE`](https://www.postgresql.org/docs/current/sql-set-role.html).
func (o RoleOutput) AssumeRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Role) pulumi.StringPtrOutput { return v.AssumeRole }).(pulumi.StringPtrOutput)
}

// Defines whether a role bypasses every
// row-level security (RLS) policy.  Default value is `false`.
func (o RoleOutput) BypassRowLevelSecurity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Role) pulumi.BoolPtrOutput { return v.BypassRowLevelSecurity }).(pulumi.BoolPtrOutput)
}

// If this role can log in, this specifies how
// many concurrent connections the role can establish. `-1` (the default) means no
// limit.
func (o RoleOutput) ConnectionLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Role) pulumi.IntPtrOutput { return v.ConnectionLimit }).(pulumi.IntPtrOutput)
}

// Defines a role's ability to execute `CREATE
// DATABASE`.  Default value is `false`.
func (o RoleOutput) CreateDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Role) pulumi.BoolPtrOutput { return v.CreateDatabase }).(pulumi.BoolPtrOutput)
}

// Defines a role's ability to execute `CREATE ROLE`.
// A role with this privilege can also alter and drop other roles.  Default value
// is `false`.
func (o RoleOutput) CreateRole() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Role) pulumi.BoolPtrOutput { return v.CreateRole }).(pulumi.BoolPtrOutput)
}

// Deprecated: Rename PostgreSQL role resource attribute "encrypted" to "encryptedPassword"
func (o RoleOutput) Encrypted() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Role) pulumi.StringPtrOutput { return v.Encrypted }).(pulumi.StringPtrOutput)
}

// Defines whether the password is stored
// encrypted in the system catalogs.  Default value is `true`.  NOTE: this value
// is always set (to the conservative and safe value), but may interfere with the
// behavior of
// [PostgreSQL's `passwordEncryption` setting](https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION).
func (o RoleOutput) EncryptedPassword() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Role) pulumi.BoolPtrOutput { return v.EncryptedPassword }).(pulumi.BoolPtrOutput)
}

// Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds
func (o RoleOutput) IdleInTransactionSessionTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Role) pulumi.IntPtrOutput { return v.IdleInTransactionSessionTimeout }).(pulumi.IntPtrOutput)
}

// Defines whether a role "inherits" the privileges of
// roles it is a member of.  Default value is `true`.
func (o RoleOutput) Inherit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Role) pulumi.BoolPtrOutput { return v.Inherit }).(pulumi.BoolPtrOutput)
}

// Defines whether role is allowed to log in.  Roles without
// this attribute are useful for managing database privileges, but are not users
// in the usual sense of the word.  Default value is `false`.
func (o RoleOutput) Login() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Role) pulumi.BoolPtrOutput { return v.Login }).(pulumi.BoolPtrOutput)
}

// The name of the role. Must be unique on the PostgreSQL
// server instance where it is configured.
func (o RoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Role) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Sets the role's password. A password is only of use
// for roles having the `login` attribute set to true.
func (o RoleOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Role) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Defines whether a role is allowed to initiate
// streaming replication or put the system in and out of backup mode.  Default
// value is `false`
func (o RoleOutput) Replication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Role) pulumi.BoolPtrOutput { return v.Replication }).(pulumi.BoolPtrOutput)
}

// Defines list of roles which will be granted to this new role.
func (o RoleOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Role) pulumi.StringArrayOutput { return v.Roles }).(pulumi.StringArrayOutput)
}

// Alters the search path of this new role. Note that
// due to limitations in the implementation, values cannot contain the substring
// `", "`.
func (o RoleOutput) SearchPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Role) pulumi.StringArrayOutput { return v.SearchPaths }).(pulumi.StringArrayOutput)
}

// When a PostgreSQL ROLE exists in multiple
// databases and the ROLE is dropped, the
// [cleanup of ownership of objects](https://www.postgresql.org/docs/current/static/role-removal.html)
// in each of the respective databases must occur before the ROLE can be dropped
// from the catalog.  Set this option to true when there are multiple databases
// in a PostgreSQL cluster using the same PostgreSQL ROLE for object ownership.
// This is the third and final step taken when removing a ROLE from a database.
func (o RoleOutput) SkipDropRole() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Role) pulumi.BoolPtrOutput { return v.SkipDropRole }).(pulumi.BoolPtrOutput)
}

// When a PostgreSQL ROLE exists in multiple
// databases and the ROLE is dropped, a
// [`REASSIGN OWNED`](https://www.postgresql.org/docs/current/static/sql-reassign-owned.html) in
// must be executed on each of the respective databases before the `DROP ROLE`
// can be executed to dropped the ROLE from the catalog.  This is the first and
// second steps taken when removing a ROLE from a database (the second step being
// an implicit
// [`DROP OWNED`](https://www.postgresql.org/docs/current/static/sql-drop-owned.html)).
func (o RoleOutput) SkipReassignOwned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Role) pulumi.BoolPtrOutput { return v.SkipReassignOwned }).(pulumi.BoolPtrOutput)
}

// Defines [`statementTimeout`](https://www.postgresql.org/docs/current/runtime-config-client.html#RUNTIME-CONFIG-CLIENT-STATEMENT) setting for this role which allows to abort any statement that takes more than the specified amount of time.
func (o RoleOutput) StatementTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Role) pulumi.IntPtrOutput { return v.StatementTimeout }).(pulumi.IntPtrOutput)
}

// Defines whether the role is a "superuser", and
// therefore can override all access restrictions within the database.  Default
// value is `false`.
func (o RoleOutput) Superuser() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Role) pulumi.BoolPtrOutput { return v.Superuser }).(pulumi.BoolPtrOutput)
}

// Defines the date and time after which the role's
// password is no longer valid.  Established connections past this `validTime`
// will have to be manually terminated.  This value corresponds to a PostgreSQL
// datetime. If omitted or the magic value `NULL` is used, `validUntil` will be
// set to `infinity`.  Default is `NULL`, therefore `infinity`.
func (o RoleOutput) ValidUntil() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Role) pulumi.StringPtrOutput { return v.ValidUntil }).(pulumi.StringPtrOutput)
}

type RoleArrayOutput struct{ *pulumi.OutputState }

func (RoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Role)(nil)).Elem()
}

func (o RoleArrayOutput) ToRoleArrayOutput() RoleArrayOutput {
	return o
}

func (o RoleArrayOutput) ToRoleArrayOutputWithContext(ctx context.Context) RoleArrayOutput {
	return o
}

func (o RoleArrayOutput) Index(i pulumi.IntInput) RoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Role {
		return vs[0].([]*Role)[vs[1].(int)]
	}).(RoleOutput)
}

type RoleMapOutput struct{ *pulumi.OutputState }

func (RoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Role)(nil)).Elem()
}

func (o RoleMapOutput) ToRoleMapOutput() RoleMapOutput {
	return o
}

func (o RoleMapOutput) ToRoleMapOutputWithContext(ctx context.Context) RoleMapOutput {
	return o
}

func (o RoleMapOutput) MapIndex(k pulumi.StringInput) RoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Role {
		return vs[0].(map[string]*Role)[vs[1].(string)]
	}).(RoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoleInput)(nil)).Elem(), &Role{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleArrayInput)(nil)).Elem(), RoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleMapInput)(nil)).Elem(), RoleMap{})
	pulumi.RegisterOutputType(RoleOutput{})
	pulumi.RegisterOutputType(RoleArrayOutput{})
	pulumi.RegisterOutputType(RoleMapOutput{})
}
