// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package postgresql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-postgresql/sdk/v3/go/postgresql/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The “Extension“ resource creates and manages an extension on a PostgreSQL
// server.
//
// ## Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-postgresql/sdk/v3/go/postgresql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := postgresql.NewExtension(ctx, "myExtension", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// PostgreSQL Extensions can be imported using the database name and the extension's resource name, e.g.
//
// ```sh
//
//	$ pulumi import postgresql:index/extension:Extension uuid_ossp example-database.uuid-ossp`
//
// ```
type Extension struct {
	pulumi.CustomResourceState

	// When true, will also create any extensions that this extension depends on that are not already installed. (Default: false)
	CreateCascade pulumi.BoolPtrOutput `pulumi:"createCascade"`
	// Which database to create the extension on. Defaults to provider database.
	Database pulumi.StringOutput `pulumi:"database"`
	// When true, will also drop all the objects that depend on the extension, and in turn all objects that depend on those objects. (Default: false)
	DropCascade pulumi.BoolPtrOutput `pulumi:"dropCascade"`
	// The name of the extension.
	Name pulumi.StringOutput `pulumi:"name"`
	// Sets the schema of an extension.
	Schema pulumi.StringOutput `pulumi:"schema"`
	// Sets the version number of the extension.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewExtension registers a new resource with the given unique name, arguments, and options.
func NewExtension(ctx *pulumi.Context,
	name string, args *ExtensionArgs, opts ...pulumi.ResourceOption) (*Extension, error) {
	if args == nil {
		args = &ExtensionArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Extension
	err := ctx.RegisterResource("postgresql:index/extension:Extension", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExtension gets an existing Extension resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExtension(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExtensionState, opts ...pulumi.ResourceOption) (*Extension, error) {
	var resource Extension
	err := ctx.ReadResource("postgresql:index/extension:Extension", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Extension resources.
type extensionState struct {
	// When true, will also create any extensions that this extension depends on that are not already installed. (Default: false)
	CreateCascade *bool `pulumi:"createCascade"`
	// Which database to create the extension on. Defaults to provider database.
	Database *string `pulumi:"database"`
	// When true, will also drop all the objects that depend on the extension, and in turn all objects that depend on those objects. (Default: false)
	DropCascade *bool `pulumi:"dropCascade"`
	// The name of the extension.
	Name *string `pulumi:"name"`
	// Sets the schema of an extension.
	Schema *string `pulumi:"schema"`
	// Sets the version number of the extension.
	Version *string `pulumi:"version"`
}

type ExtensionState struct {
	// When true, will also create any extensions that this extension depends on that are not already installed. (Default: false)
	CreateCascade pulumi.BoolPtrInput
	// Which database to create the extension on. Defaults to provider database.
	Database pulumi.StringPtrInput
	// When true, will also drop all the objects that depend on the extension, and in turn all objects that depend on those objects. (Default: false)
	DropCascade pulumi.BoolPtrInput
	// The name of the extension.
	Name pulumi.StringPtrInput
	// Sets the schema of an extension.
	Schema pulumi.StringPtrInput
	// Sets the version number of the extension.
	Version pulumi.StringPtrInput
}

func (ExtensionState) ElementType() reflect.Type {
	return reflect.TypeOf((*extensionState)(nil)).Elem()
}

type extensionArgs struct {
	// When true, will also create any extensions that this extension depends on that are not already installed. (Default: false)
	CreateCascade *bool `pulumi:"createCascade"`
	// Which database to create the extension on. Defaults to provider database.
	Database *string `pulumi:"database"`
	// When true, will also drop all the objects that depend on the extension, and in turn all objects that depend on those objects. (Default: false)
	DropCascade *bool `pulumi:"dropCascade"`
	// The name of the extension.
	Name *string `pulumi:"name"`
	// Sets the schema of an extension.
	Schema *string `pulumi:"schema"`
	// Sets the version number of the extension.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a Extension resource.
type ExtensionArgs struct {
	// When true, will also create any extensions that this extension depends on that are not already installed. (Default: false)
	CreateCascade pulumi.BoolPtrInput
	// Which database to create the extension on. Defaults to provider database.
	Database pulumi.StringPtrInput
	// When true, will also drop all the objects that depend on the extension, and in turn all objects that depend on those objects. (Default: false)
	DropCascade pulumi.BoolPtrInput
	// The name of the extension.
	Name pulumi.StringPtrInput
	// Sets the schema of an extension.
	Schema pulumi.StringPtrInput
	// Sets the version number of the extension.
	Version pulumi.StringPtrInput
}

func (ExtensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*extensionArgs)(nil)).Elem()
}

type ExtensionInput interface {
	pulumi.Input

	ToExtensionOutput() ExtensionOutput
	ToExtensionOutputWithContext(ctx context.Context) ExtensionOutput
}

func (*Extension) ElementType() reflect.Type {
	return reflect.TypeOf((**Extension)(nil)).Elem()
}

func (i *Extension) ToExtensionOutput() ExtensionOutput {
	return i.ToExtensionOutputWithContext(context.Background())
}

func (i *Extension) ToExtensionOutputWithContext(ctx context.Context) ExtensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionOutput)
}

func (i *Extension) ToOutput(ctx context.Context) pulumix.Output[*Extension] {
	return pulumix.Output[*Extension]{
		OutputState: i.ToExtensionOutputWithContext(ctx).OutputState,
	}
}

// ExtensionArrayInput is an input type that accepts ExtensionArray and ExtensionArrayOutput values.
// You can construct a concrete instance of `ExtensionArrayInput` via:
//
//	ExtensionArray{ ExtensionArgs{...} }
type ExtensionArrayInput interface {
	pulumi.Input

	ToExtensionArrayOutput() ExtensionArrayOutput
	ToExtensionArrayOutputWithContext(context.Context) ExtensionArrayOutput
}

type ExtensionArray []ExtensionInput

func (ExtensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Extension)(nil)).Elem()
}

func (i ExtensionArray) ToExtensionArrayOutput() ExtensionArrayOutput {
	return i.ToExtensionArrayOutputWithContext(context.Background())
}

func (i ExtensionArray) ToExtensionArrayOutputWithContext(ctx context.Context) ExtensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionArrayOutput)
}

func (i ExtensionArray) ToOutput(ctx context.Context) pulumix.Output[[]*Extension] {
	return pulumix.Output[[]*Extension]{
		OutputState: i.ToExtensionArrayOutputWithContext(ctx).OutputState,
	}
}

// ExtensionMapInput is an input type that accepts ExtensionMap and ExtensionMapOutput values.
// You can construct a concrete instance of `ExtensionMapInput` via:
//
//	ExtensionMap{ "key": ExtensionArgs{...} }
type ExtensionMapInput interface {
	pulumi.Input

	ToExtensionMapOutput() ExtensionMapOutput
	ToExtensionMapOutputWithContext(context.Context) ExtensionMapOutput
}

type ExtensionMap map[string]ExtensionInput

func (ExtensionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Extension)(nil)).Elem()
}

func (i ExtensionMap) ToExtensionMapOutput() ExtensionMapOutput {
	return i.ToExtensionMapOutputWithContext(context.Background())
}

func (i ExtensionMap) ToExtensionMapOutputWithContext(ctx context.Context) ExtensionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionMapOutput)
}

func (i ExtensionMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Extension] {
	return pulumix.Output[map[string]*Extension]{
		OutputState: i.ToExtensionMapOutputWithContext(ctx).OutputState,
	}
}

type ExtensionOutput struct{ *pulumi.OutputState }

func (ExtensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Extension)(nil)).Elem()
}

func (o ExtensionOutput) ToExtensionOutput() ExtensionOutput {
	return o
}

func (o ExtensionOutput) ToExtensionOutputWithContext(ctx context.Context) ExtensionOutput {
	return o
}

func (o ExtensionOutput) ToOutput(ctx context.Context) pulumix.Output[*Extension] {
	return pulumix.Output[*Extension]{
		OutputState: o.OutputState,
	}
}

// When true, will also create any extensions that this extension depends on that are not already installed. (Default: false)
func (o ExtensionOutput) CreateCascade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Extension) pulumi.BoolPtrOutput { return v.CreateCascade }).(pulumi.BoolPtrOutput)
}

// Which database to create the extension on. Defaults to provider database.
func (o ExtensionOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *Extension) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

// When true, will also drop all the objects that depend on the extension, and in turn all objects that depend on those objects. (Default: false)
func (o ExtensionOutput) DropCascade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Extension) pulumi.BoolPtrOutput { return v.DropCascade }).(pulumi.BoolPtrOutput)
}

// The name of the extension.
func (o ExtensionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Extension) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Sets the schema of an extension.
func (o ExtensionOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v *Extension) pulumi.StringOutput { return v.Schema }).(pulumi.StringOutput)
}

// Sets the version number of the extension.
func (o ExtensionOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Extension) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type ExtensionArrayOutput struct{ *pulumi.OutputState }

func (ExtensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Extension)(nil)).Elem()
}

func (o ExtensionArrayOutput) ToExtensionArrayOutput() ExtensionArrayOutput {
	return o
}

func (o ExtensionArrayOutput) ToExtensionArrayOutputWithContext(ctx context.Context) ExtensionArrayOutput {
	return o
}

func (o ExtensionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Extension] {
	return pulumix.Output[[]*Extension]{
		OutputState: o.OutputState,
	}
}

func (o ExtensionArrayOutput) Index(i pulumi.IntInput) ExtensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Extension {
		return vs[0].([]*Extension)[vs[1].(int)]
	}).(ExtensionOutput)
}

type ExtensionMapOutput struct{ *pulumi.OutputState }

func (ExtensionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Extension)(nil)).Elem()
}

func (o ExtensionMapOutput) ToExtensionMapOutput() ExtensionMapOutput {
	return o
}

func (o ExtensionMapOutput) ToExtensionMapOutputWithContext(ctx context.Context) ExtensionMapOutput {
	return o
}

func (o ExtensionMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Extension] {
	return pulumix.Output[map[string]*Extension]{
		OutputState: o.OutputState,
	}
}

func (o ExtensionMapOutput) MapIndex(k pulumi.StringInput) ExtensionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Extension {
		return vs[0].(map[string]*Extension)[vs[1].(string)]
	}).(ExtensionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionInput)(nil)).Elem(), &Extension{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionArrayInput)(nil)).Elem(), ExtensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionMapInput)(nil)).Elem(), ExtensionMap{})
	pulumi.RegisterOutputType(ExtensionOutput{})
	pulumi.RegisterOutputType(ExtensionArrayOutput{})
	pulumi.RegisterOutputType(ExtensionMapOutput{})
}
