// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package postgresql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-postgresql/sdk/v3/go/postgresql/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The “SecurityLabel“ resource creates and manages security labels.
//
// See [PostgreSQL documentation](https://www.postgresql.org/docs/current/sql-security-label.html)
//
// > **Note:** This resource needs Postgresql version 11 or above.
//
// ## Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-postgresql/sdk/v3/go/postgresql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myRole, err := postgresql.NewRole(ctx, "my_role", &postgresql.RoleArgs{
//				Name:  pulumi.String("my_role"),
//				Login: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = postgresql.NewSecurityLabel(ctx, "workload", &postgresql.SecurityLabelArgs{
//				ObjectType:    pulumi.String("role"),
//				ObjectName:    myRole.Name,
//				LabelProvider: pulumi.String("pgaadauth"),
//				Label:         pulumi.String("aadauth,oid=00000000-0000-0000-0000-000000000000,type=service"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Security label is an attribute that can be added multiple times, so no import is needed, simply apply again.
type SecurityLabel struct {
	pulumi.CustomResourceState

	// The value of the security label.
	Label pulumi.StringOutput `pulumi:"label"`
	// The name of the provider with which this label is to be associated.
	LabelProvider pulumi.StringOutput `pulumi:"labelProvider"`
	// The name of the object to be labeled. Names of objects that reside in schemas (tables, functions, etc.) can be schema-qualified.
	ObjectName pulumi.StringOutput `pulumi:"objectName"`
	// The PostgreSQL object type to apply this security label to.
	ObjectType pulumi.StringOutput `pulumi:"objectType"`
}

// NewSecurityLabel registers a new resource with the given unique name, arguments, and options.
func NewSecurityLabel(ctx *pulumi.Context,
	name string, args *SecurityLabelArgs, opts ...pulumi.ResourceOption) (*SecurityLabel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Label == nil {
		return nil, errors.New("invalid value for required argument 'Label'")
	}
	if args.LabelProvider == nil {
		return nil, errors.New("invalid value for required argument 'LabelProvider'")
	}
	if args.ObjectName == nil {
		return nil, errors.New("invalid value for required argument 'ObjectName'")
	}
	if args.ObjectType == nil {
		return nil, errors.New("invalid value for required argument 'ObjectType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecurityLabel
	err := ctx.RegisterResource("postgresql:index/securityLabel:SecurityLabel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityLabel gets an existing SecurityLabel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityLabel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityLabelState, opts ...pulumi.ResourceOption) (*SecurityLabel, error) {
	var resource SecurityLabel
	err := ctx.ReadResource("postgresql:index/securityLabel:SecurityLabel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityLabel resources.
type securityLabelState struct {
	// The value of the security label.
	Label *string `pulumi:"label"`
	// The name of the provider with which this label is to be associated.
	LabelProvider *string `pulumi:"labelProvider"`
	// The name of the object to be labeled. Names of objects that reside in schemas (tables, functions, etc.) can be schema-qualified.
	ObjectName *string `pulumi:"objectName"`
	// The PostgreSQL object type to apply this security label to.
	ObjectType *string `pulumi:"objectType"`
}

type SecurityLabelState struct {
	// The value of the security label.
	Label pulumi.StringPtrInput
	// The name of the provider with which this label is to be associated.
	LabelProvider pulumi.StringPtrInput
	// The name of the object to be labeled. Names of objects that reside in schemas (tables, functions, etc.) can be schema-qualified.
	ObjectName pulumi.StringPtrInput
	// The PostgreSQL object type to apply this security label to.
	ObjectType pulumi.StringPtrInput
}

func (SecurityLabelState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityLabelState)(nil)).Elem()
}

type securityLabelArgs struct {
	// The value of the security label.
	Label string `pulumi:"label"`
	// The name of the provider with which this label is to be associated.
	LabelProvider string `pulumi:"labelProvider"`
	// The name of the object to be labeled. Names of objects that reside in schemas (tables, functions, etc.) can be schema-qualified.
	ObjectName string `pulumi:"objectName"`
	// The PostgreSQL object type to apply this security label to.
	ObjectType string `pulumi:"objectType"`
}

// The set of arguments for constructing a SecurityLabel resource.
type SecurityLabelArgs struct {
	// The value of the security label.
	Label pulumi.StringInput
	// The name of the provider with which this label is to be associated.
	LabelProvider pulumi.StringInput
	// The name of the object to be labeled. Names of objects that reside in schemas (tables, functions, etc.) can be schema-qualified.
	ObjectName pulumi.StringInput
	// The PostgreSQL object type to apply this security label to.
	ObjectType pulumi.StringInput
}

func (SecurityLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityLabelArgs)(nil)).Elem()
}

type SecurityLabelInput interface {
	pulumi.Input

	ToSecurityLabelOutput() SecurityLabelOutput
	ToSecurityLabelOutputWithContext(ctx context.Context) SecurityLabelOutput
}

func (*SecurityLabel) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityLabel)(nil)).Elem()
}

func (i *SecurityLabel) ToSecurityLabelOutput() SecurityLabelOutput {
	return i.ToSecurityLabelOutputWithContext(context.Background())
}

func (i *SecurityLabel) ToSecurityLabelOutputWithContext(ctx context.Context) SecurityLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityLabelOutput)
}

// SecurityLabelArrayInput is an input type that accepts SecurityLabelArray and SecurityLabelArrayOutput values.
// You can construct a concrete instance of `SecurityLabelArrayInput` via:
//
//	SecurityLabelArray{ SecurityLabelArgs{...} }
type SecurityLabelArrayInput interface {
	pulumi.Input

	ToSecurityLabelArrayOutput() SecurityLabelArrayOutput
	ToSecurityLabelArrayOutputWithContext(context.Context) SecurityLabelArrayOutput
}

type SecurityLabelArray []SecurityLabelInput

func (SecurityLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityLabel)(nil)).Elem()
}

func (i SecurityLabelArray) ToSecurityLabelArrayOutput() SecurityLabelArrayOutput {
	return i.ToSecurityLabelArrayOutputWithContext(context.Background())
}

func (i SecurityLabelArray) ToSecurityLabelArrayOutputWithContext(ctx context.Context) SecurityLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityLabelArrayOutput)
}

// SecurityLabelMapInput is an input type that accepts SecurityLabelMap and SecurityLabelMapOutput values.
// You can construct a concrete instance of `SecurityLabelMapInput` via:
//
//	SecurityLabelMap{ "key": SecurityLabelArgs{...} }
type SecurityLabelMapInput interface {
	pulumi.Input

	ToSecurityLabelMapOutput() SecurityLabelMapOutput
	ToSecurityLabelMapOutputWithContext(context.Context) SecurityLabelMapOutput
}

type SecurityLabelMap map[string]SecurityLabelInput

func (SecurityLabelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityLabel)(nil)).Elem()
}

func (i SecurityLabelMap) ToSecurityLabelMapOutput() SecurityLabelMapOutput {
	return i.ToSecurityLabelMapOutputWithContext(context.Background())
}

func (i SecurityLabelMap) ToSecurityLabelMapOutputWithContext(ctx context.Context) SecurityLabelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityLabelMapOutput)
}

type SecurityLabelOutput struct{ *pulumi.OutputState }

func (SecurityLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityLabel)(nil)).Elem()
}

func (o SecurityLabelOutput) ToSecurityLabelOutput() SecurityLabelOutput {
	return o
}

func (o SecurityLabelOutput) ToSecurityLabelOutputWithContext(ctx context.Context) SecurityLabelOutput {
	return o
}

// The value of the security label.
func (o SecurityLabelOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityLabel) pulumi.StringOutput { return v.Label }).(pulumi.StringOutput)
}

// The name of the provider with which this label is to be associated.
func (o SecurityLabelOutput) LabelProvider() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityLabel) pulumi.StringOutput { return v.LabelProvider }).(pulumi.StringOutput)
}

// The name of the object to be labeled. Names of objects that reside in schemas (tables, functions, etc.) can be schema-qualified.
func (o SecurityLabelOutput) ObjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityLabel) pulumi.StringOutput { return v.ObjectName }).(pulumi.StringOutput)
}

// The PostgreSQL object type to apply this security label to.
func (o SecurityLabelOutput) ObjectType() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityLabel) pulumi.StringOutput { return v.ObjectType }).(pulumi.StringOutput)
}

type SecurityLabelArrayOutput struct{ *pulumi.OutputState }

func (SecurityLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityLabel)(nil)).Elem()
}

func (o SecurityLabelArrayOutput) ToSecurityLabelArrayOutput() SecurityLabelArrayOutput {
	return o
}

func (o SecurityLabelArrayOutput) ToSecurityLabelArrayOutputWithContext(ctx context.Context) SecurityLabelArrayOutput {
	return o
}

func (o SecurityLabelArrayOutput) Index(i pulumi.IntInput) SecurityLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecurityLabel {
		return vs[0].([]*SecurityLabel)[vs[1].(int)]
	}).(SecurityLabelOutput)
}

type SecurityLabelMapOutput struct{ *pulumi.OutputState }

func (SecurityLabelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityLabel)(nil)).Elem()
}

func (o SecurityLabelMapOutput) ToSecurityLabelMapOutput() SecurityLabelMapOutput {
	return o
}

func (o SecurityLabelMapOutput) ToSecurityLabelMapOutputWithContext(ctx context.Context) SecurityLabelMapOutput {
	return o
}

func (o SecurityLabelMapOutput) MapIndex(k pulumi.StringInput) SecurityLabelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecurityLabel {
		return vs[0].(map[string]*SecurityLabel)[vs[1].(string)]
	}).(SecurityLabelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityLabelInput)(nil)).Elem(), &SecurityLabel{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityLabelArrayInput)(nil)).Elem(), SecurityLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityLabelMapInput)(nil)).Elem(), SecurityLabelMap{})
	pulumi.RegisterOutputType(SecurityLabelOutput{})
	pulumi.RegisterOutputType(SecurityLabelArrayOutput{})
	pulumi.RegisterOutputType(SecurityLabelMapOutput{})
}
