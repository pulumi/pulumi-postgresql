// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package postgresql

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The provider type for the postgresql package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}
	if args.ConnectTimeout == nil {
		args.ConnectTimeout = pulumi.IntPtr(getEnvOrDefault(180, parseEnvInt, "PGCONNECT_TIMEOUT").(int))
	}
	if args.Database == nil {
		args.Database = pulumi.StringPtr(getEnvOrDefault("postgres", nil, "PGDATABASE").(string))
	}
	if args.Host == nil {
		args.Host = pulumi.StringPtr(getEnvOrDefault("", nil, "PGHOST").(string))
	}
	if args.Password == nil {
		args.Password = pulumi.StringPtr(getEnvOrDefault("", nil, "PGPASSWORD").(string))
	}
	if args.Port == nil {
		args.Port = pulumi.IntPtr(getEnvOrDefault(5432, parseEnvInt, "PGPORT").(int))
	}
	if args.Sslmode == nil {
		args.Sslmode = pulumi.StringPtr(getEnvOrDefault("", nil, "PGSSLMODE").(string))
	}
	if args.Username == nil {
		args.Username = pulumi.StringPtr(getEnvOrDefault("postgres", nil, "PGUSER").(string))
	}
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:postgresql", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// Maximum wait for connection, in seconds. Zero or not specified means wait indefinitely.
	ConnectTimeout *int `pulumi:"connectTimeout"`
	// The name of the database to connect to in order to conenct to (defaults to `postgres`).
	Database *string `pulumi:"database"`
	// Database username associated to the connected user (for user name maps)
	DatabaseUsername *string `pulumi:"databaseUsername"`
	// Specify the expected version of PostgreSQL.
	ExpectedVersion *string `pulumi:"expectedVersion"`
	// Name of PostgreSQL server address to connect to
	Host *string `pulumi:"host"`
	// Maximum number of connections to establish to the database. Zero means unlimited.
	MaxConnections *int `pulumi:"maxConnections"`
	// Password to be used if the PostgreSQL server demands password authentication
	Password *string `pulumi:"password"`
	// The PostgreSQL port number to connect to at the server host, or socket file name extension for Unix-domain connections
	Port    *int    `pulumi:"port"`
	SslMode *string `pulumi:"sslMode"`
	// This option determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the
	// PostgreSQL server
	Sslmode *string `pulumi:"sslmode"`
	// Specify if the user to connect as is a Postgres superuser or not.If not, some feature might be disabled (e.g.:
	// Refreshing state password from Postgres)
	Superuser *bool `pulumi:"superuser"`
	// PostgreSQL user name to connect as
	Username *string `pulumi:"username"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// Maximum wait for connection, in seconds. Zero or not specified means wait indefinitely.
	ConnectTimeout pulumi.IntPtrInput
	// The name of the database to connect to in order to conenct to (defaults to `postgres`).
	Database pulumi.StringPtrInput
	// Database username associated to the connected user (for user name maps)
	DatabaseUsername pulumi.StringPtrInput
	// Specify the expected version of PostgreSQL.
	ExpectedVersion pulumi.StringPtrInput
	// Name of PostgreSQL server address to connect to
	Host pulumi.StringPtrInput
	// Maximum number of connections to establish to the database. Zero means unlimited.
	MaxConnections pulumi.IntPtrInput
	// Password to be used if the PostgreSQL server demands password authentication
	Password pulumi.StringPtrInput
	// The PostgreSQL port number to connect to at the server host, or socket file name extension for Unix-domain connections
	Port    pulumi.IntPtrInput
	SslMode pulumi.StringPtrInput
	// This option determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the
	// PostgreSQL server
	Sslmode pulumi.StringPtrInput
	// Specify if the user to connect as is a Postgres superuser or not.If not, some feature might be disabled (e.g.:
	// Refreshing state password from Postgres)
	Superuser pulumi.BoolPtrInput
	// PostgreSQL user name to connect as
	Username pulumi.StringPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}
