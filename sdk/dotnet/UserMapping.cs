// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.PostgreSql
{
    /// <summary>
    /// The ``postgresql.UserMapping`` resource creates and manages a user mapping on a PostgreSQL server.
    /// </summary>
    [PostgreSqlResourceType("postgresql:index/userMapping:UserMapping")]
    public partial class UserMapping : global::Pulumi.CustomResource
    {
        /// <summary>
        /// This clause specifies the options of the user mapping. The options typically define the actual user name and password of the mapping. Option names must be unique. The allowed option names and values are specific to the server's foreign-data wrapper.
        /// </summary>
        [Output("options")]
        public Output<ImmutableDictionary<string, string>?> Options { get; private set; } = null!;

        /// <summary>
        /// The name of an existing server for which the user mapping is to be created.
        /// Changing this value
        /// will force the creation of a new resource as this value can only be set
        /// when the user mapping is created.
        /// </summary>
        [Output("serverName")]
        public Output<string> ServerName { get; private set; } = null!;

        /// <summary>
        /// The name of an existing user that is mapped to foreign server. CURRENT_ROLE, CURRENT_USER, and USER match the name of the current user. When PUBLIC is specified, a so-called public mapping is created that is used when no user-specific mapping is applicable.
        /// Changing this value
        /// will force the creation of a new resource as this value can only be set
        /// when the user mapping is created.
        /// </summary>
        [Output("userName")]
        public Output<string> UserName { get; private set; } = null!;


        /// <summary>
        /// Create a UserMapping resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UserMapping(string name, UserMappingArgs args, CustomResourceOptions? options = null)
            : base("postgresql:index/userMapping:UserMapping", name, args ?? new UserMappingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UserMapping(string name, Input<string> id, UserMappingState? state = null, CustomResourceOptions? options = null)
            : base("postgresql:index/userMapping:UserMapping", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UserMapping resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UserMapping Get(string name, Input<string> id, UserMappingState? state = null, CustomResourceOptions? options = null)
        {
            return new UserMapping(name, id, state, options);
        }
    }

    public sealed class UserMappingArgs : global::Pulumi.ResourceArgs
    {
        [Input("options")]
        private InputMap<string>? _options;

        /// <summary>
        /// This clause specifies the options of the user mapping. The options typically define the actual user name and password of the mapping. Option names must be unique. The allowed option names and values are specific to the server's foreign-data wrapper.
        /// </summary>
        public InputMap<string> Options
        {
            get => _options ?? (_options = new InputMap<string>());
            set => _options = value;
        }

        /// <summary>
        /// The name of an existing server for which the user mapping is to be created.
        /// Changing this value
        /// will force the creation of a new resource as this value can only be set
        /// when the user mapping is created.
        /// </summary>
        [Input("serverName", required: true)]
        public Input<string> ServerName { get; set; } = null!;

        /// <summary>
        /// The name of an existing user that is mapped to foreign server. CURRENT_ROLE, CURRENT_USER, and USER match the name of the current user. When PUBLIC is specified, a so-called public mapping is created that is used when no user-specific mapping is applicable.
        /// Changing this value
        /// will force the creation of a new resource as this value can only be set
        /// when the user mapping is created.
        /// </summary>
        [Input("userName", required: true)]
        public Input<string> UserName { get; set; } = null!;

        public UserMappingArgs()
        {
        }
        public static new UserMappingArgs Empty => new UserMappingArgs();
    }

    public sealed class UserMappingState : global::Pulumi.ResourceArgs
    {
        [Input("options")]
        private InputMap<string>? _options;

        /// <summary>
        /// This clause specifies the options of the user mapping. The options typically define the actual user name and password of the mapping. Option names must be unique. The allowed option names and values are specific to the server's foreign-data wrapper.
        /// </summary>
        public InputMap<string> Options
        {
            get => _options ?? (_options = new InputMap<string>());
            set => _options = value;
        }

        /// <summary>
        /// The name of an existing server for which the user mapping is to be created.
        /// Changing this value
        /// will force the creation of a new resource as this value can only be set
        /// when the user mapping is created.
        /// </summary>
        [Input("serverName")]
        public Input<string>? ServerName { get; set; }

        /// <summary>
        /// The name of an existing user that is mapped to foreign server. CURRENT_ROLE, CURRENT_USER, and USER match the name of the current user. When PUBLIC is specified, a so-called public mapping is created that is used when no user-specific mapping is applicable.
        /// Changing this value
        /// will force the creation of a new resource as this value can only be set
        /// when the user mapping is created.
        /// </summary>
        [Input("userName")]
        public Input<string>? UserName { get; set; }

        public UserMappingState()
        {
        }
        public static new UserMappingState Empty => new UserMappingState();
    }
}
