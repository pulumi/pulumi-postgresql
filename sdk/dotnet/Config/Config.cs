// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Immutable;

namespace Pulumi.PostgreSql
{
    public static class Config
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "IDE1006", Justification = 
        "Double underscore prefix used to avoid conflicts with variable names.")]
        private sealed class __Value<T>
        {
            private readonly Func<T> _getter;
            private T _value = default!;
            private bool _set;

            public __Value(Func<T> getter)
            {
                _getter = getter;
            }

            public T Get() => _set ? _value : _getter();

            public void Set(T value)
            {
                _value = value;
                _set = true;
            }
        }

        private static readonly global::Pulumi.Config __config = new global::Pulumi.Config("postgresql");

        private static readonly __Value<bool?> _awsRdsIamAuth = new __Value<bool?>(() => __config.GetBoolean("awsRdsIamAuth"));
        /// <summary>
        /// Use rds_iam instead of password authentication (see:
        /// https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html)
        /// </summary>
        public static bool? AwsRdsIamAuth
        {
            get => _awsRdsIamAuth.Get();
            set => _awsRdsIamAuth.Set(value);
        }

        private static readonly __Value<string?> _awsRdsIamProfile = new __Value<string?>(() => __config.Get("awsRdsIamProfile"));
        /// <summary>
        /// AWS profile to use for IAM auth
        /// </summary>
        public static string? AwsRdsIamProfile
        {
            get => _awsRdsIamProfile.Get();
            set => _awsRdsIamProfile.Set(value);
        }

        private static readonly __Value<string?> _awsRdsIamRegion = new __Value<string?>(() => __config.Get("awsRdsIamRegion"));
        /// <summary>
        /// AWS region to use for IAM auth
        /// </summary>
        public static string? AwsRdsIamRegion
        {
            get => _awsRdsIamRegion.Get();
            set => _awsRdsIamRegion.Set(value);
        }

        private static readonly __Value<bool?> _azureIdentityAuth = new __Value<bool?>(() => __config.GetBoolean("azureIdentityAuth"));
        /// <summary>
        /// Use MS Azure identity OAuth token (see:
        /// https://learn.microsoft.com/en-us/azure/postgresql/flexible-server/how-to-configure-sign-in-azure-ad-authentication)
        /// </summary>
        public static bool? AzureIdentityAuth
        {
            get => _azureIdentityAuth.Get();
            set => _azureIdentityAuth.Set(value);
        }

        private static readonly __Value<string?> _azureTenantId = new __Value<string?>(() => __config.Get("azureTenantId"));
        /// <summary>
        /// MS Azure tenant ID (see:
        /// https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/data-sources/client_config.html)
        /// </summary>
        public static string? AzureTenantId
        {
            get => _azureTenantId.Get();
            set => _azureTenantId.Set(value);
        }

        private static readonly __Value<Pulumi.PostgreSql.Config.Types.Clientcert?> _clientcert = new __Value<Pulumi.PostgreSql.Config.Types.Clientcert?>(() => __config.GetObject<Pulumi.PostgreSql.Config.Types.Clientcert>("clientcert"));
        /// <summary>
        /// SSL client certificate if required by the database.
        /// </summary>
        public static Pulumi.PostgreSql.Config.Types.Clientcert? Clientcert
        {
            get => _clientcert.Get();
            set => _clientcert.Set(value);
        }

        private static readonly __Value<int?> _connectTimeout = new __Value<int?>(() => __config.GetInt32("connectTimeout") ?? Utilities.GetEnvInt32("PGCONNECT_TIMEOUT") ?? 180);
        /// <summary>
        /// Maximum wait for connection, in seconds. Zero or not specified means wait indefinitely.
        /// </summary>
        public static int? ConnectTimeout
        {
            get => _connectTimeout.Get();
            set => _connectTimeout.Set(value);
        }

        private static readonly __Value<string?> _database = new __Value<string?>(() => __config.Get("database"));
        /// <summary>
        /// The name of the database to connect to in order to conenct to (defaults to `postgres`).
        /// </summary>
        public static string? Database
        {
            get => _database.Get();
            set => _database.Set(value);
        }

        private static readonly __Value<string?> _databaseUsername = new __Value<string?>(() => __config.Get("databaseUsername"));
        /// <summary>
        /// Database username associated to the connected user (for user name maps)
        /// </summary>
        public static string? DatabaseUsername
        {
            get => _databaseUsername.Get();
            set => _databaseUsername.Set(value);
        }

        private static readonly __Value<string?> _expectedVersion = new __Value<string?>(() => __config.Get("expectedVersion"));
        /// <summary>
        /// Specify the expected version of PostgreSQL.
        /// </summary>
        public static string? ExpectedVersion
        {
            get => _expectedVersion.Get();
            set => _expectedVersion.Set(value);
        }

        private static readonly __Value<string?> _host = new __Value<string?>(() => __config.Get("host"));
        /// <summary>
        /// Name of PostgreSQL server address to connect to
        /// </summary>
        public static string? Host
        {
            get => _host.Get();
            set => _host.Set(value);
        }

        private static readonly __Value<int?> _maxConnections = new __Value<int?>(() => __config.GetInt32("maxConnections"));
        /// <summary>
        /// Maximum number of connections to establish to the database. Zero means unlimited.
        /// </summary>
        public static int? MaxConnections
        {
            get => _maxConnections.Get();
            set => _maxConnections.Set(value);
        }

        private static readonly __Value<string?> _password = new __Value<string?>(() => __config.Get("password"));
        /// <summary>
        /// Password to be used if the PostgreSQL server demands password authentication
        /// </summary>
        public static string? Password
        {
            get => _password.Get();
            set => _password.Set(value);
        }

        private static readonly __Value<int?> _port = new __Value<int?>(() => __config.GetInt32("port"));
        /// <summary>
        /// The PostgreSQL port number to connect to at the server host, or socket file name extension for Unix-domain connections
        /// </summary>
        public static int? Port
        {
            get => _port.Get();
            set => _port.Set(value);
        }

        private static readonly __Value<string?> _scheme = new __Value<string?>(() => __config.Get("scheme"));
        public static string? Scheme
        {
            get => _scheme.Get();
            set => _scheme.Set(value);
        }

        private static readonly __Value<string?> _sslMode = new __Value<string?>(() => __config.Get("sslMode"));
        public static string? SslMode
        {
            get => _sslMode.Get();
            set => _sslMode.Set(value);
        }

        private static readonly __Value<string?> _sslmode = new __Value<string?>(() => __config.Get("sslmode") ?? Utilities.GetEnv("PGSSLMODE"));
        /// <summary>
        /// This option determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the
        /// PostgreSQL server
        /// </summary>
        public static string? Sslmode
        {
            get => _sslmode.Get();
            set => _sslmode.Set(value);
        }

        private static readonly __Value<string?> _sslrootcert = new __Value<string?>(() => __config.Get("sslrootcert"));
        /// <summary>
        /// The SSL server root certificate file path. The file must contain PEM encoded data.
        /// </summary>
        public static string? Sslrootcert
        {
            get => _sslrootcert.Get();
            set => _sslrootcert.Set(value);
        }

        private static readonly __Value<bool?> _superuser = new __Value<bool?>(() => __config.GetBoolean("superuser"));
        /// <summary>
        /// Specify if the user to connect as is a Postgres superuser or not.If not, some feature might be disabled (e.g.:
        /// Refreshing state password from Postgres)
        /// </summary>
        public static bool? Superuser
        {
            get => _superuser.Get();
            set => _superuser.Set(value);
        }

        private static readonly __Value<string?> _username = new __Value<string?>(() => __config.Get("username"));
        /// <summary>
        /// PostgreSQL user name to connect as
        /// </summary>
        public static string? Username
        {
            get => _username.Get();
            set => _username.Set(value);
        }

        public static class Types
        {

             public class Clientcert
             {
                public string Cert { get; set; }
                public string Key { get; set; }
                public bool? Sslinline { get; set; }
            }
        }
    }
}
