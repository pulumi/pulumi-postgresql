// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.PostgreSql
{
    /// <summary>
    /// The ``postgresql.Server`` resource creates and manages a foreign server on a PostgreSQL server.
    /// </summary>
    [PostgreSqlResourceType("postgresql:index/server:Server")]
    public partial class Server : global::Pulumi.CustomResource
    {
        /// <summary>
        /// When true, will drop objects that depend on the server (such as user mappings), and in turn all objects that depend on those objects . (Default: false)
        /// </summary>
        [Output("dropCascade")]
        public Output<bool?> DropCascade { get; private set; } = null!;

        /// <summary>
        /// The name of the foreign-data wrapper that manages the server.
        /// Changing this value
        /// will force the creation of a new resource as this value can only be set
        /// when the foreign server is created.
        /// </summary>
        [Output("fdwName")]
        public Output<string> FdwName { get; private set; } = null!;

        /// <summary>
        /// This clause specifies the options for the server. The options typically define the connection details of the server, but the actual names and values are dependent on the server's foreign-data wrapper.
        /// </summary>
        [Output("options")]
        public Output<ImmutableDictionary<string, string>?> Options { get; private set; } = null!;

        /// <summary>
        /// The name of the foreign server to be created.
        /// </summary>
        [Output("serverName")]
        public Output<string> ServerName { get; private set; } = null!;

        /// <summary>
        /// By default, the user who defines the server becomes its owner. Set this value to configure the new owner of the foreign server.
        /// </summary>
        [Output("serverOwner")]
        public Output<string> ServerOwner { get; private set; } = null!;

        /// <summary>
        /// Optional server type, potentially useful to foreign-data wrappers.
        /// Changing this value
        /// will force the creation of a new resource as this value can only be set
        /// when the foreign server is created.
        /// </summary>
        [Output("serverType")]
        public Output<string?> ServerType { get; private set; } = null!;

        /// <summary>
        /// Optional server version, potentially useful to foreign-data wrappers.
        /// </summary>
        [Output("serverVersion")]
        public Output<string?> ServerVersion { get; private set; } = null!;


        /// <summary>
        /// Create a Server resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Server(string name, ServerArgs args, CustomResourceOptions? options = null)
            : base("postgresql:index/server:Server", name, args ?? new ServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Server(string name, Input<string> id, ServerState? state = null, CustomResourceOptions? options = null)
            : base("postgresql:index/server:Server", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Server resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Server Get(string name, Input<string> id, ServerState? state = null, CustomResourceOptions? options = null)
        {
            return new Server(name, id, state, options);
        }
    }

    public sealed class ServerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When true, will drop objects that depend on the server (such as user mappings), and in turn all objects that depend on those objects . (Default: false)
        /// </summary>
        [Input("dropCascade")]
        public Input<bool>? DropCascade { get; set; }

        /// <summary>
        /// The name of the foreign-data wrapper that manages the server.
        /// Changing this value
        /// will force the creation of a new resource as this value can only be set
        /// when the foreign server is created.
        /// </summary>
        [Input("fdwName", required: true)]
        public Input<string> FdwName { get; set; } = null!;

        [Input("options")]
        private InputMap<string>? _options;

        /// <summary>
        /// This clause specifies the options for the server. The options typically define the connection details of the server, but the actual names and values are dependent on the server's foreign-data wrapper.
        /// </summary>
        public InputMap<string> Options
        {
            get => _options ?? (_options = new InputMap<string>());
            set => _options = value;
        }

        /// <summary>
        /// The name of the foreign server to be created.
        /// </summary>
        [Input("serverName", required: true)]
        public Input<string> ServerName { get; set; } = null!;

        /// <summary>
        /// By default, the user who defines the server becomes its owner. Set this value to configure the new owner of the foreign server.
        /// </summary>
        [Input("serverOwner")]
        public Input<string>? ServerOwner { get; set; }

        /// <summary>
        /// Optional server type, potentially useful to foreign-data wrappers.
        /// Changing this value
        /// will force the creation of a new resource as this value can only be set
        /// when the foreign server is created.
        /// </summary>
        [Input("serverType")]
        public Input<string>? ServerType { get; set; }

        /// <summary>
        /// Optional server version, potentially useful to foreign-data wrappers.
        /// </summary>
        [Input("serverVersion")]
        public Input<string>? ServerVersion { get; set; }

        public ServerArgs()
        {
        }
        public static new ServerArgs Empty => new ServerArgs();
    }

    public sealed class ServerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When true, will drop objects that depend on the server (such as user mappings), and in turn all objects that depend on those objects . (Default: false)
        /// </summary>
        [Input("dropCascade")]
        public Input<bool>? DropCascade { get; set; }

        /// <summary>
        /// The name of the foreign-data wrapper that manages the server.
        /// Changing this value
        /// will force the creation of a new resource as this value can only be set
        /// when the foreign server is created.
        /// </summary>
        [Input("fdwName")]
        public Input<string>? FdwName { get; set; }

        [Input("options")]
        private InputMap<string>? _options;

        /// <summary>
        /// This clause specifies the options for the server. The options typically define the connection details of the server, but the actual names and values are dependent on the server's foreign-data wrapper.
        /// </summary>
        public InputMap<string> Options
        {
            get => _options ?? (_options = new InputMap<string>());
            set => _options = value;
        }

        /// <summary>
        /// The name of the foreign server to be created.
        /// </summary>
        [Input("serverName")]
        public Input<string>? ServerName { get; set; }

        /// <summary>
        /// By default, the user who defines the server becomes its owner. Set this value to configure the new owner of the foreign server.
        /// </summary>
        [Input("serverOwner")]
        public Input<string>? ServerOwner { get; set; }

        /// <summary>
        /// Optional server type, potentially useful to foreign-data wrappers.
        /// Changing this value
        /// will force the creation of a new resource as this value can only be set
        /// when the foreign server is created.
        /// </summary>
        [Input("serverType")]
        public Input<string>? ServerType { get; set; }

        /// <summary>
        /// Optional server version, potentially useful to foreign-data wrappers.
        /// </summary>
        [Input("serverVersion")]
        public Input<string>? ServerVersion { get; set; }

        public ServerState()
        {
        }
        public static new ServerState Empty => new ServerState();
    }
}
