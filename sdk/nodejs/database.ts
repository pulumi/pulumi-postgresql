// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Database extends pulumi.CustomResource {
    /**
     * Get an existing Database resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseState, opts?: pulumi.CustomResourceOptions): Database {
        return new Database(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'postgresql:index/database:Database';

    /**
     * Returns true if the given object is an instance of Database.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Database {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Database.__pulumiType;
    }

    /**
     * If `false` then no one can connect to this
     * database. The default is `true`, allowing connections (except as restricted by
     * other mechanisms, such as `GRANT` or `REVOKE CONNECT`).
     */
    declare public readonly allowConnections: pulumi.Output<boolean | undefined>;
    /**
     * If `true`, the change of the database
     * `owner` will also include a reassignment of the ownership of preexisting
     * objects like tables or sequences from the previous owner to the new one.
     * If set to `false` (the default), then the previous database `owner` will still
     * hold the ownership of the objects in that database. To alter existing objects in
     * the database, you must be a direct or indirect member of the specified role, or
     * the username in the provider must be superuser.
     */
    declare public readonly alterObjectOwnership: pulumi.Output<boolean | undefined>;
    /**
     * How many concurrent connections can be
     * established to this database. `-1` (the default) means no limit.
     */
    declare public readonly connectionLimit: pulumi.Output<number | undefined>;
    /**
     * Character set encoding to use in the new database
     */
    declare public readonly encoding: pulumi.Output<string>;
    /**
     * If `true`, then this database can be cloned by any
     * user with `CREATEDB` privileges; if `false` (the default), then only
     * superusers or the owner of the database can clone it.
     */
    declare public readonly isTemplate: pulumi.Output<boolean>;
    /**
     * Collation order (LC_COLLATE) to use in the new database
     */
    declare public readonly lcCollate: pulumi.Output<string>;
    /**
     * Character classification (LC_CTYPE) to use in the new database
     */
    declare public readonly lcCtype: pulumi.Output<string>;
    /**
     * The name of the database. Must be unique on the PostgreSQL
     * server instance where it is configured.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The role name of the user who will own the database, or
     * `DEFAULT` to use the default (namely, the user executing the command). To
     * create a database owned by another role or to change the owner of an existing
     * database, you must be a direct or indirect member of the specified role, or
     * the username in the provider is a superuser.
     */
    declare public readonly owner: pulumi.Output<string>;
    /**
     * The name of the tablespace that will be
     * associated with the database, or `DEFAULT` to use the template database's
     * tablespace.  This tablespace will be the default tablespace used for objects
     * created in this database.
     */
    declare public readonly tablespaceName: pulumi.Output<string>;
    /**
     * The name of the template from which to create the new database
     */
    declare public readonly template: pulumi.Output<string>;

    /**
     * Create a Database resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseArgs | DatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseState | undefined;
            resourceInputs["allowConnections"] = state?.allowConnections;
            resourceInputs["alterObjectOwnership"] = state?.alterObjectOwnership;
            resourceInputs["connectionLimit"] = state?.connectionLimit;
            resourceInputs["encoding"] = state?.encoding;
            resourceInputs["isTemplate"] = state?.isTemplate;
            resourceInputs["lcCollate"] = state?.lcCollate;
            resourceInputs["lcCtype"] = state?.lcCtype;
            resourceInputs["name"] = state?.name;
            resourceInputs["owner"] = state?.owner;
            resourceInputs["tablespaceName"] = state?.tablespaceName;
            resourceInputs["template"] = state?.template;
        } else {
            const args = argsOrState as DatabaseArgs | undefined;
            resourceInputs["allowConnections"] = args?.allowConnections;
            resourceInputs["alterObjectOwnership"] = args?.alterObjectOwnership;
            resourceInputs["connectionLimit"] = args?.connectionLimit;
            resourceInputs["encoding"] = args?.encoding;
            resourceInputs["isTemplate"] = args?.isTemplate;
            resourceInputs["lcCollate"] = args?.lcCollate;
            resourceInputs["lcCtype"] = args?.lcCtype;
            resourceInputs["name"] = args?.name;
            resourceInputs["owner"] = args?.owner;
            resourceInputs["tablespaceName"] = args?.tablespaceName;
            resourceInputs["template"] = args?.template;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Database.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Database resources.
 */
export interface DatabaseState {
    /**
     * If `false` then no one can connect to this
     * database. The default is `true`, allowing connections (except as restricted by
     * other mechanisms, such as `GRANT` or `REVOKE CONNECT`).
     */
    allowConnections?: pulumi.Input<boolean>;
    /**
     * If `true`, the change of the database
     * `owner` will also include a reassignment of the ownership of preexisting
     * objects like tables or sequences from the previous owner to the new one.
     * If set to `false` (the default), then the previous database `owner` will still
     * hold the ownership of the objects in that database. To alter existing objects in
     * the database, you must be a direct or indirect member of the specified role, or
     * the username in the provider must be superuser.
     */
    alterObjectOwnership?: pulumi.Input<boolean>;
    /**
     * How many concurrent connections can be
     * established to this database. `-1` (the default) means no limit.
     */
    connectionLimit?: pulumi.Input<number>;
    /**
     * Character set encoding to use in the new database
     */
    encoding?: pulumi.Input<string>;
    /**
     * If `true`, then this database can be cloned by any
     * user with `CREATEDB` privileges; if `false` (the default), then only
     * superusers or the owner of the database can clone it.
     */
    isTemplate?: pulumi.Input<boolean>;
    /**
     * Collation order (LC_COLLATE) to use in the new database
     */
    lcCollate?: pulumi.Input<string>;
    /**
     * Character classification (LC_CTYPE) to use in the new database
     */
    lcCtype?: pulumi.Input<string>;
    /**
     * The name of the database. Must be unique on the PostgreSQL
     * server instance where it is configured.
     */
    name?: pulumi.Input<string>;
    /**
     * The role name of the user who will own the database, or
     * `DEFAULT` to use the default (namely, the user executing the command). To
     * create a database owned by another role or to change the owner of an existing
     * database, you must be a direct or indirect member of the specified role, or
     * the username in the provider is a superuser.
     */
    owner?: pulumi.Input<string>;
    /**
     * The name of the tablespace that will be
     * associated with the database, or `DEFAULT` to use the template database's
     * tablespace.  This tablespace will be the default tablespace used for objects
     * created in this database.
     */
    tablespaceName?: pulumi.Input<string>;
    /**
     * The name of the template from which to create the new database
     */
    template?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Database resource.
 */
export interface DatabaseArgs {
    /**
     * If `false` then no one can connect to this
     * database. The default is `true`, allowing connections (except as restricted by
     * other mechanisms, such as `GRANT` or `REVOKE CONNECT`).
     */
    allowConnections?: pulumi.Input<boolean>;
    /**
     * If `true`, the change of the database
     * `owner` will also include a reassignment of the ownership of preexisting
     * objects like tables or sequences from the previous owner to the new one.
     * If set to `false` (the default), then the previous database `owner` will still
     * hold the ownership of the objects in that database. To alter existing objects in
     * the database, you must be a direct or indirect member of the specified role, or
     * the username in the provider must be superuser.
     */
    alterObjectOwnership?: pulumi.Input<boolean>;
    /**
     * How many concurrent connections can be
     * established to this database. `-1` (the default) means no limit.
     */
    connectionLimit?: pulumi.Input<number>;
    /**
     * Character set encoding to use in the new database
     */
    encoding?: pulumi.Input<string>;
    /**
     * If `true`, then this database can be cloned by any
     * user with `CREATEDB` privileges; if `false` (the default), then only
     * superusers or the owner of the database can clone it.
     */
    isTemplate?: pulumi.Input<boolean>;
    /**
     * Collation order (LC_COLLATE) to use in the new database
     */
    lcCollate?: pulumi.Input<string>;
    /**
     * Character classification (LC_CTYPE) to use in the new database
     */
    lcCtype?: pulumi.Input<string>;
    /**
     * The name of the database. Must be unique on the PostgreSQL
     * server instance where it is configured.
     */
    name?: pulumi.Input<string>;
    /**
     * The role name of the user who will own the database, or
     * `DEFAULT` to use the default (namely, the user executing the command). To
     * create a database owned by another role or to change the owner of an existing
     * database, you must be a direct or indirect member of the specified role, or
     * the username in the provider is a superuser.
     */
    owner?: pulumi.Input<string>;
    /**
     * The name of the tablespace that will be
     * associated with the database, or `DEFAULT` to use the template database's
     * tablespace.  This tablespace will be the default tablespace used for objects
     * created in this database.
     */
    tablespaceName?: pulumi.Input<string>;
    /**
     * The name of the template from which to create the new database
     */
    template?: pulumi.Input<string>;
}
