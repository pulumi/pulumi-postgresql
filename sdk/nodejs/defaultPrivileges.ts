// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The ``postgresql.DefaultPrivileges`` resource creates and manages default privileges given to a user for a database schema.
 *
 * > **Note:** This resource needs Postgresql version 9 or above.
 *
 * ## Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as postgresql from "@pulumi/postgresql";
 *
 * const readOnlyTables = new postgresql.DefaultPrivileges("read_only_tables", {
 *     role: "test_role",
 *     database: "test_db",
 *     schema: "public",
 *     owner: "db_owner",
 *     objectType: "table",
 *     privileges: ["SELECT"],
 * });
 * ```
 *
 * ## Examples
 *
 * ### Grant default privileges for tables to "currentRole" role:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as postgresql from "@pulumi/postgresql";
 *
 * const grantTablePrivileges = new postgresql.DefaultPrivileges("grant_table_privileges", {
 *     database: exampleDb.name,
 *     role: "current_role",
 *     owner: "owner_role",
 *     schema: "public",
 *     objectType: "table",
 *     privileges: [
 *         "SELECT",
 *         "INSERT",
 *         "UPDATE",
 *     ],
 * });
 * ```
 * Whenever the `ownerRole` creates a new table in the `public` schema, the `currentRole` is automatically granted SELECT, INSERT, and UPDATE privileges on that table.
 *
 * ### Revoke default privileges for functions for "public" role:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as postgresql from "@pulumi/postgresql";
 *
 * const revokePublic = new postgresql.DefaultPrivileges("revoke_public", {
 *     database: exampleDb.name,
 *     role: "public",
 *     owner: "object_owner",
 *     objectType: "function",
 *     privileges: [],
 * });
 * ```
 */
export class DefaultPrivileges extends pulumi.CustomResource {
    /**
     * Get an existing DefaultPrivileges resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultPrivilegesState, opts?: pulumi.CustomResourceOptions): DefaultPrivileges {
        return new DefaultPrivileges(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'postgresql:index/defaultPrivileges:DefaultPrivileges';

    /**
     * Returns true if the given object is an instance of DefaultPrivileges.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultPrivileges {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultPrivileges.__pulumiType;
    }

    /**
     * The database to grant default privileges for this role.
     */
    declare public readonly database: pulumi.Output<string>;
    /**
     * The PostgreSQL object type to set the default privileges on (one of: table, sequence, function, routine, type, schema).
     */
    declare public readonly objectType: pulumi.Output<string>;
    /**
     * Specifies the role that creates objects for which the default privileges will be applied.
     */
    declare public readonly owner: pulumi.Output<string>;
    /**
     * List of privileges (e.g., SELECT, INSERT, UPDATE, DELETE) to grant on new objects created by the owner. An empty list could be provided to revoke all default privileges for this role.
     */
    declare public readonly privileges: pulumi.Output<string[]>;
    /**
     * The role that will automatically be granted the specified privileges on new objects created by the owner.
     */
    declare public readonly role: pulumi.Output<string>;
    /**
     * The database schema to set default privileges for this role.
     */
    declare public readonly schema: pulumi.Output<string | undefined>;
    /**
     * Permit the grant recipient to grant it to others
     */
    declare public readonly withGrantOption: pulumi.Output<boolean | undefined>;

    /**
     * Create a DefaultPrivileges resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DefaultPrivilegesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultPrivilegesArgs | DefaultPrivilegesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultPrivilegesState | undefined;
            resourceInputs["database"] = state?.database;
            resourceInputs["objectType"] = state?.objectType;
            resourceInputs["owner"] = state?.owner;
            resourceInputs["privileges"] = state?.privileges;
            resourceInputs["role"] = state?.role;
            resourceInputs["schema"] = state?.schema;
            resourceInputs["withGrantOption"] = state?.withGrantOption;
        } else {
            const args = argsOrState as DefaultPrivilegesArgs | undefined;
            if (args?.database === undefined && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if (args?.objectType === undefined && !opts.urn) {
                throw new Error("Missing required property 'objectType'");
            }
            if (args?.owner === undefined && !opts.urn) {
                throw new Error("Missing required property 'owner'");
            }
            if (args?.privileges === undefined && !opts.urn) {
                throw new Error("Missing required property 'privileges'");
            }
            if (args?.role === undefined && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            resourceInputs["database"] = args?.database;
            resourceInputs["objectType"] = args?.objectType;
            resourceInputs["owner"] = args?.owner;
            resourceInputs["privileges"] = args?.privileges;
            resourceInputs["role"] = args?.role;
            resourceInputs["schema"] = args?.schema;
            resourceInputs["withGrantOption"] = args?.withGrantOption;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "postgresql:index/defaultPrivileg:DefaultPrivileg" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(DefaultPrivileges.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DefaultPrivileges resources.
 */
export interface DefaultPrivilegesState {
    /**
     * The database to grant default privileges for this role.
     */
    database?: pulumi.Input<string>;
    /**
     * The PostgreSQL object type to set the default privileges on (one of: table, sequence, function, routine, type, schema).
     */
    objectType?: pulumi.Input<string>;
    /**
     * Specifies the role that creates objects for which the default privileges will be applied.
     */
    owner?: pulumi.Input<string>;
    /**
     * List of privileges (e.g., SELECT, INSERT, UPDATE, DELETE) to grant on new objects created by the owner. An empty list could be provided to revoke all default privileges for this role.
     */
    privileges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The role that will automatically be granted the specified privileges on new objects created by the owner.
     */
    role?: pulumi.Input<string>;
    /**
     * The database schema to set default privileges for this role.
     */
    schema?: pulumi.Input<string>;
    /**
     * Permit the grant recipient to grant it to others
     */
    withGrantOption?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a DefaultPrivileges resource.
 */
export interface DefaultPrivilegesArgs {
    /**
     * The database to grant default privileges for this role.
     */
    database: pulumi.Input<string>;
    /**
     * The PostgreSQL object type to set the default privileges on (one of: table, sequence, function, routine, type, schema).
     */
    objectType: pulumi.Input<string>;
    /**
     * Specifies the role that creates objects for which the default privileges will be applied.
     */
    owner: pulumi.Input<string>;
    /**
     * List of privileges (e.g., SELECT, INSERT, UPDATE, DELETE) to grant on new objects created by the owner. An empty list could be provided to revoke all default privileges for this role.
     */
    privileges: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The role that will automatically be granted the specified privileges on new objects created by the owner.
     */
    role: pulumi.Input<string>;
    /**
     * The database schema to set default privileges for this role.
     */
    schema?: pulumi.Input<string>;
    /**
     * Permit the grant recipient to grant it to others
     */
    withGrantOption?: pulumi.Input<boolean>;
}
