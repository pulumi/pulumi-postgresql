// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Role extends pulumi.CustomResource {
    /**
     * Get an existing Role resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoleState, opts?: pulumi.CustomResourceOptions): Role {
        return new Role(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'postgresql:index/role:Role';

    /**
     * Returns true if the given object is an instance of Role.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Role {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Role.__pulumiType;
    }

    /**
     * Defines the role to switch to at login via [`SET ROLE`](https://www.postgresql.org/docs/current/sql-set-role.html).
     */
    declare public readonly assumeRole: pulumi.Output<string | undefined>;
    /**
     * Defines whether a role bypasses every
     * row-level security (RLS) policy.  Default value is `false`.
     */
    declare public readonly bypassRowLevelSecurity: pulumi.Output<boolean | undefined>;
    /**
     * If this role can log in, this specifies how
     * many concurrent connections the role can establish. `-1` (the default) means no
     * limit.
     */
    declare public readonly connectionLimit: pulumi.Output<number | undefined>;
    /**
     * Defines a role's ability to execute `CREATE
     * DATABASE`.  Default value is `false`.
     */
    declare public readonly createDatabase: pulumi.Output<boolean | undefined>;
    /**
     * Defines a role's ability to execute `CREATE ROLE`.
     * A role with this privilege can also alter and drop other roles.  Default value
     * is `false`.
     */
    declare public readonly createRole: pulumi.Output<boolean | undefined>;
    /**
     * @deprecated Rename PostgreSQL role resource attribute "encrypted" to "encryptedPassword"
     */
    declare public readonly encrypted: pulumi.Output<string | undefined>;
    /**
     * Defines whether the password is stored
     * encrypted in the system catalogs.  Default value is `true`.  NOTE: this value
     * is always set (to the conservative and safe value), but may interfere with the
     * behavior of
     * [PostgreSQL's `passwordEncryption` setting](https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION).
     */
    declare public readonly encryptedPassword: pulumi.Output<boolean | undefined>;
    /**
     * Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds
     */
    declare public readonly idleInTransactionSessionTimeout: pulumi.Output<number | undefined>;
    /**
     * Defines whether a role "inherits" the privileges of
     * roles it is a member of.  Default value is `true`.
     */
    declare public readonly inherit: pulumi.Output<boolean | undefined>;
    /**
     * Defines whether role is allowed to log in.  Roles without
     * this attribute are useful for managing database privileges, but are not users
     * in the usual sense of the word.  Default value is `false`.
     */
    declare public readonly login: pulumi.Output<boolean | undefined>;
    /**
     * The name of the role. Must be unique on the PostgreSQL
     * server instance where it is configured.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Sets the role's password. A password is only of use
     * for roles having the `login` attribute set to true.
     */
    declare public readonly password: pulumi.Output<string | undefined>;
    /**
     * Prevents applies from updating the role password on every
     * apply unless the value changes. This version string should be updated whenever you want to
     * change the password specified in `passwordWo`. Must be used together with `passwordWo`.
     * Conflicts with `password`.
     */
    declare public readonly passwordWoVersion: pulumi.Output<string | undefined>;
    /**
     * Defines whether a role is allowed to initiate
     * streaming replication or put the system in and out of backup mode.  Default
     * value is `false`
     */
    declare public readonly replication: pulumi.Output<boolean | undefined>;
    /**
     * Defines list of roles which will be granted to this new role.
     */
    declare public readonly roles: pulumi.Output<string[] | undefined>;
    /**
     * Alters the search path of this new role. Note that
     * due to limitations in the implementation, values cannot contain the substring
     * `", "`.
     */
    declare public readonly searchPaths: pulumi.Output<string[] | undefined>;
    /**
     * When a PostgreSQL ROLE exists in multiple
     * databases and the ROLE is dropped, the
     * [cleanup of ownership of objects](https://www.postgresql.org/docs/current/static/role-removal.html)
     * in each of the respective databases must occur before the ROLE can be dropped
     * from the catalog.  Set this option to true when there are multiple databases
     * in a PostgreSQL cluster using the same PostgreSQL ROLE for object ownership.
     * This is the third and final step taken when removing a ROLE from a database.
     */
    declare public readonly skipDropRole: pulumi.Output<boolean | undefined>;
    /**
     * When a PostgreSQL ROLE exists in multiple
     * databases and the ROLE is dropped, a
     * [`REASSIGN OWNED`](https://www.postgresql.org/docs/current/static/sql-reassign-owned.html) in
     * must be executed on each of the respective databases before the `DROP ROLE`
     * can be executed to drop the ROLE from the catalog.  This is the first and
     * second steps taken when removing a ROLE from a database (the second step being
     * an implicit
     * [`DROP OWNED`](https://www.postgresql.org/docs/current/static/sql-drop-owned.html)).
     */
    declare public readonly skipReassignOwned: pulumi.Output<boolean | undefined>;
    /**
     * Defines [`statementTimeout`](https://www.postgresql.org/docs/current/runtime-config-client.html#RUNTIME-CONFIG-CLIENT-STATEMENT) setting for this role which allows to abort any statement that takes more than the specified amount of time.
     */
    declare public readonly statementTimeout: pulumi.Output<number | undefined>;
    /**
     * Defines whether the role is a "superuser", and
     * therefore can override all access restrictions within the database.  Default
     * value is `false`.
     */
    declare public readonly superuser: pulumi.Output<boolean | undefined>;
    /**
     * Defines the date and time after which the role's
     * password is no longer valid.  Established connections past this `validTime`
     * will have to be manually terminated.  This value corresponds to a PostgreSQL
     * datetime. If omitted or the magic value `NULL` is used, `validUntil` will be
     * set to `infinity`.  Default is `NULL`, therefore `infinity`.
     */
    declare public readonly validUntil: pulumi.Output<string | undefined>;

    /**
     * Create a Role resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RoleArgs | RoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RoleState | undefined;
            resourceInputs["assumeRole"] = state?.assumeRole;
            resourceInputs["bypassRowLevelSecurity"] = state?.bypassRowLevelSecurity;
            resourceInputs["connectionLimit"] = state?.connectionLimit;
            resourceInputs["createDatabase"] = state?.createDatabase;
            resourceInputs["createRole"] = state?.createRole;
            resourceInputs["encrypted"] = state?.encrypted;
            resourceInputs["encryptedPassword"] = state?.encryptedPassword;
            resourceInputs["idleInTransactionSessionTimeout"] = state?.idleInTransactionSessionTimeout;
            resourceInputs["inherit"] = state?.inherit;
            resourceInputs["login"] = state?.login;
            resourceInputs["name"] = state?.name;
            resourceInputs["password"] = state?.password;
            resourceInputs["passwordWoVersion"] = state?.passwordWoVersion;
            resourceInputs["replication"] = state?.replication;
            resourceInputs["roles"] = state?.roles;
            resourceInputs["searchPaths"] = state?.searchPaths;
            resourceInputs["skipDropRole"] = state?.skipDropRole;
            resourceInputs["skipReassignOwned"] = state?.skipReassignOwned;
            resourceInputs["statementTimeout"] = state?.statementTimeout;
            resourceInputs["superuser"] = state?.superuser;
            resourceInputs["validUntil"] = state?.validUntil;
        } else {
            const args = argsOrState as RoleArgs | undefined;
            resourceInputs["assumeRole"] = args?.assumeRole;
            resourceInputs["bypassRowLevelSecurity"] = args?.bypassRowLevelSecurity;
            resourceInputs["connectionLimit"] = args?.connectionLimit;
            resourceInputs["createDatabase"] = args?.createDatabase;
            resourceInputs["createRole"] = args?.createRole;
            resourceInputs["encrypted"] = args?.encrypted;
            resourceInputs["encryptedPassword"] = args?.encryptedPassword;
            resourceInputs["idleInTransactionSessionTimeout"] = args?.idleInTransactionSessionTimeout;
            resourceInputs["inherit"] = args?.inherit;
            resourceInputs["login"] = args?.login;
            resourceInputs["name"] = args?.name;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["passwordWoVersion"] = args?.passwordWoVersion;
            resourceInputs["replication"] = args?.replication;
            resourceInputs["roles"] = args?.roles;
            resourceInputs["searchPaths"] = args?.searchPaths;
            resourceInputs["skipDropRole"] = args?.skipDropRole;
            resourceInputs["skipReassignOwned"] = args?.skipReassignOwned;
            resourceInputs["statementTimeout"] = args?.statementTimeout;
            resourceInputs["superuser"] = args?.superuser;
            resourceInputs["validUntil"] = args?.validUntil;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Role.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Role resources.
 */
export interface RoleState {
    /**
     * Defines the role to switch to at login via [`SET ROLE`](https://www.postgresql.org/docs/current/sql-set-role.html).
     */
    assumeRole?: pulumi.Input<string>;
    /**
     * Defines whether a role bypasses every
     * row-level security (RLS) policy.  Default value is `false`.
     */
    bypassRowLevelSecurity?: pulumi.Input<boolean>;
    /**
     * If this role can log in, this specifies how
     * many concurrent connections the role can establish. `-1` (the default) means no
     * limit.
     */
    connectionLimit?: pulumi.Input<number>;
    /**
     * Defines a role's ability to execute `CREATE
     * DATABASE`.  Default value is `false`.
     */
    createDatabase?: pulumi.Input<boolean>;
    /**
     * Defines a role's ability to execute `CREATE ROLE`.
     * A role with this privilege can also alter and drop other roles.  Default value
     * is `false`.
     */
    createRole?: pulumi.Input<boolean>;
    /**
     * @deprecated Rename PostgreSQL role resource attribute "encrypted" to "encryptedPassword"
     */
    encrypted?: pulumi.Input<string>;
    /**
     * Defines whether the password is stored
     * encrypted in the system catalogs.  Default value is `true`.  NOTE: this value
     * is always set (to the conservative and safe value), but may interfere with the
     * behavior of
     * [PostgreSQL's `passwordEncryption` setting](https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION).
     */
    encryptedPassword?: pulumi.Input<boolean>;
    /**
     * Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds
     */
    idleInTransactionSessionTimeout?: pulumi.Input<number>;
    /**
     * Defines whether a role "inherits" the privileges of
     * roles it is a member of.  Default value is `true`.
     */
    inherit?: pulumi.Input<boolean>;
    /**
     * Defines whether role is allowed to log in.  Roles without
     * this attribute are useful for managing database privileges, but are not users
     * in the usual sense of the word.  Default value is `false`.
     */
    login?: pulumi.Input<boolean>;
    /**
     * The name of the role. Must be unique on the PostgreSQL
     * server instance where it is configured.
     */
    name?: pulumi.Input<string>;
    /**
     * Sets the role's password. A password is only of use
     * for roles having the `login` attribute set to true.
     */
    password?: pulumi.Input<string>;
    /**
     * Prevents applies from updating the role password on every
     * apply unless the value changes. This version string should be updated whenever you want to
     * change the password specified in `passwordWo`. Must be used together with `passwordWo`.
     * Conflicts with `password`.
     */
    passwordWoVersion?: pulumi.Input<string>;
    /**
     * Defines whether a role is allowed to initiate
     * streaming replication or put the system in and out of backup mode.  Default
     * value is `false`
     */
    replication?: pulumi.Input<boolean>;
    /**
     * Defines list of roles which will be granted to this new role.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Alters the search path of this new role. Note that
     * due to limitations in the implementation, values cannot contain the substring
     * `", "`.
     */
    searchPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When a PostgreSQL ROLE exists in multiple
     * databases and the ROLE is dropped, the
     * [cleanup of ownership of objects](https://www.postgresql.org/docs/current/static/role-removal.html)
     * in each of the respective databases must occur before the ROLE can be dropped
     * from the catalog.  Set this option to true when there are multiple databases
     * in a PostgreSQL cluster using the same PostgreSQL ROLE for object ownership.
     * This is the third and final step taken when removing a ROLE from a database.
     */
    skipDropRole?: pulumi.Input<boolean>;
    /**
     * When a PostgreSQL ROLE exists in multiple
     * databases and the ROLE is dropped, a
     * [`REASSIGN OWNED`](https://www.postgresql.org/docs/current/static/sql-reassign-owned.html) in
     * must be executed on each of the respective databases before the `DROP ROLE`
     * can be executed to drop the ROLE from the catalog.  This is the first and
     * second steps taken when removing a ROLE from a database (the second step being
     * an implicit
     * [`DROP OWNED`](https://www.postgresql.org/docs/current/static/sql-drop-owned.html)).
     */
    skipReassignOwned?: pulumi.Input<boolean>;
    /**
     * Defines [`statementTimeout`](https://www.postgresql.org/docs/current/runtime-config-client.html#RUNTIME-CONFIG-CLIENT-STATEMENT) setting for this role which allows to abort any statement that takes more than the specified amount of time.
     */
    statementTimeout?: pulumi.Input<number>;
    /**
     * Defines whether the role is a "superuser", and
     * therefore can override all access restrictions within the database.  Default
     * value is `false`.
     */
    superuser?: pulumi.Input<boolean>;
    /**
     * Defines the date and time after which the role's
     * password is no longer valid.  Established connections past this `validTime`
     * will have to be manually terminated.  This value corresponds to a PostgreSQL
     * datetime. If omitted or the magic value `NULL` is used, `validUntil` will be
     * set to `infinity`.  Default is `NULL`, therefore `infinity`.
     */
    validUntil?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Role resource.
 */
export interface RoleArgs {
    /**
     * Defines the role to switch to at login via [`SET ROLE`](https://www.postgresql.org/docs/current/sql-set-role.html).
     */
    assumeRole?: pulumi.Input<string>;
    /**
     * Defines whether a role bypasses every
     * row-level security (RLS) policy.  Default value is `false`.
     */
    bypassRowLevelSecurity?: pulumi.Input<boolean>;
    /**
     * If this role can log in, this specifies how
     * many concurrent connections the role can establish. `-1` (the default) means no
     * limit.
     */
    connectionLimit?: pulumi.Input<number>;
    /**
     * Defines a role's ability to execute `CREATE
     * DATABASE`.  Default value is `false`.
     */
    createDatabase?: pulumi.Input<boolean>;
    /**
     * Defines a role's ability to execute `CREATE ROLE`.
     * A role with this privilege can also alter and drop other roles.  Default value
     * is `false`.
     */
    createRole?: pulumi.Input<boolean>;
    /**
     * @deprecated Rename PostgreSQL role resource attribute "encrypted" to "encryptedPassword"
     */
    encrypted?: pulumi.Input<string>;
    /**
     * Defines whether the password is stored
     * encrypted in the system catalogs.  Default value is `true`.  NOTE: this value
     * is always set (to the conservative and safe value), but may interfere with the
     * behavior of
     * [PostgreSQL's `passwordEncryption` setting](https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION).
     */
    encryptedPassword?: pulumi.Input<boolean>;
    /**
     * Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds
     */
    idleInTransactionSessionTimeout?: pulumi.Input<number>;
    /**
     * Defines whether a role "inherits" the privileges of
     * roles it is a member of.  Default value is `true`.
     */
    inherit?: pulumi.Input<boolean>;
    /**
     * Defines whether role is allowed to log in.  Roles without
     * this attribute are useful for managing database privileges, but are not users
     * in the usual sense of the word.  Default value is `false`.
     */
    login?: pulumi.Input<boolean>;
    /**
     * The name of the role. Must be unique on the PostgreSQL
     * server instance where it is configured.
     */
    name?: pulumi.Input<string>;
    /**
     * Sets the role's password. A password is only of use
     * for roles having the `login` attribute set to true.
     */
    password?: pulumi.Input<string>;
    /**
     * Prevents applies from updating the role password on every
     * apply unless the value changes. This version string should be updated whenever you want to
     * change the password specified in `passwordWo`. Must be used together with `passwordWo`.
     * Conflicts with `password`.
     */
    passwordWoVersion?: pulumi.Input<string>;
    /**
     * Defines whether a role is allowed to initiate
     * streaming replication or put the system in and out of backup mode.  Default
     * value is `false`
     */
    replication?: pulumi.Input<boolean>;
    /**
     * Defines list of roles which will be granted to this new role.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Alters the search path of this new role. Note that
     * due to limitations in the implementation, values cannot contain the substring
     * `", "`.
     */
    searchPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When a PostgreSQL ROLE exists in multiple
     * databases and the ROLE is dropped, the
     * [cleanup of ownership of objects](https://www.postgresql.org/docs/current/static/role-removal.html)
     * in each of the respective databases must occur before the ROLE can be dropped
     * from the catalog.  Set this option to true when there are multiple databases
     * in a PostgreSQL cluster using the same PostgreSQL ROLE for object ownership.
     * This is the third and final step taken when removing a ROLE from a database.
     */
    skipDropRole?: pulumi.Input<boolean>;
    /**
     * When a PostgreSQL ROLE exists in multiple
     * databases and the ROLE is dropped, a
     * [`REASSIGN OWNED`](https://www.postgresql.org/docs/current/static/sql-reassign-owned.html) in
     * must be executed on each of the respective databases before the `DROP ROLE`
     * can be executed to drop the ROLE from the catalog.  This is the first and
     * second steps taken when removing a ROLE from a database (the second step being
     * an implicit
     * [`DROP OWNED`](https://www.postgresql.org/docs/current/static/sql-drop-owned.html)).
     */
    skipReassignOwned?: pulumi.Input<boolean>;
    /**
     * Defines [`statementTimeout`](https://www.postgresql.org/docs/current/runtime-config-client.html#RUNTIME-CONFIG-CLIENT-STATEMENT) setting for this role which allows to abort any statement that takes more than the specified amount of time.
     */
    statementTimeout?: pulumi.Input<number>;
    /**
     * Defines whether the role is a "superuser", and
     * therefore can override all access restrictions within the database.  Default
     * value is `false`.
     */
    superuser?: pulumi.Input<boolean>;
    /**
     * Defines the date and time after which the role's
     * password is no longer valid.  Established connections past this `validTime`
     * will have to be manually terminated.  This value corresponds to a PostgreSQL
     * datetime. If omitted or the magic value `NULL` is used, `validUntil` will be
     * set to `infinity`.  Default is `NULL`, therefore `infinity`.
     */
    validUntil?: pulumi.Input<string>;
}
