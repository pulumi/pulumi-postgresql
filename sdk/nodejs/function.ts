// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The ``postgresql.Function`` resource creates and manages a function on a PostgreSQL
 * server.
 *
 * ## Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as postgresql from "@pulumi/postgresql";
 *
 * const increment = new postgresql.Function("increment", {
 *     name: "increment",
 *     args: [{
 *         name: "i",
 *         type: "integer",
 *     }],
 *     returns: "integer",
 *     language: "plpgsql",
 *     body: `BEGIN
 *     RETURN i + 1;
 * END;
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * It is possible to import a `postgresql_function` resource with the following
 * command:
 *
 * ```sh
 * $ pulumi import postgresql:index/function:Function function_foo "my_database.my_schema.my_function_name(arguments)"
 * ```
 * Where `my_database` is the name of the database containing the schema,
 * `my_schema` is the name of the schema in the PostgreSQL database, `my_function_name` is the function name to be imported, `arguments` is the argument signature of the function including all non OUT types and
 * `postgresql_schema.function_foo` is the name of the resource whose state will be
 * populated as a result of the command.
 */
export class Function extends pulumi.CustomResource {
    /**
     * Get an existing Function resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FunctionState, opts?: pulumi.CustomResourceOptions): Function {
        return new Function(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'postgresql:index/function:Function';

    /**
     * Returns true if the given object is an instance of Function.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Function {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Function.__pulumiType;
    }

    /**
     * List of arguments for the function.
     */
    declare public readonly args: pulumi.Output<outputs.FunctionArg[] | undefined>;
    /**
     * Function body.
     * This should be the body content within the `AS $$` and the final `$$`. It will also accept the `AS $$` and `$$` if added.
     */
    declare public readonly body: pulumi.Output<string>;
    /**
     * The database where the function is located.
     * If not specified, the function is created in the current database.
     */
    declare public readonly database: pulumi.Output<string>;
    /**
     * True to automatically drop objects that depend on the function (such as
     * operators or triggers), and in turn all objects that depend on those objects. Default is false.
     */
    declare public readonly dropCascade: pulumi.Output<boolean | undefined>;
    /**
     * The function programming language. Can be one of internal, sql, c, plpgsql. Default is plpgsql.
     */
    declare public readonly language: pulumi.Output<string | undefined>;
    /**
     * The name of the function.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Indicates if the function is parallel safe. Can be one of UNSAFE, RESTRICTED, or SAFE. Default is UNSAFE.
     */
    declare public readonly parallel: pulumi.Output<string | undefined>;
    /**
     * Type that the function returns. It can be computed from the OUT arguments. Default is void.
     */
    declare public readonly returns: pulumi.Output<string>;
    /**
     * The schema where the function is located.
     * If not specified, the function is created in the current schema.
     */
    declare public readonly schema: pulumi.Output<string>;
    /**
     * If the function should execute with the permissions of the owner, rather than the permissions of the caller. Default is false.
     */
    declare public readonly securityDefiner: pulumi.Output<boolean | undefined>;
    /**
     * If the function should always return NULL when any of the inputs is NULL. Default is false.
     */
    declare public readonly strict: pulumi.Output<boolean | undefined>;
    /**
     * Defines the volatility of the function. Can be one of VOLATILE, STABLE, or IMMUTABLE. Default is VOLATILE.
     */
    declare public readonly volatility: pulumi.Output<string | undefined>;

    /**
     * Create a Function resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FunctionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FunctionArgs | FunctionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FunctionState | undefined;
            resourceInputs["args"] = state?.args;
            resourceInputs["body"] = state?.body;
            resourceInputs["database"] = state?.database;
            resourceInputs["dropCascade"] = state?.dropCascade;
            resourceInputs["language"] = state?.language;
            resourceInputs["name"] = state?.name;
            resourceInputs["parallel"] = state?.parallel;
            resourceInputs["returns"] = state?.returns;
            resourceInputs["schema"] = state?.schema;
            resourceInputs["securityDefiner"] = state?.securityDefiner;
            resourceInputs["strict"] = state?.strict;
            resourceInputs["volatility"] = state?.volatility;
        } else {
            const args = argsOrState as FunctionArgs | undefined;
            if (args?.body === undefined && !opts.urn) {
                throw new Error("Missing required property 'body'");
            }
            resourceInputs["args"] = args?.args;
            resourceInputs["body"] = args?.body;
            resourceInputs["database"] = args?.database;
            resourceInputs["dropCascade"] = args?.dropCascade;
            resourceInputs["language"] = args?.language;
            resourceInputs["name"] = args?.name;
            resourceInputs["parallel"] = args?.parallel;
            resourceInputs["returns"] = args?.returns;
            resourceInputs["schema"] = args?.schema;
            resourceInputs["securityDefiner"] = args?.securityDefiner;
            resourceInputs["strict"] = args?.strict;
            resourceInputs["volatility"] = args?.volatility;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Function.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Function resources.
 */
export interface FunctionState {
    /**
     * List of arguments for the function.
     */
    args?: pulumi.Input<pulumi.Input<inputs.FunctionArg>[]>;
    /**
     * Function body.
     * This should be the body content within the `AS $$` and the final `$$`. It will also accept the `AS $$` and `$$` if added.
     */
    body?: pulumi.Input<string>;
    /**
     * The database where the function is located.
     * If not specified, the function is created in the current database.
     */
    database?: pulumi.Input<string>;
    /**
     * True to automatically drop objects that depend on the function (such as
     * operators or triggers), and in turn all objects that depend on those objects. Default is false.
     */
    dropCascade?: pulumi.Input<boolean>;
    /**
     * The function programming language. Can be one of internal, sql, c, plpgsql. Default is plpgsql.
     */
    language?: pulumi.Input<string>;
    /**
     * The name of the function.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates if the function is parallel safe. Can be one of UNSAFE, RESTRICTED, or SAFE. Default is UNSAFE.
     */
    parallel?: pulumi.Input<string>;
    /**
     * Type that the function returns. It can be computed from the OUT arguments. Default is void.
     */
    returns?: pulumi.Input<string>;
    /**
     * The schema where the function is located.
     * If not specified, the function is created in the current schema.
     */
    schema?: pulumi.Input<string>;
    /**
     * If the function should execute with the permissions of the owner, rather than the permissions of the caller. Default is false.
     */
    securityDefiner?: pulumi.Input<boolean>;
    /**
     * If the function should always return NULL when any of the inputs is NULL. Default is false.
     */
    strict?: pulumi.Input<boolean>;
    /**
     * Defines the volatility of the function. Can be one of VOLATILE, STABLE, or IMMUTABLE. Default is VOLATILE.
     */
    volatility?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Function resource.
 */
export interface FunctionArgs {
    /**
     * List of arguments for the function.
     */
    args?: pulumi.Input<pulumi.Input<inputs.FunctionArg>[]>;
    /**
     * Function body.
     * This should be the body content within the `AS $$` and the final `$$`. It will also accept the `AS $$` and `$$` if added.
     */
    body: pulumi.Input<string>;
    /**
     * The database where the function is located.
     * If not specified, the function is created in the current database.
     */
    database?: pulumi.Input<string>;
    /**
     * True to automatically drop objects that depend on the function (such as
     * operators or triggers), and in turn all objects that depend on those objects. Default is false.
     */
    dropCascade?: pulumi.Input<boolean>;
    /**
     * The function programming language. Can be one of internal, sql, c, plpgsql. Default is plpgsql.
     */
    language?: pulumi.Input<string>;
    /**
     * The name of the function.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates if the function is parallel safe. Can be one of UNSAFE, RESTRICTED, or SAFE. Default is UNSAFE.
     */
    parallel?: pulumi.Input<string>;
    /**
     * Type that the function returns. It can be computed from the OUT arguments. Default is void.
     */
    returns?: pulumi.Input<string>;
    /**
     * The schema where the function is located.
     * If not specified, the function is created in the current schema.
     */
    schema?: pulumi.Input<string>;
    /**
     * If the function should execute with the permissions of the owner, rather than the permissions of the caller. Default is false.
     */
    securityDefiner?: pulumi.Input<boolean>;
    /**
     * If the function should always return NULL when any of the inputs is NULL. Default is false.
     */
    strict?: pulumi.Input<boolean>;
    /**
     * Defines the volatility of the function. Can be one of VOLATILE, STABLE, or IMMUTABLE. Default is VOLATILE.
     */
    volatility?: pulumi.Input<string>;
}
