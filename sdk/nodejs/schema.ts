// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Schema extends pulumi.CustomResource {
    /**
     * Get an existing Schema resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SchemaState, opts?: pulumi.CustomResourceOptions): Schema {
        return new Schema(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'postgresql:index/schema:Schema';

    /**
     * Returns true if the given object is an instance of Schema.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Schema {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Schema.__pulumiType;
    }

    /**
     * The DATABASE in which where this schema will be created. (Default: The database used by your `provider` configuration)
     */
    declare public readonly database: pulumi.Output<string>;
    /**
     * When true, will also drop all the objects that are contained in the schema. (Default: false)
     */
    declare public readonly dropCascade: pulumi.Output<boolean | undefined>;
    /**
     * When true, use the existing schema if it exists. (Default: true)
     */
    declare public readonly ifNotExists: pulumi.Output<boolean | undefined>;
    /**
     * The name of the schema. Must be unique in the PostgreSQL
     * database instance where it is configured.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The ROLE who owns the schema.
     */
    declare public readonly owner: pulumi.Output<string>;
    /**
     * Can be specified multiple times for each policy.  Each
     * policy block supports fields documented below.
     *
     * @deprecated Use postgresql.Grant resource instead (with object_type="schema")
     */
    declare public readonly policies: pulumi.Output<outputs.SchemaPolicy[]>;

    /**
     * Create a Schema resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SchemaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SchemaArgs | SchemaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SchemaState | undefined;
            resourceInputs["database"] = state?.database;
            resourceInputs["dropCascade"] = state?.dropCascade;
            resourceInputs["ifNotExists"] = state?.ifNotExists;
            resourceInputs["name"] = state?.name;
            resourceInputs["owner"] = state?.owner;
            resourceInputs["policies"] = state?.policies;
        } else {
            const args = argsOrState as SchemaArgs | undefined;
            resourceInputs["database"] = args?.database;
            resourceInputs["dropCascade"] = args?.dropCascade;
            resourceInputs["ifNotExists"] = args?.ifNotExists;
            resourceInputs["name"] = args?.name;
            resourceInputs["owner"] = args?.owner;
            resourceInputs["policies"] = args?.policies;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Schema.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Schema resources.
 */
export interface SchemaState {
    /**
     * The DATABASE in which where this schema will be created. (Default: The database used by your `provider` configuration)
     */
    database?: pulumi.Input<string>;
    /**
     * When true, will also drop all the objects that are contained in the schema. (Default: false)
     */
    dropCascade?: pulumi.Input<boolean>;
    /**
     * When true, use the existing schema if it exists. (Default: true)
     */
    ifNotExists?: pulumi.Input<boolean>;
    /**
     * The name of the schema. Must be unique in the PostgreSQL
     * database instance where it is configured.
     */
    name?: pulumi.Input<string>;
    /**
     * The ROLE who owns the schema.
     */
    owner?: pulumi.Input<string>;
    /**
     * Can be specified multiple times for each policy.  Each
     * policy block supports fields documented below.
     *
     * @deprecated Use postgresql.Grant resource instead (with object_type="schema")
     */
    policies?: pulumi.Input<pulumi.Input<inputs.SchemaPolicy>[]>;
}

/**
 * The set of arguments for constructing a Schema resource.
 */
export interface SchemaArgs {
    /**
     * The DATABASE in which where this schema will be created. (Default: The database used by your `provider` configuration)
     */
    database?: pulumi.Input<string>;
    /**
     * When true, will also drop all the objects that are contained in the schema. (Default: false)
     */
    dropCascade?: pulumi.Input<boolean>;
    /**
     * When true, use the existing schema if it exists. (Default: true)
     */
    ifNotExists?: pulumi.Input<boolean>;
    /**
     * The name of the schema. Must be unique in the PostgreSQL
     * database instance where it is configured.
     */
    name?: pulumi.Input<string>;
    /**
     * The ROLE who owns the schema.
     */
    owner?: pulumi.Input<string>;
    /**
     * Can be specified multiple times for each policy.  Each
     * policy block supports fields documented below.
     *
     * @deprecated Use postgresql.Grant resource instead (with object_type="schema")
     */
    policies?: pulumi.Input<pulumi.Input<inputs.SchemaPolicy>[]>;
}
