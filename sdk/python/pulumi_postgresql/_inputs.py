# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'FunctionArgArgs',
    'ProviderClientcertArgs',
    'SchemaPolicyArgs',
]

@pulumi.input_type
class FunctionArgArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 default: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: The type of the argument.
        :param pulumi.Input[str] default: An expression to be used as default value if the parameter is not specified.
        :param pulumi.Input[str] mode: Can be one of IN, INOUT, OUT, or VARIADIC. Default is IN.
        :param pulumi.Input[str] name: The name of the argument.
        """
        FunctionArgArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            default=default,
            mode=mode,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: Optional[pulumi.Input[str]] = None,
             default: Optional[pulumi.Input[str]] = None,
             mode: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("type", type)
        if default is not None:
            _setter("default", default)
        if mode is not None:
            _setter("mode", mode)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of the argument.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        """
        An expression to be used as default value if the parameter is not specified.
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Can be one of IN, INOUT, OUT, or VARIADIC. Default is IN.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the argument.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ProviderClientcertArgs:
    def __init__(__self__, *,
                 cert: pulumi.Input[str],
                 key: pulumi.Input[str],
                 sslinline: Optional[pulumi.Input[bool]] = None):
        ProviderClientcertArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cert=cert,
            key=key,
            sslinline=sslinline,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cert: Optional[pulumi.Input[str]] = None,
             key: Optional[pulumi.Input[str]] = None,
             sslinline: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if cert is None:
            raise TypeError("Missing 'cert' argument")
        if key is None:
            raise TypeError("Missing 'key' argument")

        _setter("cert", cert)
        _setter("key", key)
        if sslinline is not None:
            _setter("sslinline", sslinline)

    @property
    @pulumi.getter
    def cert(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: pulumi.Input[str]):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def sslinline(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sslinline")

    @sslinline.setter
    def sslinline(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sslinline", value)


@pulumi.input_type
class SchemaPolicyArgs:
    def __init__(__self__, *,
                 create: Optional[pulumi.Input[bool]] = None,
                 create_with_grant: Optional[pulumi.Input[bool]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 usage: Optional[pulumi.Input[bool]] = None,
                 usage_with_grant: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] create: Should the specified ROLE have CREATE privileges to the specified SCHEMA.
        :param pulumi.Input[bool] create_with_grant: Should the specified ROLE have CREATE privileges to the specified SCHEMA and the ability to GRANT the CREATE privilege to other ROLEs.
        :param pulumi.Input[str] role: The ROLE who is receiving the policy.  If this value is empty or not specified it implies the policy is referring to the [`PUBLIC` role](https://www.postgresql.org/docs/current/static/sql-grant.html).
        :param pulumi.Input[bool] usage: Should the specified ROLE have USAGE privileges to the specified SCHEMA.
        :param pulumi.Input[bool] usage_with_grant: Should the specified ROLE have USAGE privileges to the specified SCHEMA and the ability to GRANT the USAGE privilege to other ROLEs.
               
               > **NOTE on `policy`:** The permissions of a role specified in multiple policy blocks is cumulative.  For example, if the same role is specified in two different `policy` each with different permissions (e.g. `create` and `usage_with_grant`, respectively), then the specified role with have both `create` and `usage_with_grant` privileges.
        """
        SchemaPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            create=create,
            create_with_grant=create_with_grant,
            role=role,
            usage=usage,
            usage_with_grant=usage_with_grant,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             create: Optional[pulumi.Input[bool]] = None,
             create_with_grant: Optional[pulumi.Input[bool]] = None,
             role: Optional[pulumi.Input[str]] = None,
             usage: Optional[pulumi.Input[bool]] = None,
             usage_with_grant: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if create_with_grant is None and 'createWithGrant' in kwargs:
            create_with_grant = kwargs['createWithGrant']
        if usage_with_grant is None and 'usageWithGrant' in kwargs:
            usage_with_grant = kwargs['usageWithGrant']

        if create is not None:
            _setter("create", create)
        if create_with_grant is not None:
            _setter("create_with_grant", create_with_grant)
        if role is not None:
            _setter("role", role)
        if usage is not None:
            _setter("usage", usage)
        if usage_with_grant is not None:
            _setter("usage_with_grant", usage_with_grant)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[bool]]:
        """
        Should the specified ROLE have CREATE privileges to the specified SCHEMA.
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter(name="createWithGrant")
    def create_with_grant(self) -> Optional[pulumi.Input[bool]]:
        """
        Should the specified ROLE have CREATE privileges to the specified SCHEMA and the ability to GRANT the CREATE privilege to other ROLEs.
        """
        return pulumi.get(self, "create_with_grant")

    @create_with_grant.setter
    def create_with_grant(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_with_grant", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        The ROLE who is receiving the policy.  If this value is empty or not specified it implies the policy is referring to the [`PUBLIC` role](https://www.postgresql.org/docs/current/static/sql-grant.html).
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input[bool]]:
        """
        Should the specified ROLE have USAGE privileges to the specified SCHEMA.
        """
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "usage", value)

    @property
    @pulumi.getter(name="usageWithGrant")
    def usage_with_grant(self) -> Optional[pulumi.Input[bool]]:
        """
        Should the specified ROLE have USAGE privileges to the specified SCHEMA and the ability to GRANT the USAGE privilege to other ROLEs.

        > **NOTE on `policy`:** The permissions of a role specified in multiple policy blocks is cumulative.  For example, if the same role is specified in two different `policy` each with different permissions (e.g. `create` and `usage_with_grant`, respectively), then the specified role with have both `create` and `usage_with_grant` privileges.
        """
        return pulumi.get(self, "usage_with_grant")

    @usage_with_grant.setter
    def usage_with_grant(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "usage_with_grant", value)


