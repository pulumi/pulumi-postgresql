// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.postgresql;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class SecurityLabelArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityLabelArgs Empty = new SecurityLabelArgs();

    /**
     * The value of the security label.
     * 
     */
    @Import(name="label", required=true)
    private Output<String> label;

    /**
     * @return The value of the security label.
     * 
     */
    public Output<String> label() {
        return this.label;
    }

    /**
     * The name of the provider with which this label is to be associated.
     * 
     */
    @Import(name="labelProvider", required=true)
    private Output<String> labelProvider;

    /**
     * @return The name of the provider with which this label is to be associated.
     * 
     */
    public Output<String> labelProvider() {
        return this.labelProvider;
    }

    /**
     * The name of the object to be labeled. Names of objects that reside in schemas (tables, functions, etc.) can be schema-qualified.
     * 
     */
    @Import(name="objectName", required=true)
    private Output<String> objectName;

    /**
     * @return The name of the object to be labeled. Names of objects that reside in schemas (tables, functions, etc.) can be schema-qualified.
     * 
     */
    public Output<String> objectName() {
        return this.objectName;
    }

    /**
     * The PostgreSQL object type to apply this security label to.
     * 
     */
    @Import(name="objectType", required=true)
    private Output<String> objectType;

    /**
     * @return The PostgreSQL object type to apply this security label to.
     * 
     */
    public Output<String> objectType() {
        return this.objectType;
    }

    private SecurityLabelArgs() {}

    private SecurityLabelArgs(SecurityLabelArgs $) {
        this.label = $.label;
        this.labelProvider = $.labelProvider;
        this.objectName = $.objectName;
        this.objectType = $.objectType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityLabelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityLabelArgs $;

        public Builder() {
            $ = new SecurityLabelArgs();
        }

        public Builder(SecurityLabelArgs defaults) {
            $ = new SecurityLabelArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param label The value of the security label.
         * 
         * @return builder
         * 
         */
        public Builder label(Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label The value of the security label.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param labelProvider The name of the provider with which this label is to be associated.
         * 
         * @return builder
         * 
         */
        public Builder labelProvider(Output<String> labelProvider) {
            $.labelProvider = labelProvider;
            return this;
        }

        /**
         * @param labelProvider The name of the provider with which this label is to be associated.
         * 
         * @return builder
         * 
         */
        public Builder labelProvider(String labelProvider) {
            return labelProvider(Output.of(labelProvider));
        }

        /**
         * @param objectName The name of the object to be labeled. Names of objects that reside in schemas (tables, functions, etc.) can be schema-qualified.
         * 
         * @return builder
         * 
         */
        public Builder objectName(Output<String> objectName) {
            $.objectName = objectName;
            return this;
        }

        /**
         * @param objectName The name of the object to be labeled. Names of objects that reside in schemas (tables, functions, etc.) can be schema-qualified.
         * 
         * @return builder
         * 
         */
        public Builder objectName(String objectName) {
            return objectName(Output.of(objectName));
        }

        /**
         * @param objectType The PostgreSQL object type to apply this security label to.
         * 
         * @return builder
         * 
         */
        public Builder objectType(Output<String> objectType) {
            $.objectType = objectType;
            return this;
        }

        /**
         * @param objectType The PostgreSQL object type to apply this security label to.
         * 
         * @return builder
         * 
         */
        public Builder objectType(String objectType) {
            return objectType(Output.of(objectType));
        }

        public SecurityLabelArgs build() {
            if ($.label == null) {
                throw new MissingRequiredPropertyException("SecurityLabelArgs", "label");
            }
            if ($.labelProvider == null) {
                throw new MissingRequiredPropertyException("SecurityLabelArgs", "labelProvider");
            }
            if ($.objectName == null) {
                throw new MissingRequiredPropertyException("SecurityLabelArgs", "objectName");
            }
            if ($.objectType == null) {
                throw new MissingRequiredPropertyException("SecurityLabelArgs", "objectType");
            }
            return $;
        }
    }

}
