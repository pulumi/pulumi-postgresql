// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.postgresql;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.postgresql.GrantArgs;
import com.pulumi.postgresql.Utilities;
import com.pulumi.postgresql.inputs.GrantState;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The ``postgresql.Grant`` resource creates and manages privileges given to a user for a database schema.
 * 
 * See [PostgreSQL documentation](https://www.postgresql.org/docs/current/sql-grant.html)
 * 
 * &gt; **Note:** This resource needs Postgresql version 9 or above.
 * **Note:** Using column &amp; table grants on the _same_ table with the _same_ privileges can lead to unexpected behaviours.
 * 
 * ## Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.postgresql.Grant;
 * import com.pulumi.postgresql.GrantArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Grant SELECT privileges on 2 tables
 *         var readonlyTables = new Grant("readonlyTables", GrantArgs.builder()
 *             .database("test_db")
 *             .role("test_role")
 *             .schema("public")
 *             .objectType("table")
 *             .objects(            
 *                 "table1",
 *                 "table2")
 *             .privileges("SELECT")
 *             .build());
 * 
 *         // Grant SELECT & INSERT privileges on 2 columns in 1 table
 *         var readInsertColumn = new Grant("readInsertColumn", GrantArgs.builder()
 *             .database("test_db")
 *             .role("test_role")
 *             .schema("public")
 *             .objectType("column")
 *             .objects("table1")
 *             .columns(            
 *                 "col1",
 *                 "col2")
 *             .privileges(            
 *                 "UPDATE",
 *                 "INSERT")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Examples
 * 
 * Revoke default accesses for public schema:
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.postgresql.Grant;
 * import com.pulumi.postgresql.GrantArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var revokePublic = new Grant("revokePublic", GrantArgs.builder()
 *             .database("test_db")
 *             .role("public")
 *             .schema("public")
 *             .objectType("schema")
 *             .privileges()
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="postgresql:index/grant:Grant")
public class Grant extends com.pulumi.resources.CustomResource {
    /**
     * The columns upon which to grant the privileges. Required when `object_type` is `column`. You cannot specify this option if the `object_type` is not `column`.
     * 
     */
    @Export(name="columns", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> columns;

    /**
     * @return The columns upon which to grant the privileges. Required when `object_type` is `column`. You cannot specify this option if the `object_type` is not `column`.
     * 
     */
    public Output<Optional<List<String>>> columns() {
        return Codegen.optional(this.columns);
    }
    /**
     * The database to grant privileges on for this role.
     * 
     */
    @Export(name="database", refs={String.class}, tree="[0]")
    private Output<String> database;

    /**
     * @return The database to grant privileges on for this role.
     * 
     */
    public Output<String> database() {
        return this.database;
    }
    /**
     * The PostgreSQL object type to grant the privileges on (one of: database, schema, table, sequence, function, procedure, routine, foreign_data_wrapper, foreign_server, column).
     * 
     */
    @Export(name="objectType", refs={String.class}, tree="[0]")
    private Output<String> objectType;

    /**
     * @return The PostgreSQL object type to grant the privileges on (one of: database, schema, table, sequence, function, procedure, routine, foreign_data_wrapper, foreign_server, column).
     * 
     */
    public Output<String> objectType() {
        return this.objectType;
    }
    /**
     * The objects upon which to grant the privileges. An empty list (the default) means to grant permissions on *all* objects of the specified type. You cannot specify this option if the `object_type` is `database` or `schema`. When `object_type` is `column`, only one value is allowed.
     * 
     */
    @Export(name="objects", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> objects;

    /**
     * @return The objects upon which to grant the privileges. An empty list (the default) means to grant permissions on *all* objects of the specified type. You cannot specify this option if the `object_type` is `database` or `schema`. When `object_type` is `column`, only one value is allowed.
     * 
     */
    public Output<Optional<List<String>>> objects() {
        return Codegen.optional(this.objects);
    }
    /**
     * The list of privileges to grant. There are different kinds of privileges: SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER, CREATE, CONNECT, TEMPORARY, EXECUTE, and USAGE. An empty list could be provided to revoke all privileges for this role.
     * 
     */
    @Export(name="privileges", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> privileges;

    /**
     * @return The list of privileges to grant. There are different kinds of privileges: SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER, CREATE, CONNECT, TEMPORARY, EXECUTE, and USAGE. An empty list could be provided to revoke all privileges for this role.
     * 
     */
    public Output<List<String>> privileges() {
        return this.privileges;
    }
    /**
     * The name of the role to grant privileges on, Set it to &#34;public&#34; for all roles.
     * 
     */
    @Export(name="role", refs={String.class}, tree="[0]")
    private Output<String> role;

    /**
     * @return The name of the role to grant privileges on, Set it to &#34;public&#34; for all roles.
     * 
     */
    public Output<String> role() {
        return this.role;
    }
    /**
     * The database schema to grant privileges on for this role (Required except if object_type is &#34;database&#34;)
     * 
     */
    @Export(name="schema", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> schema;

    /**
     * @return The database schema to grant privileges on for this role (Required except if object_type is &#34;database&#34;)
     * 
     */
    public Output<Optional<String>> schema() {
        return Codegen.optional(this.schema);
    }
    /**
     * Whether the recipient of these privileges can grant the same privileges to others. Defaults to false.
     * 
     */
    @Export(name="withGrantOption", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> withGrantOption;

    /**
     * @return Whether the recipient of these privileges can grant the same privileges to others. Defaults to false.
     * 
     */
    public Output<Optional<Boolean>> withGrantOption() {
        return Codegen.optional(this.withGrantOption);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Grant(java.lang.String name) {
        this(name, GrantArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Grant(java.lang.String name, GrantArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Grant(java.lang.String name, GrantArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("postgresql:index/grant:Grant", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Grant(java.lang.String name, Output<java.lang.String> id, @Nullable GrantState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("postgresql:index/grant:Grant", name, state, makeResourceOptions(options, id), false);
    }

    private static GrantArgs makeArgs(GrantArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? GrantArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Grant get(java.lang.String name, Output<java.lang.String> id, @Nullable GrantState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Grant(name, id, state, options);
    }
}
