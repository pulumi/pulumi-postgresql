// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.postgresql;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RoleArgs extends com.pulumi.resources.ResourceArgs {

    public static final RoleArgs Empty = new RoleArgs();

    /**
     * Defines the role to switch to at login via [`SET ROLE`](https://www.postgresql.org/docs/current/sql-set-role.html).
     * 
     */
    @Import(name="assumeRole")
    private @Nullable Output<String> assumeRole;

    /**
     * @return Defines the role to switch to at login via [`SET ROLE`](https://www.postgresql.org/docs/current/sql-set-role.html).
     * 
     */
    public Optional<Output<String>> assumeRole() {
        return Optional.ofNullable(this.assumeRole);
    }

    /**
     * Defines whether a role bypasses every
     * row-level security (RLS) policy.  Default value is `false`.
     * 
     */
    @Import(name="bypassRowLevelSecurity")
    private @Nullable Output<Boolean> bypassRowLevelSecurity;

    /**
     * @return Defines whether a role bypasses every
     * row-level security (RLS) policy.  Default value is `false`.
     * 
     */
    public Optional<Output<Boolean>> bypassRowLevelSecurity() {
        return Optional.ofNullable(this.bypassRowLevelSecurity);
    }

    /**
     * If this role can log in, this specifies how
     * many concurrent connections the role can establish. `-1` (the default) means no
     * limit.
     * 
     */
    @Import(name="connectionLimit")
    private @Nullable Output<Integer> connectionLimit;

    /**
     * @return If this role can log in, this specifies how
     * many concurrent connections the role can establish. `-1` (the default) means no
     * limit.
     * 
     */
    public Optional<Output<Integer>> connectionLimit() {
        return Optional.ofNullable(this.connectionLimit);
    }

    /**
     * Defines a role&#39;s ability to execute `CREATE
     * DATABASE`.  Default value is `false`.
     * 
     */
    @Import(name="createDatabase")
    private @Nullable Output<Boolean> createDatabase;

    /**
     * @return Defines a role&#39;s ability to execute `CREATE
     * DATABASE`.  Default value is `false`.
     * 
     */
    public Optional<Output<Boolean>> createDatabase() {
        return Optional.ofNullable(this.createDatabase);
    }

    /**
     * Defines a role&#39;s ability to execute `CREATE ROLE`.
     * A role with this privilege can also alter and drop other roles.  Default value
     * is `false`.
     * 
     */
    @Import(name="createRole")
    private @Nullable Output<Boolean> createRole;

    /**
     * @return Defines a role&#39;s ability to execute `CREATE ROLE`.
     * A role with this privilege can also alter and drop other roles.  Default value
     * is `false`.
     * 
     */
    public Optional<Output<Boolean>> createRole() {
        return Optional.ofNullable(this.createRole);
    }

    /**
     * @deprecated
     * Rename PostgreSQL role resource attribute &#34;encrypted&#34; to &#34;encryptedPassword&#34;
     * 
     */
    @Deprecated /* Rename PostgreSQL role resource attribute ""encrypted"" to ""encryptedPassword"" */
    @Import(name="encrypted")
    private @Nullable Output<String> encrypted;

    /**
     * @deprecated
     * Rename PostgreSQL role resource attribute &#34;encrypted&#34; to &#34;encryptedPassword&#34;
     * 
     */
    @Deprecated /* Rename PostgreSQL role resource attribute ""encrypted"" to ""encryptedPassword"" */
    public Optional<Output<String>> encrypted() {
        return Optional.ofNullable(this.encrypted);
    }

    /**
     * Defines whether the password is stored
     * encrypted in the system catalogs.  Default value is `true`.  NOTE: this value
     * is always set (to the conservative and safe value), but may interfere with the
     * behavior of
     * [PostgreSQL&#39;s `passwordEncryption` setting](https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION).
     * 
     */
    @Import(name="encryptedPassword")
    private @Nullable Output<Boolean> encryptedPassword;

    /**
     * @return Defines whether the password is stored
     * encrypted in the system catalogs.  Default value is `true`.  NOTE: this value
     * is always set (to the conservative and safe value), but may interfere with the
     * behavior of
     * [PostgreSQL&#39;s `passwordEncryption` setting](https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION).
     * 
     */
    public Optional<Output<Boolean>> encryptedPassword() {
        return Optional.ofNullable(this.encryptedPassword);
    }

    /**
     * Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds
     * 
     */
    @Import(name="idleInTransactionSessionTimeout")
    private @Nullable Output<Integer> idleInTransactionSessionTimeout;

    /**
     * @return Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds
     * 
     */
    public Optional<Output<Integer>> idleInTransactionSessionTimeout() {
        return Optional.ofNullable(this.idleInTransactionSessionTimeout);
    }

    /**
     * Defines whether a role &#34;inherits&#34; the privileges of
     * roles it is a member of.  Default value is `true`.
     * 
     */
    @Import(name="inherit")
    private @Nullable Output<Boolean> inherit;

    /**
     * @return Defines whether a role &#34;inherits&#34; the privileges of
     * roles it is a member of.  Default value is `true`.
     * 
     */
    public Optional<Output<Boolean>> inherit() {
        return Optional.ofNullable(this.inherit);
    }

    /**
     * Defines whether role is allowed to log in.  Roles without
     * this attribute are useful for managing database privileges, but are not users
     * in the usual sense of the word.  Default value is `false`.
     * 
     */
    @Import(name="login")
    private @Nullable Output<Boolean> login;

    /**
     * @return Defines whether role is allowed to log in.  Roles without
     * this attribute are useful for managing database privileges, but are not users
     * in the usual sense of the word.  Default value is `false`.
     * 
     */
    public Optional<Output<Boolean>> login() {
        return Optional.ofNullable(this.login);
    }

    /**
     * The name of the role. Must be unique on the PostgreSQL
     * server instance where it is configured.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the role. Must be unique on the PostgreSQL
     * server instance where it is configured.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Sets the role&#39;s password. A password is only of use
     * for roles having the `login` attribute set to true.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Sets the role&#39;s password. A password is only of use
     * for roles having the `login` attribute set to true.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Prevents applies from updating the role password on every
     * apply unless the value changes. This version string should be updated whenever you want to
     * change the password specified in `passwordWo`. Must be used together with `passwordWo`.
     * Conflicts with `password`.
     * 
     */
    @Import(name="passwordWoVersion")
    private @Nullable Output<String> passwordWoVersion;

    /**
     * @return Prevents applies from updating the role password on every
     * apply unless the value changes. This version string should be updated whenever you want to
     * change the password specified in `passwordWo`. Must be used together with `passwordWo`.
     * Conflicts with `password`.
     * 
     */
    public Optional<Output<String>> passwordWoVersion() {
        return Optional.ofNullable(this.passwordWoVersion);
    }

    /**
     * Defines whether a role is allowed to initiate
     * streaming replication or put the system in and out of backup mode.  Default
     * value is `false`
     * 
     */
    @Import(name="replication")
    private @Nullable Output<Boolean> replication;

    /**
     * @return Defines whether a role is allowed to initiate
     * streaming replication or put the system in and out of backup mode.  Default
     * value is `false`
     * 
     */
    public Optional<Output<Boolean>> replication() {
        return Optional.ofNullable(this.replication);
    }

    /**
     * Defines list of roles which will be granted to this new role.
     * 
     */
    @Import(name="roles")
    private @Nullable Output<List<String>> roles;

    /**
     * @return Defines list of roles which will be granted to this new role.
     * 
     */
    public Optional<Output<List<String>>> roles() {
        return Optional.ofNullable(this.roles);
    }

    /**
     * Alters the search path of this new role. Note that
     * due to limitations in the implementation, values cannot contain the substring
     * `&#34;, &#34;`.
     * 
     */
    @Import(name="searchPaths")
    private @Nullable Output<List<String>> searchPaths;

    /**
     * @return Alters the search path of this new role. Note that
     * due to limitations in the implementation, values cannot contain the substring
     * `&#34;, &#34;`.
     * 
     */
    public Optional<Output<List<String>>> searchPaths() {
        return Optional.ofNullable(this.searchPaths);
    }

    /**
     * When a PostgreSQL ROLE exists in multiple
     * databases and the ROLE is dropped, the
     * [cleanup of ownership of objects](https://www.postgresql.org/docs/current/static/role-removal.html)
     * in each of the respective databases must occur before the ROLE can be dropped
     * from the catalog.  Set this option to true when there are multiple databases
     * in a PostgreSQL cluster using the same PostgreSQL ROLE for object ownership.
     * This is the third and final step taken when removing a ROLE from a database.
     * 
     */
    @Import(name="skipDropRole")
    private @Nullable Output<Boolean> skipDropRole;

    /**
     * @return When a PostgreSQL ROLE exists in multiple
     * databases and the ROLE is dropped, the
     * [cleanup of ownership of objects](https://www.postgresql.org/docs/current/static/role-removal.html)
     * in each of the respective databases must occur before the ROLE can be dropped
     * from the catalog.  Set this option to true when there are multiple databases
     * in a PostgreSQL cluster using the same PostgreSQL ROLE for object ownership.
     * This is the third and final step taken when removing a ROLE from a database.
     * 
     */
    public Optional<Output<Boolean>> skipDropRole() {
        return Optional.ofNullable(this.skipDropRole);
    }

    /**
     * When a PostgreSQL ROLE exists in multiple
     * databases and the ROLE is dropped, a
     * [`REASSIGN OWNED`](https://www.postgresql.org/docs/current/static/sql-reassign-owned.html) in
     * must be executed on each of the respective databases before the `DROP ROLE`
     * can be executed to drop the ROLE from the catalog.  This is the first and
     * second steps taken when removing a ROLE from a database (the second step being
     * an implicit
     * [`DROP OWNED`](https://www.postgresql.org/docs/current/static/sql-drop-owned.html)).
     * 
     */
    @Import(name="skipReassignOwned")
    private @Nullable Output<Boolean> skipReassignOwned;

    /**
     * @return When a PostgreSQL ROLE exists in multiple
     * databases and the ROLE is dropped, a
     * [`REASSIGN OWNED`](https://www.postgresql.org/docs/current/static/sql-reassign-owned.html) in
     * must be executed on each of the respective databases before the `DROP ROLE`
     * can be executed to drop the ROLE from the catalog.  This is the first and
     * second steps taken when removing a ROLE from a database (the second step being
     * an implicit
     * [`DROP OWNED`](https://www.postgresql.org/docs/current/static/sql-drop-owned.html)).
     * 
     */
    public Optional<Output<Boolean>> skipReassignOwned() {
        return Optional.ofNullable(this.skipReassignOwned);
    }

    /**
     * Defines [`statementTimeout`](https://www.postgresql.org/docs/current/runtime-config-client.html#RUNTIME-CONFIG-CLIENT-STATEMENT) setting for this role which allows to abort any statement that takes more than the specified amount of time.
     * 
     */
    @Import(name="statementTimeout")
    private @Nullable Output<Integer> statementTimeout;

    /**
     * @return Defines [`statementTimeout`](https://www.postgresql.org/docs/current/runtime-config-client.html#RUNTIME-CONFIG-CLIENT-STATEMENT) setting for this role which allows to abort any statement that takes more than the specified amount of time.
     * 
     */
    public Optional<Output<Integer>> statementTimeout() {
        return Optional.ofNullable(this.statementTimeout);
    }

    /**
     * Defines whether the role is a &#34;superuser&#34;, and
     * therefore can override all access restrictions within the database.  Default
     * value is `false`.
     * 
     */
    @Import(name="superuser")
    private @Nullable Output<Boolean> superuser;

    /**
     * @return Defines whether the role is a &#34;superuser&#34;, and
     * therefore can override all access restrictions within the database.  Default
     * value is `false`.
     * 
     */
    public Optional<Output<Boolean>> superuser() {
        return Optional.ofNullable(this.superuser);
    }

    /**
     * Defines the date and time after which the role&#39;s
     * password is no longer valid.  Established connections past this `validTime`
     * will have to be manually terminated.  This value corresponds to a PostgreSQL
     * datetime. If omitted or the magic value `NULL` is used, `validUntil` will be
     * set to `infinity`.  Default is `NULL`, therefore `infinity`.
     * 
     */
    @Import(name="validUntil")
    private @Nullable Output<String> validUntil;

    /**
     * @return Defines the date and time after which the role&#39;s
     * password is no longer valid.  Established connections past this `validTime`
     * will have to be manually terminated.  This value corresponds to a PostgreSQL
     * datetime. If omitted or the magic value `NULL` is used, `validUntil` will be
     * set to `infinity`.  Default is `NULL`, therefore `infinity`.
     * 
     */
    public Optional<Output<String>> validUntil() {
        return Optional.ofNullable(this.validUntil);
    }

    private RoleArgs() {}

    private RoleArgs(RoleArgs $) {
        this.assumeRole = $.assumeRole;
        this.bypassRowLevelSecurity = $.bypassRowLevelSecurity;
        this.connectionLimit = $.connectionLimit;
        this.createDatabase = $.createDatabase;
        this.createRole = $.createRole;
        this.encrypted = $.encrypted;
        this.encryptedPassword = $.encryptedPassword;
        this.idleInTransactionSessionTimeout = $.idleInTransactionSessionTimeout;
        this.inherit = $.inherit;
        this.login = $.login;
        this.name = $.name;
        this.password = $.password;
        this.passwordWoVersion = $.passwordWoVersion;
        this.replication = $.replication;
        this.roles = $.roles;
        this.searchPaths = $.searchPaths;
        this.skipDropRole = $.skipDropRole;
        this.skipReassignOwned = $.skipReassignOwned;
        this.statementTimeout = $.statementTimeout;
        this.superuser = $.superuser;
        this.validUntil = $.validUntil;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RoleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RoleArgs $;

        public Builder() {
            $ = new RoleArgs();
        }

        public Builder(RoleArgs defaults) {
            $ = new RoleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param assumeRole Defines the role to switch to at login via [`SET ROLE`](https://www.postgresql.org/docs/current/sql-set-role.html).
         * 
         * @return builder
         * 
         */
        public Builder assumeRole(@Nullable Output<String> assumeRole) {
            $.assumeRole = assumeRole;
            return this;
        }

        /**
         * @param assumeRole Defines the role to switch to at login via [`SET ROLE`](https://www.postgresql.org/docs/current/sql-set-role.html).
         * 
         * @return builder
         * 
         */
        public Builder assumeRole(String assumeRole) {
            return assumeRole(Output.of(assumeRole));
        }

        /**
         * @param bypassRowLevelSecurity Defines whether a role bypasses every
         * row-level security (RLS) policy.  Default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder bypassRowLevelSecurity(@Nullable Output<Boolean> bypassRowLevelSecurity) {
            $.bypassRowLevelSecurity = bypassRowLevelSecurity;
            return this;
        }

        /**
         * @param bypassRowLevelSecurity Defines whether a role bypasses every
         * row-level security (RLS) policy.  Default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder bypassRowLevelSecurity(Boolean bypassRowLevelSecurity) {
            return bypassRowLevelSecurity(Output.of(bypassRowLevelSecurity));
        }

        /**
         * @param connectionLimit If this role can log in, this specifies how
         * many concurrent connections the role can establish. `-1` (the default) means no
         * limit.
         * 
         * @return builder
         * 
         */
        public Builder connectionLimit(@Nullable Output<Integer> connectionLimit) {
            $.connectionLimit = connectionLimit;
            return this;
        }

        /**
         * @param connectionLimit If this role can log in, this specifies how
         * many concurrent connections the role can establish. `-1` (the default) means no
         * limit.
         * 
         * @return builder
         * 
         */
        public Builder connectionLimit(Integer connectionLimit) {
            return connectionLimit(Output.of(connectionLimit));
        }

        /**
         * @param createDatabase Defines a role&#39;s ability to execute `CREATE
         * DATABASE`.  Default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder createDatabase(@Nullable Output<Boolean> createDatabase) {
            $.createDatabase = createDatabase;
            return this;
        }

        /**
         * @param createDatabase Defines a role&#39;s ability to execute `CREATE
         * DATABASE`.  Default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder createDatabase(Boolean createDatabase) {
            return createDatabase(Output.of(createDatabase));
        }

        /**
         * @param createRole Defines a role&#39;s ability to execute `CREATE ROLE`.
         * A role with this privilege can also alter and drop other roles.  Default value
         * is `false`.
         * 
         * @return builder
         * 
         */
        public Builder createRole(@Nullable Output<Boolean> createRole) {
            $.createRole = createRole;
            return this;
        }

        /**
         * @param createRole Defines a role&#39;s ability to execute `CREATE ROLE`.
         * A role with this privilege can also alter and drop other roles.  Default value
         * is `false`.
         * 
         * @return builder
         * 
         */
        public Builder createRole(Boolean createRole) {
            return createRole(Output.of(createRole));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Rename PostgreSQL role resource attribute &#34;encrypted&#34; to &#34;encryptedPassword&#34;
         * 
         */
        @Deprecated /* Rename PostgreSQL role resource attribute ""encrypted"" to ""encryptedPassword"" */
        public Builder encrypted(@Nullable Output<String> encrypted) {
            $.encrypted = encrypted;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Rename PostgreSQL role resource attribute &#34;encrypted&#34; to &#34;encryptedPassword&#34;
         * 
         */
        @Deprecated /* Rename PostgreSQL role resource attribute ""encrypted"" to ""encryptedPassword"" */
        public Builder encrypted(String encrypted) {
            return encrypted(Output.of(encrypted));
        }

        /**
         * @param encryptedPassword Defines whether the password is stored
         * encrypted in the system catalogs.  Default value is `true`.  NOTE: this value
         * is always set (to the conservative and safe value), but may interfere with the
         * behavior of
         * [PostgreSQL&#39;s `passwordEncryption` setting](https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION).
         * 
         * @return builder
         * 
         */
        public Builder encryptedPassword(@Nullable Output<Boolean> encryptedPassword) {
            $.encryptedPassword = encryptedPassword;
            return this;
        }

        /**
         * @param encryptedPassword Defines whether the password is stored
         * encrypted in the system catalogs.  Default value is `true`.  NOTE: this value
         * is always set (to the conservative and safe value), but may interfere with the
         * behavior of
         * [PostgreSQL&#39;s `passwordEncryption` setting](https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION).
         * 
         * @return builder
         * 
         */
        public Builder encryptedPassword(Boolean encryptedPassword) {
            return encryptedPassword(Output.of(encryptedPassword));
        }

        /**
         * @param idleInTransactionSessionTimeout Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds
         * 
         * @return builder
         * 
         */
        public Builder idleInTransactionSessionTimeout(@Nullable Output<Integer> idleInTransactionSessionTimeout) {
            $.idleInTransactionSessionTimeout = idleInTransactionSessionTimeout;
            return this;
        }

        /**
         * @param idleInTransactionSessionTimeout Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds
         * 
         * @return builder
         * 
         */
        public Builder idleInTransactionSessionTimeout(Integer idleInTransactionSessionTimeout) {
            return idleInTransactionSessionTimeout(Output.of(idleInTransactionSessionTimeout));
        }

        /**
         * @param inherit Defines whether a role &#34;inherits&#34; the privileges of
         * roles it is a member of.  Default value is `true`.
         * 
         * @return builder
         * 
         */
        public Builder inherit(@Nullable Output<Boolean> inherit) {
            $.inherit = inherit;
            return this;
        }

        /**
         * @param inherit Defines whether a role &#34;inherits&#34; the privileges of
         * roles it is a member of.  Default value is `true`.
         * 
         * @return builder
         * 
         */
        public Builder inherit(Boolean inherit) {
            return inherit(Output.of(inherit));
        }

        /**
         * @param login Defines whether role is allowed to log in.  Roles without
         * this attribute are useful for managing database privileges, but are not users
         * in the usual sense of the word.  Default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder login(@Nullable Output<Boolean> login) {
            $.login = login;
            return this;
        }

        /**
         * @param login Defines whether role is allowed to log in.  Roles without
         * this attribute are useful for managing database privileges, but are not users
         * in the usual sense of the word.  Default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder login(Boolean login) {
            return login(Output.of(login));
        }

        /**
         * @param name The name of the role. Must be unique on the PostgreSQL
         * server instance where it is configured.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the role. Must be unique on the PostgreSQL
         * server instance where it is configured.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param password Sets the role&#39;s password. A password is only of use
         * for roles having the `login` attribute set to true.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Sets the role&#39;s password. A password is only of use
         * for roles having the `login` attribute set to true.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param passwordWoVersion Prevents applies from updating the role password on every
         * apply unless the value changes. This version string should be updated whenever you want to
         * change the password specified in `passwordWo`. Must be used together with `passwordWo`.
         * Conflicts with `password`.
         * 
         * @return builder
         * 
         */
        public Builder passwordWoVersion(@Nullable Output<String> passwordWoVersion) {
            $.passwordWoVersion = passwordWoVersion;
            return this;
        }

        /**
         * @param passwordWoVersion Prevents applies from updating the role password on every
         * apply unless the value changes. This version string should be updated whenever you want to
         * change the password specified in `passwordWo`. Must be used together with `passwordWo`.
         * Conflicts with `password`.
         * 
         * @return builder
         * 
         */
        public Builder passwordWoVersion(String passwordWoVersion) {
            return passwordWoVersion(Output.of(passwordWoVersion));
        }

        /**
         * @param replication Defines whether a role is allowed to initiate
         * streaming replication or put the system in and out of backup mode.  Default
         * value is `false`
         * 
         * @return builder
         * 
         */
        public Builder replication(@Nullable Output<Boolean> replication) {
            $.replication = replication;
            return this;
        }

        /**
         * @param replication Defines whether a role is allowed to initiate
         * streaming replication or put the system in and out of backup mode.  Default
         * value is `false`
         * 
         * @return builder
         * 
         */
        public Builder replication(Boolean replication) {
            return replication(Output.of(replication));
        }

        /**
         * @param roles Defines list of roles which will be granted to this new role.
         * 
         * @return builder
         * 
         */
        public Builder roles(@Nullable Output<List<String>> roles) {
            $.roles = roles;
            return this;
        }

        /**
         * @param roles Defines list of roles which will be granted to this new role.
         * 
         * @return builder
         * 
         */
        public Builder roles(List<String> roles) {
            return roles(Output.of(roles));
        }

        /**
         * @param roles Defines list of roles which will be granted to this new role.
         * 
         * @return builder
         * 
         */
        public Builder roles(String... roles) {
            return roles(List.of(roles));
        }

        /**
         * @param searchPaths Alters the search path of this new role. Note that
         * due to limitations in the implementation, values cannot contain the substring
         * `&#34;, &#34;`.
         * 
         * @return builder
         * 
         */
        public Builder searchPaths(@Nullable Output<List<String>> searchPaths) {
            $.searchPaths = searchPaths;
            return this;
        }

        /**
         * @param searchPaths Alters the search path of this new role. Note that
         * due to limitations in the implementation, values cannot contain the substring
         * `&#34;, &#34;`.
         * 
         * @return builder
         * 
         */
        public Builder searchPaths(List<String> searchPaths) {
            return searchPaths(Output.of(searchPaths));
        }

        /**
         * @param searchPaths Alters the search path of this new role. Note that
         * due to limitations in the implementation, values cannot contain the substring
         * `&#34;, &#34;`.
         * 
         * @return builder
         * 
         */
        public Builder searchPaths(String... searchPaths) {
            return searchPaths(List.of(searchPaths));
        }

        /**
         * @param skipDropRole When a PostgreSQL ROLE exists in multiple
         * databases and the ROLE is dropped, the
         * [cleanup of ownership of objects](https://www.postgresql.org/docs/current/static/role-removal.html)
         * in each of the respective databases must occur before the ROLE can be dropped
         * from the catalog.  Set this option to true when there are multiple databases
         * in a PostgreSQL cluster using the same PostgreSQL ROLE for object ownership.
         * This is the third and final step taken when removing a ROLE from a database.
         * 
         * @return builder
         * 
         */
        public Builder skipDropRole(@Nullable Output<Boolean> skipDropRole) {
            $.skipDropRole = skipDropRole;
            return this;
        }

        /**
         * @param skipDropRole When a PostgreSQL ROLE exists in multiple
         * databases and the ROLE is dropped, the
         * [cleanup of ownership of objects](https://www.postgresql.org/docs/current/static/role-removal.html)
         * in each of the respective databases must occur before the ROLE can be dropped
         * from the catalog.  Set this option to true when there are multiple databases
         * in a PostgreSQL cluster using the same PostgreSQL ROLE for object ownership.
         * This is the third and final step taken when removing a ROLE from a database.
         * 
         * @return builder
         * 
         */
        public Builder skipDropRole(Boolean skipDropRole) {
            return skipDropRole(Output.of(skipDropRole));
        }

        /**
         * @param skipReassignOwned When a PostgreSQL ROLE exists in multiple
         * databases and the ROLE is dropped, a
         * [`REASSIGN OWNED`](https://www.postgresql.org/docs/current/static/sql-reassign-owned.html) in
         * must be executed on each of the respective databases before the `DROP ROLE`
         * can be executed to drop the ROLE from the catalog.  This is the first and
         * second steps taken when removing a ROLE from a database (the second step being
         * an implicit
         * [`DROP OWNED`](https://www.postgresql.org/docs/current/static/sql-drop-owned.html)).
         * 
         * @return builder
         * 
         */
        public Builder skipReassignOwned(@Nullable Output<Boolean> skipReassignOwned) {
            $.skipReassignOwned = skipReassignOwned;
            return this;
        }

        /**
         * @param skipReassignOwned When a PostgreSQL ROLE exists in multiple
         * databases and the ROLE is dropped, a
         * [`REASSIGN OWNED`](https://www.postgresql.org/docs/current/static/sql-reassign-owned.html) in
         * must be executed on each of the respective databases before the `DROP ROLE`
         * can be executed to drop the ROLE from the catalog.  This is the first and
         * second steps taken when removing a ROLE from a database (the second step being
         * an implicit
         * [`DROP OWNED`](https://www.postgresql.org/docs/current/static/sql-drop-owned.html)).
         * 
         * @return builder
         * 
         */
        public Builder skipReassignOwned(Boolean skipReassignOwned) {
            return skipReassignOwned(Output.of(skipReassignOwned));
        }

        /**
         * @param statementTimeout Defines [`statementTimeout`](https://www.postgresql.org/docs/current/runtime-config-client.html#RUNTIME-CONFIG-CLIENT-STATEMENT) setting for this role which allows to abort any statement that takes more than the specified amount of time.
         * 
         * @return builder
         * 
         */
        public Builder statementTimeout(@Nullable Output<Integer> statementTimeout) {
            $.statementTimeout = statementTimeout;
            return this;
        }

        /**
         * @param statementTimeout Defines [`statementTimeout`](https://www.postgresql.org/docs/current/runtime-config-client.html#RUNTIME-CONFIG-CLIENT-STATEMENT) setting for this role which allows to abort any statement that takes more than the specified amount of time.
         * 
         * @return builder
         * 
         */
        public Builder statementTimeout(Integer statementTimeout) {
            return statementTimeout(Output.of(statementTimeout));
        }

        /**
         * @param superuser Defines whether the role is a &#34;superuser&#34;, and
         * therefore can override all access restrictions within the database.  Default
         * value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder superuser(@Nullable Output<Boolean> superuser) {
            $.superuser = superuser;
            return this;
        }

        /**
         * @param superuser Defines whether the role is a &#34;superuser&#34;, and
         * therefore can override all access restrictions within the database.  Default
         * value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder superuser(Boolean superuser) {
            return superuser(Output.of(superuser));
        }

        /**
         * @param validUntil Defines the date and time after which the role&#39;s
         * password is no longer valid.  Established connections past this `validTime`
         * will have to be manually terminated.  This value corresponds to a PostgreSQL
         * datetime. If omitted or the magic value `NULL` is used, `validUntil` will be
         * set to `infinity`.  Default is `NULL`, therefore `infinity`.
         * 
         * @return builder
         * 
         */
        public Builder validUntil(@Nullable Output<String> validUntil) {
            $.validUntil = validUntil;
            return this;
        }

        /**
         * @param validUntil Defines the date and time after which the role&#39;s
         * password is no longer valid.  Established connections past this `validTime`
         * will have to be manually terminated.  This value corresponds to a PostgreSQL
         * datetime. If omitted or the magic value `NULL` is used, `validUntil` will be
         * set to `infinity`.  Default is `NULL`, therefore `infinity`.
         * 
         * @return builder
         * 
         */
        public Builder validUntil(String validUntil) {
            return validUntil(Output.of(validUntil));
        }

        public RoleArgs build() {
            return $;
        }
    }

}
