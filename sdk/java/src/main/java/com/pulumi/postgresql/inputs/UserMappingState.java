// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.postgresql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserMappingState extends com.pulumi.resources.ResourceArgs {

    public static final UserMappingState Empty = new UserMappingState();

    /**
     * This clause specifies the options of the user mapping. The options typically define the actual user name and password of the mapping. Option names must be unique. The allowed option names and values are specific to the server&#39;s foreign-data wrapper.
     * 
     */
    @Import(name="options")
    private @Nullable Output<Map<String,String>> options;

    /**
     * @return This clause specifies the options of the user mapping. The options typically define the actual user name and password of the mapping. Option names must be unique. The allowed option names and values are specific to the server&#39;s foreign-data wrapper.
     * 
     */
    public Optional<Output<Map<String,String>>> options() {
        return Optional.ofNullable(this.options);
    }

    /**
     * The name of an existing server for which the user mapping is to be created.
     * Changing this value
     * will force the creation of a new resource as this value can only be set
     * when the user mapping is created.
     * 
     */
    @Import(name="serverName")
    private @Nullable Output<String> serverName;

    /**
     * @return The name of an existing server for which the user mapping is to be created.
     * Changing this value
     * will force the creation of a new resource as this value can only be set
     * when the user mapping is created.
     * 
     */
    public Optional<Output<String>> serverName() {
        return Optional.ofNullable(this.serverName);
    }

    /**
     * The name of an existing user that is mapped to foreign server. CURRENT_ROLE, CURRENT_USER, and USER match the name of the current user. When PUBLIC is specified, a so-called public mapping is created that is used when no user-specific mapping is applicable.
     * Changing this value
     * will force the creation of a new resource as this value can only be set
     * when the user mapping is created.
     * 
     */
    @Import(name="userName")
    private @Nullable Output<String> userName;

    /**
     * @return The name of an existing user that is mapped to foreign server. CURRENT_ROLE, CURRENT_USER, and USER match the name of the current user. When PUBLIC is specified, a so-called public mapping is created that is used when no user-specific mapping is applicable.
     * Changing this value
     * will force the creation of a new resource as this value can only be set
     * when the user mapping is created.
     * 
     */
    public Optional<Output<String>> userName() {
        return Optional.ofNullable(this.userName);
    }

    private UserMappingState() {}

    private UserMappingState(UserMappingState $) {
        this.options = $.options;
        this.serverName = $.serverName;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserMappingState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserMappingState $;

        public Builder() {
            $ = new UserMappingState();
        }

        public Builder(UserMappingState defaults) {
            $ = new UserMappingState(Objects.requireNonNull(defaults));
        }

        /**
         * @param options This clause specifies the options of the user mapping. The options typically define the actual user name and password of the mapping. Option names must be unique. The allowed option names and values are specific to the server&#39;s foreign-data wrapper.
         * 
         * @return builder
         * 
         */
        public Builder options(@Nullable Output<Map<String,String>> options) {
            $.options = options;
            return this;
        }

        /**
         * @param options This clause specifies the options of the user mapping. The options typically define the actual user name and password of the mapping. Option names must be unique. The allowed option names and values are specific to the server&#39;s foreign-data wrapper.
         * 
         * @return builder
         * 
         */
        public Builder options(Map<String,String> options) {
            return options(Output.of(options));
        }

        /**
         * @param serverName The name of an existing server for which the user mapping is to be created.
         * Changing this value
         * will force the creation of a new resource as this value can only be set
         * when the user mapping is created.
         * 
         * @return builder
         * 
         */
        public Builder serverName(@Nullable Output<String> serverName) {
            $.serverName = serverName;
            return this;
        }

        /**
         * @param serverName The name of an existing server for which the user mapping is to be created.
         * Changing this value
         * will force the creation of a new resource as this value can only be set
         * when the user mapping is created.
         * 
         * @return builder
         * 
         */
        public Builder serverName(String serverName) {
            return serverName(Output.of(serverName));
        }

        /**
         * @param userName The name of an existing user that is mapped to foreign server. CURRENT_ROLE, CURRENT_USER, and USER match the name of the current user. When PUBLIC is specified, a so-called public mapping is created that is used when no user-specific mapping is applicable.
         * Changing this value
         * will force the creation of a new resource as this value can only be set
         * when the user mapping is created.
         * 
         * @return builder
         * 
         */
        public Builder userName(@Nullable Output<String> userName) {
            $.userName = userName;
            return this;
        }

        /**
         * @param userName The name of an existing user that is mapped to foreign server. CURRENT_ROLE, CURRENT_USER, and USER match the name of the current user. When PUBLIC is specified, a so-called public mapping is created that is used when no user-specific mapping is applicable.
         * Changing this value
         * will force the creation of a new resource as this value can only be set
         * when the user mapping is created.
         * 
         * @return builder
         * 
         */
        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public UserMappingState build() {
            return $;
        }
    }

}
