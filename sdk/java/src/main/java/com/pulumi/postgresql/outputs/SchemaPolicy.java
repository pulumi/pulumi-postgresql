// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.postgresql.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SchemaPolicy {
    /**
     * @return Should the specified ROLE have CREATE privileges to the specified SCHEMA.
     * 
     */
    private @Nullable Boolean create;
    /**
     * @return Should the specified ROLE have CREATE privileges to the specified SCHEMA and the ability to GRANT the CREATE privilege to other ROLEs.
     * 
     */
    private @Nullable Boolean createWithGrant;
    /**
     * @return The ROLE who is receiving the policy.  If this value is empty or not specified it implies the policy is referring to the [`PUBLIC` role](https://www.postgresql.org/docs/current/static/sql-grant.html).
     * 
     */
    private @Nullable String role;
    /**
     * @return Should the specified ROLE have USAGE privileges to the specified SCHEMA.
     * 
     */
    private @Nullable Boolean usage;
    /**
     * @return Should the specified ROLE have USAGE privileges to the specified SCHEMA and the ability to GRANT the USAGE privilege to other ROLEs.
     * 
     * &gt; **NOTE on `policy`:** The permissions of a role specified in multiple policy blocks is cumulative.  For example, if the same role is specified in two different `policy` each with different permissions (e.g. `create` and `usage_with_grant`, respectively), then the specified role with have both `create` and `usage_with_grant` privileges.
     * 
     */
    private @Nullable Boolean usageWithGrant;

    private SchemaPolicy() {}
    /**
     * @return Should the specified ROLE have CREATE privileges to the specified SCHEMA.
     * 
     */
    public Optional<Boolean> create() {
        return Optional.ofNullable(this.create);
    }
    /**
     * @return Should the specified ROLE have CREATE privileges to the specified SCHEMA and the ability to GRANT the CREATE privilege to other ROLEs.
     * 
     */
    public Optional<Boolean> createWithGrant() {
        return Optional.ofNullable(this.createWithGrant);
    }
    /**
     * @return The ROLE who is receiving the policy.  If this value is empty or not specified it implies the policy is referring to the [`PUBLIC` role](https://www.postgresql.org/docs/current/static/sql-grant.html).
     * 
     */
    public Optional<String> role() {
        return Optional.ofNullable(this.role);
    }
    /**
     * @return Should the specified ROLE have USAGE privileges to the specified SCHEMA.
     * 
     */
    public Optional<Boolean> usage() {
        return Optional.ofNullable(this.usage);
    }
    /**
     * @return Should the specified ROLE have USAGE privileges to the specified SCHEMA and the ability to GRANT the USAGE privilege to other ROLEs.
     * 
     * &gt; **NOTE on `policy`:** The permissions of a role specified in multiple policy blocks is cumulative.  For example, if the same role is specified in two different `policy` each with different permissions (e.g. `create` and `usage_with_grant`, respectively), then the specified role with have both `create` and `usage_with_grant` privileges.
     * 
     */
    public Optional<Boolean> usageWithGrant() {
        return Optional.ofNullable(this.usageWithGrant);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SchemaPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean create;
        private @Nullable Boolean createWithGrant;
        private @Nullable String role;
        private @Nullable Boolean usage;
        private @Nullable Boolean usageWithGrant;
        public Builder() {}
        public Builder(SchemaPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.create = defaults.create;
    	      this.createWithGrant = defaults.createWithGrant;
    	      this.role = defaults.role;
    	      this.usage = defaults.usage;
    	      this.usageWithGrant = defaults.usageWithGrant;
        }

        @CustomType.Setter
        public Builder create(@Nullable Boolean create) {
            this.create = create;
            return this;
        }
        @CustomType.Setter
        public Builder createWithGrant(@Nullable Boolean createWithGrant) {
            this.createWithGrant = createWithGrant;
            return this;
        }
        @CustomType.Setter
        public Builder role(@Nullable String role) {
            this.role = role;
            return this;
        }
        @CustomType.Setter
        public Builder usage(@Nullable Boolean usage) {
            this.usage = usage;
            return this;
        }
        @CustomType.Setter
        public Builder usageWithGrant(@Nullable Boolean usageWithGrant) {
            this.usageWithGrant = usageWithGrant;
            return this;
        }
        public SchemaPolicy build() {
            final var o = new SchemaPolicy();
            o.create = create;
            o.createWithGrant = createWithGrant;
            o.role = role;
            o.usage = usage;
            o.usageWithGrant = usageWithGrant;
            return o;
        }
    }
}
