// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.postgresql;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GrantRoleArgs extends com.pulumi.resources.ResourceArgs {

    public static final GrantRoleArgs Empty = new GrantRoleArgs();

    /**
     * The name of the role that is added to `role`.
     * 
     */
    @Import(name="grantRole", required=true)
    private Output<String> grantRole;

    /**
     * @return The name of the role that is added to `role`.
     * 
     */
    public Output<String> grantRole() {
        return this.grantRole;
    }

    /**
     * The name of the role that is granted a new membership.
     * 
     */
    @Import(name="role", required=true)
    private Output<String> role;

    /**
     * @return The name of the role that is granted a new membership.
     * 
     */
    public Output<String> role() {
        return this.role;
    }

    /**
     * Giving ability to grant membership to others or not for `role`. (Default: false)
     * 
     */
    @Import(name="withAdminOption")
    private @Nullable Output<Boolean> withAdminOption;

    /**
     * @return Giving ability to grant membership to others or not for `role`. (Default: false)
     * 
     */
    public Optional<Output<Boolean>> withAdminOption() {
        return Optional.ofNullable(this.withAdminOption);
    }

    private GrantRoleArgs() {}

    private GrantRoleArgs(GrantRoleArgs $) {
        this.grantRole = $.grantRole;
        this.role = $.role;
        this.withAdminOption = $.withAdminOption;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GrantRoleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GrantRoleArgs $;

        public Builder() {
            $ = new GrantRoleArgs();
        }

        public Builder(GrantRoleArgs defaults) {
            $ = new GrantRoleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param grantRole The name of the role that is added to `role`.
         * 
         * @return builder
         * 
         */
        public Builder grantRole(Output<String> grantRole) {
            $.grantRole = grantRole;
            return this;
        }

        /**
         * @param grantRole The name of the role that is added to `role`.
         * 
         * @return builder
         * 
         */
        public Builder grantRole(String grantRole) {
            return grantRole(Output.of(grantRole));
        }

        /**
         * @param role The name of the role that is granted a new membership.
         * 
         * @return builder
         * 
         */
        public Builder role(Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role The name of the role that is granted a new membership.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param withAdminOption Giving ability to grant membership to others or not for `role`. (Default: false)
         * 
         * @return builder
         * 
         */
        public Builder withAdminOption(@Nullable Output<Boolean> withAdminOption) {
            $.withAdminOption = withAdminOption;
            return this;
        }

        /**
         * @param withAdminOption Giving ability to grant membership to others or not for `role`. (Default: false)
         * 
         * @return builder
         * 
         */
        public Builder withAdminOption(Boolean withAdminOption) {
            return withAdminOption(Output.of(withAdminOption));
        }

        public GrantRoleArgs build() {
            if ($.grantRole == null) {
                throw new MissingRequiredPropertyException("GrantRoleArgs", "grantRole");
            }
            if ($.role == null) {
                throw new MissingRequiredPropertyException("GrantRoleArgs", "role");
            }
            return $;
        }
    }

}
