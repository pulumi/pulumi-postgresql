// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.postgresql;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DefaultPrivilegesArgs extends com.pulumi.resources.ResourceArgs {

    public static final DefaultPrivilegesArgs Empty = new DefaultPrivilegesArgs();

    /**
     * The database to grant default privileges for this role.
     * 
     */
    @Import(name="database", required=true)
    private Output<String> database;

    /**
     * @return The database to grant default privileges for this role.
     * 
     */
    public Output<String> database() {
        return this.database;
    }

    /**
     * The PostgreSQL object type to set the default privileges on (one of: table, sequence, function, routine, type, schema).
     * 
     */
    @Import(name="objectType", required=true)
    private Output<String> objectType;

    /**
     * @return The PostgreSQL object type to set the default privileges on (one of: table, sequence, function, routine, type, schema).
     * 
     */
    public Output<String> objectType() {
        return this.objectType;
    }

    /**
     * Specifies the role that creates objects for which the default privileges will be applied.
     * 
     */
    @Import(name="owner", required=true)
    private Output<String> owner;

    /**
     * @return Specifies the role that creates objects for which the default privileges will be applied.
     * 
     */
    public Output<String> owner() {
        return this.owner;
    }

    /**
     * List of privileges (e.g., SELECT, INSERT, UPDATE, DELETE) to grant on new objects created by the owner. An empty list could be provided to revoke all default privileges for this role.
     * 
     */
    @Import(name="privileges", required=true)
    private Output<List<String>> privileges;

    /**
     * @return List of privileges (e.g., SELECT, INSERT, UPDATE, DELETE) to grant on new objects created by the owner. An empty list could be provided to revoke all default privileges for this role.
     * 
     */
    public Output<List<String>> privileges() {
        return this.privileges;
    }

    /**
     * The role that will automatically be granted the specified privileges on new objects created by the owner.
     * 
     */
    @Import(name="role", required=true)
    private Output<String> role;

    /**
     * @return The role that will automatically be granted the specified privileges on new objects created by the owner.
     * 
     */
    public Output<String> role() {
        return this.role;
    }

    /**
     * The database schema to set default privileges for this role.
     * 
     */
    @Import(name="schema")
    private @Nullable Output<String> schema;

    /**
     * @return The database schema to set default privileges for this role.
     * 
     */
    public Optional<Output<String>> schema() {
        return Optional.ofNullable(this.schema);
    }

    /**
     * Permit the grant recipient to grant it to others
     * 
     */
    @Import(name="withGrantOption")
    private @Nullable Output<Boolean> withGrantOption;

    /**
     * @return Permit the grant recipient to grant it to others
     * 
     */
    public Optional<Output<Boolean>> withGrantOption() {
        return Optional.ofNullable(this.withGrantOption);
    }

    private DefaultPrivilegesArgs() {}

    private DefaultPrivilegesArgs(DefaultPrivilegesArgs $) {
        this.database = $.database;
        this.objectType = $.objectType;
        this.owner = $.owner;
        this.privileges = $.privileges;
        this.role = $.role;
        this.schema = $.schema;
        this.withGrantOption = $.withGrantOption;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DefaultPrivilegesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DefaultPrivilegesArgs $;

        public Builder() {
            $ = new DefaultPrivilegesArgs();
        }

        public Builder(DefaultPrivilegesArgs defaults) {
            $ = new DefaultPrivilegesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param database The database to grant default privileges for this role.
         * 
         * @return builder
         * 
         */
        public Builder database(Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database The database to grant default privileges for this role.
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param objectType The PostgreSQL object type to set the default privileges on (one of: table, sequence, function, routine, type, schema).
         * 
         * @return builder
         * 
         */
        public Builder objectType(Output<String> objectType) {
            $.objectType = objectType;
            return this;
        }

        /**
         * @param objectType The PostgreSQL object type to set the default privileges on (one of: table, sequence, function, routine, type, schema).
         * 
         * @return builder
         * 
         */
        public Builder objectType(String objectType) {
            return objectType(Output.of(objectType));
        }

        /**
         * @param owner Specifies the role that creates objects for which the default privileges will be applied.
         * 
         * @return builder
         * 
         */
        public Builder owner(Output<String> owner) {
            $.owner = owner;
            return this;
        }

        /**
         * @param owner Specifies the role that creates objects for which the default privileges will be applied.
         * 
         * @return builder
         * 
         */
        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        /**
         * @param privileges List of privileges (e.g., SELECT, INSERT, UPDATE, DELETE) to grant on new objects created by the owner. An empty list could be provided to revoke all default privileges for this role.
         * 
         * @return builder
         * 
         */
        public Builder privileges(Output<List<String>> privileges) {
            $.privileges = privileges;
            return this;
        }

        /**
         * @param privileges List of privileges (e.g., SELECT, INSERT, UPDATE, DELETE) to grant on new objects created by the owner. An empty list could be provided to revoke all default privileges for this role.
         * 
         * @return builder
         * 
         */
        public Builder privileges(List<String> privileges) {
            return privileges(Output.of(privileges));
        }

        /**
         * @param privileges List of privileges (e.g., SELECT, INSERT, UPDATE, DELETE) to grant on new objects created by the owner. An empty list could be provided to revoke all default privileges for this role.
         * 
         * @return builder
         * 
         */
        public Builder privileges(String... privileges) {
            return privileges(List.of(privileges));
        }

        /**
         * @param role The role that will automatically be granted the specified privileges on new objects created by the owner.
         * 
         * @return builder
         * 
         */
        public Builder role(Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role The role that will automatically be granted the specified privileges on new objects created by the owner.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param schema The database schema to set default privileges for this role.
         * 
         * @return builder
         * 
         */
        public Builder schema(@Nullable Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The database schema to set default privileges for this role.
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        /**
         * @param withGrantOption Permit the grant recipient to grant it to others
         * 
         * @return builder
         * 
         */
        public Builder withGrantOption(@Nullable Output<Boolean> withGrantOption) {
            $.withGrantOption = withGrantOption;
            return this;
        }

        /**
         * @param withGrantOption Permit the grant recipient to grant it to others
         * 
         * @return builder
         * 
         */
        public Builder withGrantOption(Boolean withGrantOption) {
            return withGrantOption(Output.of(withGrantOption));
        }

        public DefaultPrivilegesArgs build() {
            if ($.database == null) {
                throw new MissingRequiredPropertyException("DefaultPrivilegesArgs", "database");
            }
            if ($.objectType == null) {
                throw new MissingRequiredPropertyException("DefaultPrivilegesArgs", "objectType");
            }
            if ($.owner == null) {
                throw new MissingRequiredPropertyException("DefaultPrivilegesArgs", "owner");
            }
            if ($.privileges == null) {
                throw new MissingRequiredPropertyException("DefaultPrivilegesArgs", "privileges");
            }
            if ($.role == null) {
                throw new MissingRequiredPropertyException("DefaultPrivilegesArgs", "role");
            }
            return $;
        }
    }

}
