// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.postgresql;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerArgs Empty = new ServerArgs();

    /**
     * When true, will drop objects that depend on the server (such as user mappings), and in turn all objects that depend on those objects . (Default: false)
     * 
     */
    @Import(name="dropCascade")
    private @Nullable Output<Boolean> dropCascade;

    /**
     * @return When true, will drop objects that depend on the server (such as user mappings), and in turn all objects that depend on those objects . (Default: false)
     * 
     */
    public Optional<Output<Boolean>> dropCascade() {
        return Optional.ofNullable(this.dropCascade);
    }

    /**
     * The name of the foreign-data wrapper that manages the server.
     * Changing this value
     * will force the creation of a new resource as this value can only be set
     * when the foreign server is created.
     * 
     */
    @Import(name="fdwName", required=true)
    private Output<String> fdwName;

    /**
     * @return The name of the foreign-data wrapper that manages the server.
     * Changing this value
     * will force the creation of a new resource as this value can only be set
     * when the foreign server is created.
     * 
     */
    public Output<String> fdwName() {
        return this.fdwName;
    }

    /**
     * This clause specifies the options for the server. The options typically define the connection details of the server, but the actual names and values are dependent on the server&#39;s foreign-data wrapper.
     * 
     */
    @Import(name="options")
    private @Nullable Output<Map<String,String>> options;

    /**
     * @return This clause specifies the options for the server. The options typically define the connection details of the server, but the actual names and values are dependent on the server&#39;s foreign-data wrapper.
     * 
     */
    public Optional<Output<Map<String,String>>> options() {
        return Optional.ofNullable(this.options);
    }

    /**
     * The name of the foreign server to be created.
     * 
     */
    @Import(name="serverName", required=true)
    private Output<String> serverName;

    /**
     * @return The name of the foreign server to be created.
     * 
     */
    public Output<String> serverName() {
        return this.serverName;
    }

    /**
     * By default, the user who defines the server becomes its owner. Set this value to configure the new owner of the foreign server.
     * 
     */
    @Import(name="serverOwner")
    private @Nullable Output<String> serverOwner;

    /**
     * @return By default, the user who defines the server becomes its owner. Set this value to configure the new owner of the foreign server.
     * 
     */
    public Optional<Output<String>> serverOwner() {
        return Optional.ofNullable(this.serverOwner);
    }

    /**
     * Optional server type, potentially useful to foreign-data wrappers.
     * Changing this value
     * will force the creation of a new resource as this value can only be set
     * when the foreign server is created.
     * 
     */
    @Import(name="serverType")
    private @Nullable Output<String> serverType;

    /**
     * @return Optional server type, potentially useful to foreign-data wrappers.
     * Changing this value
     * will force the creation of a new resource as this value can only be set
     * when the foreign server is created.
     * 
     */
    public Optional<Output<String>> serverType() {
        return Optional.ofNullable(this.serverType);
    }

    /**
     * Optional server version, potentially useful to foreign-data wrappers.
     * 
     */
    @Import(name="serverVersion")
    private @Nullable Output<String> serverVersion;

    /**
     * @return Optional server version, potentially useful to foreign-data wrappers.
     * 
     */
    public Optional<Output<String>> serverVersion() {
        return Optional.ofNullable(this.serverVersion);
    }

    private ServerArgs() {}

    private ServerArgs(ServerArgs $) {
        this.dropCascade = $.dropCascade;
        this.fdwName = $.fdwName;
        this.options = $.options;
        this.serverName = $.serverName;
        this.serverOwner = $.serverOwner;
        this.serverType = $.serverType;
        this.serverVersion = $.serverVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerArgs $;

        public Builder() {
            $ = new ServerArgs();
        }

        public Builder(ServerArgs defaults) {
            $ = new ServerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dropCascade When true, will drop objects that depend on the server (such as user mappings), and in turn all objects that depend on those objects . (Default: false)
         * 
         * @return builder
         * 
         */
        public Builder dropCascade(@Nullable Output<Boolean> dropCascade) {
            $.dropCascade = dropCascade;
            return this;
        }

        /**
         * @param dropCascade When true, will drop objects that depend on the server (such as user mappings), and in turn all objects that depend on those objects . (Default: false)
         * 
         * @return builder
         * 
         */
        public Builder dropCascade(Boolean dropCascade) {
            return dropCascade(Output.of(dropCascade));
        }

        /**
         * @param fdwName The name of the foreign-data wrapper that manages the server.
         * Changing this value
         * will force the creation of a new resource as this value can only be set
         * when the foreign server is created.
         * 
         * @return builder
         * 
         */
        public Builder fdwName(Output<String> fdwName) {
            $.fdwName = fdwName;
            return this;
        }

        /**
         * @param fdwName The name of the foreign-data wrapper that manages the server.
         * Changing this value
         * will force the creation of a new resource as this value can only be set
         * when the foreign server is created.
         * 
         * @return builder
         * 
         */
        public Builder fdwName(String fdwName) {
            return fdwName(Output.of(fdwName));
        }

        /**
         * @param options This clause specifies the options for the server. The options typically define the connection details of the server, but the actual names and values are dependent on the server&#39;s foreign-data wrapper.
         * 
         * @return builder
         * 
         */
        public Builder options(@Nullable Output<Map<String,String>> options) {
            $.options = options;
            return this;
        }

        /**
         * @param options This clause specifies the options for the server. The options typically define the connection details of the server, but the actual names and values are dependent on the server&#39;s foreign-data wrapper.
         * 
         * @return builder
         * 
         */
        public Builder options(Map<String,String> options) {
            return options(Output.of(options));
        }

        /**
         * @param serverName The name of the foreign server to be created.
         * 
         * @return builder
         * 
         */
        public Builder serverName(Output<String> serverName) {
            $.serverName = serverName;
            return this;
        }

        /**
         * @param serverName The name of the foreign server to be created.
         * 
         * @return builder
         * 
         */
        public Builder serverName(String serverName) {
            return serverName(Output.of(serverName));
        }

        /**
         * @param serverOwner By default, the user who defines the server becomes its owner. Set this value to configure the new owner of the foreign server.
         * 
         * @return builder
         * 
         */
        public Builder serverOwner(@Nullable Output<String> serverOwner) {
            $.serverOwner = serverOwner;
            return this;
        }

        /**
         * @param serverOwner By default, the user who defines the server becomes its owner. Set this value to configure the new owner of the foreign server.
         * 
         * @return builder
         * 
         */
        public Builder serverOwner(String serverOwner) {
            return serverOwner(Output.of(serverOwner));
        }

        /**
         * @param serverType Optional server type, potentially useful to foreign-data wrappers.
         * Changing this value
         * will force the creation of a new resource as this value can only be set
         * when the foreign server is created.
         * 
         * @return builder
         * 
         */
        public Builder serverType(@Nullable Output<String> serverType) {
            $.serverType = serverType;
            return this;
        }

        /**
         * @param serverType Optional server type, potentially useful to foreign-data wrappers.
         * Changing this value
         * will force the creation of a new resource as this value can only be set
         * when the foreign server is created.
         * 
         * @return builder
         * 
         */
        public Builder serverType(String serverType) {
            return serverType(Output.of(serverType));
        }

        /**
         * @param serverVersion Optional server version, potentially useful to foreign-data wrappers.
         * 
         * @return builder
         * 
         */
        public Builder serverVersion(@Nullable Output<String> serverVersion) {
            $.serverVersion = serverVersion;
            return this;
        }

        /**
         * @param serverVersion Optional server version, potentially useful to foreign-data wrappers.
         * 
         * @return builder
         * 
         */
        public Builder serverVersion(String serverVersion) {
            return serverVersion(Output.of(serverVersion));
        }

        public ServerArgs build() {
            if ($.fdwName == null) {
                throw new MissingRequiredPropertyException("ServerArgs", "fdwName");
            }
            if ($.serverName == null) {
                throw new MissingRequiredPropertyException("ServerArgs", "serverName");
            }
            return $;
        }
    }

}
