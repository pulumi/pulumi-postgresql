// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.postgresql;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.postgresql.DatabaseArgs;
import com.pulumi.postgresql.Utilities;
import com.pulumi.postgresql.inputs.DatabaseState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="postgresql:index/database:Database")
public class Database extends com.pulumi.resources.CustomResource {
    /**
     * If `false` then no one can connect to this
     * database. The default is `true`, allowing connections (except as restricted by
     * other mechanisms, such as `GRANT` or `REVOKE CONNECT`).
     * 
     */
    @Export(name="allowConnections", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> allowConnections;

    /**
     * @return If `false` then no one can connect to this
     * database. The default is `true`, allowing connections (except as restricted by
     * other mechanisms, such as `GRANT` or `REVOKE CONNECT`).
     * 
     */
    public Output<Optional<Boolean>> allowConnections() {
        return Codegen.optional(this.allowConnections);
    }
    /**
     * If `true`, the change of the database
     * `owner` will also include a reassignment of the ownership of preexisting
     * objects like tables or sequences from the previous owner to the new one.
     * If set to `false` (the default), then the previous database `owner` will still
     * hold the ownership of the objects in that database. To alter existing objects in
     * the database, you must be a direct or indirect member of the specified role, or
     * the username in the provider must be superuser.
     * 
     */
    @Export(name="alterObjectOwnership", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> alterObjectOwnership;

    /**
     * @return If `true`, the change of the database
     * `owner` will also include a reassignment of the ownership of preexisting
     * objects like tables or sequences from the previous owner to the new one.
     * If set to `false` (the default), then the previous database `owner` will still
     * hold the ownership of the objects in that database. To alter existing objects in
     * the database, you must be a direct or indirect member of the specified role, or
     * the username in the provider must be superuser.
     * 
     */
    public Output<Optional<Boolean>> alterObjectOwnership() {
        return Codegen.optional(this.alterObjectOwnership);
    }
    /**
     * How many concurrent connections can be
     * established to this database. `-1` (the default) means no limit.
     * 
     */
    @Export(name="connectionLimit", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> connectionLimit;

    /**
     * @return How many concurrent connections can be
     * established to this database. `-1` (the default) means no limit.
     * 
     */
    public Output<Optional<Integer>> connectionLimit() {
        return Codegen.optional(this.connectionLimit);
    }
    /**
     * Character set encoding to use in the new database
     * 
     */
    @Export(name="encoding", refs={String.class}, tree="[0]")
    private Output<String> encoding;

    /**
     * @return Character set encoding to use in the new database
     * 
     */
    public Output<String> encoding() {
        return this.encoding;
    }
    /**
     * If `true`, then this database can be cloned by any
     * user with `CREATEDB` privileges; if `false` (the default), then only
     * superusers or the owner of the database can clone it.
     * 
     */
    @Export(name="isTemplate", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> isTemplate;

    /**
     * @return If `true`, then this database can be cloned by any
     * user with `CREATEDB` privileges; if `false` (the default), then only
     * superusers or the owner of the database can clone it.
     * 
     */
    public Output<Boolean> isTemplate() {
        return this.isTemplate;
    }
    /**
     * Collation order (LC_COLLATE) to use in the new database
     * 
     */
    @Export(name="lcCollate", refs={String.class}, tree="[0]")
    private Output<String> lcCollate;

    /**
     * @return Collation order (LC_COLLATE) to use in the new database
     * 
     */
    public Output<String> lcCollate() {
        return this.lcCollate;
    }
    /**
     * Character classification (LC_CTYPE) to use in the new database
     * 
     */
    @Export(name="lcCtype", refs={String.class}, tree="[0]")
    private Output<String> lcCtype;

    /**
     * @return Character classification (LC_CTYPE) to use in the new database
     * 
     */
    public Output<String> lcCtype() {
        return this.lcCtype;
    }
    /**
     * The name of the database. Must be unique on the PostgreSQL
     * server instance where it is configured.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the database. Must be unique on the PostgreSQL
     * server instance where it is configured.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The role name of the user who will own the database, or
     * `DEFAULT` to use the default (namely, the user executing the command). To
     * create a database owned by another role or to change the owner of an existing
     * database, you must be a direct or indirect member of the specified role, or
     * the username in the provider is a superuser.
     * 
     */
    @Export(name="owner", refs={String.class}, tree="[0]")
    private Output<String> owner;

    /**
     * @return The role name of the user who will own the database, or
     * `DEFAULT` to use the default (namely, the user executing the command). To
     * create a database owned by another role or to change the owner of an existing
     * database, you must be a direct or indirect member of the specified role, or
     * the username in the provider is a superuser.
     * 
     */
    public Output<String> owner() {
        return this.owner;
    }
    /**
     * The name of the tablespace that will be
     * associated with the database, or `DEFAULT` to use the template database&#39;s
     * tablespace.  This tablespace will be the default tablespace used for objects
     * created in this database.
     * 
     */
    @Export(name="tablespaceName", refs={String.class}, tree="[0]")
    private Output<String> tablespaceName;

    /**
     * @return The name of the tablespace that will be
     * associated with the database, or `DEFAULT` to use the template database&#39;s
     * tablespace.  This tablespace will be the default tablespace used for objects
     * created in this database.
     * 
     */
    public Output<String> tablespaceName() {
        return this.tablespaceName;
    }
    /**
     * The name of the template from which to create the new database
     * 
     */
    @Export(name="template", refs={String.class}, tree="[0]")
    private Output<String> template;

    /**
     * @return The name of the template from which to create the new database
     * 
     */
    public Output<String> template() {
        return this.template;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Database(java.lang.String name) {
        this(name, DatabaseArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Database(java.lang.String name, @Nullable DatabaseArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Database(java.lang.String name, @Nullable DatabaseArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("postgresql:index/database:Database", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Database(java.lang.String name, Output<java.lang.String> id, @Nullable DatabaseState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("postgresql:index/database:Database", name, state, makeResourceOptions(options, id), false);
    }

    private static DatabaseArgs makeArgs(@Nullable DatabaseArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? DatabaseArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Database get(java.lang.String name, Output<java.lang.String> id, @Nullable DatabaseState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Database(name, id, state, options);
    }
}
