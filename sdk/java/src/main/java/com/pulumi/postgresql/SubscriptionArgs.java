// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.postgresql;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SubscriptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final SubscriptionArgs Empty = new SubscriptionArgs();

    /**
     * The connection string to the publisher. It should follow the [keyword/value format](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING)
     * 
     */
    @Import(name="conninfo", required=true)
    private Output<String> conninfo;

    /**
     * @return The connection string to the publisher. It should follow the [keyword/value format](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING)
     * 
     */
    public Output<String> conninfo() {
        return this.conninfo;
    }

    /**
     * Specifies whether the command should create the replication slot on the publisher. Default behavior is true
     * 
     */
    @Import(name="createSlot")
    private @Nullable Output<Boolean> createSlot;

    /**
     * @return Specifies whether the command should create the replication slot on the publisher. Default behavior is true
     * 
     */
    public Optional<Output<Boolean>> createSlot() {
        return Optional.ofNullable(this.createSlot);
    }

    /**
     * Which database to create the subscription on. Defaults to provider database.
     * 
     */
    @Import(name="database")
    private @Nullable Output<String> database;

    /**
     * @return Which database to create the subscription on. Defaults to provider database.
     * 
     */
    public Optional<Output<String>> database() {
        return Optional.ofNullable(this.database);
    }

    /**
     * The name of the publication.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the publication.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Names of the publications on the publisher to subscribe to
     * 
     */
    @Import(name="publications", required=true)
    private Output<List<String>> publications;

    /**
     * @return Names of the publications on the publisher to subscribe to
     * 
     */
    public Output<List<String>> publications() {
        return this.publications;
    }

    /**
     * Name of the replication slot to use. The default behavior is to use the name of the subscription for the slot name
     * 
     */
    @Import(name="slotName")
    private @Nullable Output<String> slotName;

    /**
     * @return Name of the replication slot to use. The default behavior is to use the name of the subscription for the slot name
     * 
     */
    public Optional<Output<String>> slotName() {
        return Optional.ofNullable(this.slotName);
    }

    private SubscriptionArgs() {}

    private SubscriptionArgs(SubscriptionArgs $) {
        this.conninfo = $.conninfo;
        this.createSlot = $.createSlot;
        this.database = $.database;
        this.name = $.name;
        this.publications = $.publications;
        this.slotName = $.slotName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubscriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubscriptionArgs $;

        public Builder() {
            $ = new SubscriptionArgs();
        }

        public Builder(SubscriptionArgs defaults) {
            $ = new SubscriptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param conninfo The connection string to the publisher. It should follow the [keyword/value format](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING)
         * 
         * @return builder
         * 
         */
        public Builder conninfo(Output<String> conninfo) {
            $.conninfo = conninfo;
            return this;
        }

        /**
         * @param conninfo The connection string to the publisher. It should follow the [keyword/value format](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING)
         * 
         * @return builder
         * 
         */
        public Builder conninfo(String conninfo) {
            return conninfo(Output.of(conninfo));
        }

        /**
         * @param createSlot Specifies whether the command should create the replication slot on the publisher. Default behavior is true
         * 
         * @return builder
         * 
         */
        public Builder createSlot(@Nullable Output<Boolean> createSlot) {
            $.createSlot = createSlot;
            return this;
        }

        /**
         * @param createSlot Specifies whether the command should create the replication slot on the publisher. Default behavior is true
         * 
         * @return builder
         * 
         */
        public Builder createSlot(Boolean createSlot) {
            return createSlot(Output.of(createSlot));
        }

        /**
         * @param database Which database to create the subscription on. Defaults to provider database.
         * 
         * @return builder
         * 
         */
        public Builder database(@Nullable Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database Which database to create the subscription on. Defaults to provider database.
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param name The name of the publication.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the publication.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param publications Names of the publications on the publisher to subscribe to
         * 
         * @return builder
         * 
         */
        public Builder publications(Output<List<String>> publications) {
            $.publications = publications;
            return this;
        }

        /**
         * @param publications Names of the publications on the publisher to subscribe to
         * 
         * @return builder
         * 
         */
        public Builder publications(List<String> publications) {
            return publications(Output.of(publications));
        }

        /**
         * @param publications Names of the publications on the publisher to subscribe to
         * 
         * @return builder
         * 
         */
        public Builder publications(String... publications) {
            return publications(List.of(publications));
        }

        /**
         * @param slotName Name of the replication slot to use. The default behavior is to use the name of the subscription for the slot name
         * 
         * @return builder
         * 
         */
        public Builder slotName(@Nullable Output<String> slotName) {
            $.slotName = slotName;
            return this;
        }

        /**
         * @param slotName Name of the replication slot to use. The default behavior is to use the name of the subscription for the slot name
         * 
         * @return builder
         * 
         */
        public Builder slotName(String slotName) {
            return slotName(Output.of(slotName));
        }

        public SubscriptionArgs build() {
            if ($.conninfo == null) {
                throw new MissingRequiredPropertyException("SubscriptionArgs", "conninfo");
            }
            if ($.publications == null) {
                throw new MissingRequiredPropertyException("SubscriptionArgs", "publications");
            }
            return $;
        }
    }

}
