// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.postgresql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityLabelState extends com.pulumi.resources.ResourceArgs {

    public static final SecurityLabelState Empty = new SecurityLabelState();

    /**
     * The value of the security label.
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return The value of the security label.
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * The name of the provider with which this label is to be associated.
     * 
     */
    @Import(name="labelProvider")
    private @Nullable Output<String> labelProvider;

    /**
     * @return The name of the provider with which this label is to be associated.
     * 
     */
    public Optional<Output<String>> labelProvider() {
        return Optional.ofNullable(this.labelProvider);
    }

    /**
     * The name of the object to be labeled. Names of objects that reside in schemas (tables, functions, etc.) can be schema-qualified.
     * 
     */
    @Import(name="objectName")
    private @Nullable Output<String> objectName;

    /**
     * @return The name of the object to be labeled. Names of objects that reside in schemas (tables, functions, etc.) can be schema-qualified.
     * 
     */
    public Optional<Output<String>> objectName() {
        return Optional.ofNullable(this.objectName);
    }

    /**
     * The PostgreSQL object type to apply this security label to.
     * 
     */
    @Import(name="objectType")
    private @Nullable Output<String> objectType;

    /**
     * @return The PostgreSQL object type to apply this security label to.
     * 
     */
    public Optional<Output<String>> objectType() {
        return Optional.ofNullable(this.objectType);
    }

    private SecurityLabelState() {}

    private SecurityLabelState(SecurityLabelState $) {
        this.label = $.label;
        this.labelProvider = $.labelProvider;
        this.objectName = $.objectName;
        this.objectType = $.objectType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityLabelState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityLabelState $;

        public Builder() {
            $ = new SecurityLabelState();
        }

        public Builder(SecurityLabelState defaults) {
            $ = new SecurityLabelState(Objects.requireNonNull(defaults));
        }

        /**
         * @param label The value of the security label.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label The value of the security label.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param labelProvider The name of the provider with which this label is to be associated.
         * 
         * @return builder
         * 
         */
        public Builder labelProvider(@Nullable Output<String> labelProvider) {
            $.labelProvider = labelProvider;
            return this;
        }

        /**
         * @param labelProvider The name of the provider with which this label is to be associated.
         * 
         * @return builder
         * 
         */
        public Builder labelProvider(String labelProvider) {
            return labelProvider(Output.of(labelProvider));
        }

        /**
         * @param objectName The name of the object to be labeled. Names of objects that reside in schemas (tables, functions, etc.) can be schema-qualified.
         * 
         * @return builder
         * 
         */
        public Builder objectName(@Nullable Output<String> objectName) {
            $.objectName = objectName;
            return this;
        }

        /**
         * @param objectName The name of the object to be labeled. Names of objects that reside in schemas (tables, functions, etc.) can be schema-qualified.
         * 
         * @return builder
         * 
         */
        public Builder objectName(String objectName) {
            return objectName(Output.of(objectName));
        }

        /**
         * @param objectType The PostgreSQL object type to apply this security label to.
         * 
         * @return builder
         * 
         */
        public Builder objectType(@Nullable Output<String> objectType) {
            $.objectType = objectType;
            return this;
        }

        /**
         * @param objectType The PostgreSQL object type to apply this security label to.
         * 
         * @return builder
         * 
         */
        public Builder objectType(String objectType) {
            return objectType(Output.of(objectType));
        }

        public SecurityLabelState build() {
            return $;
        }
    }

}
