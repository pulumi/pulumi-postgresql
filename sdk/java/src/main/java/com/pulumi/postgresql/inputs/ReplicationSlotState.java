// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.postgresql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReplicationSlotState extends com.pulumi.resources.ResourceArgs {

    public static final ReplicationSlotState Empty = new ReplicationSlotState();

    /**
     * Which database to create the replication slot on. Defaults to provider database.
     * 
     */
    @Import(name="database")
    private @Nullable Output<String> database;

    /**
     * @return Which database to create the replication slot on. Defaults to provider database.
     * 
     */
    public Optional<Output<String>> database() {
        return Optional.ofNullable(this.database);
    }

    /**
     * The name of the replication slot.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the replication slot.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Sets the output plugin.
     * 
     */
    @Import(name="plugin")
    private @Nullable Output<String> plugin;

    /**
     * @return Sets the output plugin.
     * 
     */
    public Optional<Output<String>> plugin() {
        return Optional.ofNullable(this.plugin);
    }

    private ReplicationSlotState() {}

    private ReplicationSlotState(ReplicationSlotState $) {
        this.database = $.database;
        this.name = $.name;
        this.plugin = $.plugin;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReplicationSlotState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReplicationSlotState $;

        public Builder() {
            $ = new ReplicationSlotState();
        }

        public Builder(ReplicationSlotState defaults) {
            $ = new ReplicationSlotState(Objects.requireNonNull(defaults));
        }

        /**
         * @param database Which database to create the replication slot on. Defaults to provider database.
         * 
         * @return builder
         * 
         */
        public Builder database(@Nullable Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database Which database to create the replication slot on. Defaults to provider database.
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param name The name of the replication slot.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the replication slot.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param plugin Sets the output plugin.
         * 
         * @return builder
         * 
         */
        public Builder plugin(@Nullable Output<String> plugin) {
            $.plugin = plugin;
            return this;
        }

        /**
         * @param plugin Sets the output plugin.
         * 
         * @return builder
         * 
         */
        public Builder plugin(String plugin) {
            return plugin(Output.of(plugin));
        }

        public ReplicationSlotState build() {
            return $;
        }
    }

}
