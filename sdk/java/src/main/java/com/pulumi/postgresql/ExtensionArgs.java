// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.postgresql;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExtensionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExtensionArgs Empty = new ExtensionArgs();

    /**
     * When true, will also create any extensions that this extension depends on that are not already installed. (Default: false)
     * 
     */
    @Import(name="createCascade")
    private @Nullable Output<Boolean> createCascade;

    /**
     * @return When true, will also create any extensions that this extension depends on that are not already installed. (Default: false)
     * 
     */
    public Optional<Output<Boolean>> createCascade() {
        return Optional.ofNullable(this.createCascade);
    }

    /**
     * Which database to create the extension on. Defaults to provider database.
     * 
     */
    @Import(name="database")
    private @Nullable Output<String> database;

    /**
     * @return Which database to create the extension on. Defaults to provider database.
     * 
     */
    public Optional<Output<String>> database() {
        return Optional.ofNullable(this.database);
    }

    /**
     * When true, will also drop all the objects that depend on the extension, and in turn all objects that depend on those objects. (Default: false)
     * 
     */
    @Import(name="dropCascade")
    private @Nullable Output<Boolean> dropCascade;

    /**
     * @return When true, will also drop all the objects that depend on the extension, and in turn all objects that depend on those objects. (Default: false)
     * 
     */
    public Optional<Output<Boolean>> dropCascade() {
        return Optional.ofNullable(this.dropCascade);
    }

    /**
     * The name of the extension.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the extension.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Sets the schema of an extension.
     * 
     */
    @Import(name="schema")
    private @Nullable Output<String> schema;

    /**
     * @return Sets the schema of an extension.
     * 
     */
    public Optional<Output<String>> schema() {
        return Optional.ofNullable(this.schema);
    }

    /**
     * Sets the version number of the extension.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return Sets the version number of the extension.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private ExtensionArgs() {}

    private ExtensionArgs(ExtensionArgs $) {
        this.createCascade = $.createCascade;
        this.database = $.database;
        this.dropCascade = $.dropCascade;
        this.name = $.name;
        this.schema = $.schema;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExtensionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExtensionArgs $;

        public Builder() {
            $ = new ExtensionArgs();
        }

        public Builder(ExtensionArgs defaults) {
            $ = new ExtensionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param createCascade When true, will also create any extensions that this extension depends on that are not already installed. (Default: false)
         * 
         * @return builder
         * 
         */
        public Builder createCascade(@Nullable Output<Boolean> createCascade) {
            $.createCascade = createCascade;
            return this;
        }

        /**
         * @param createCascade When true, will also create any extensions that this extension depends on that are not already installed. (Default: false)
         * 
         * @return builder
         * 
         */
        public Builder createCascade(Boolean createCascade) {
            return createCascade(Output.of(createCascade));
        }

        /**
         * @param database Which database to create the extension on. Defaults to provider database.
         * 
         * @return builder
         * 
         */
        public Builder database(@Nullable Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database Which database to create the extension on. Defaults to provider database.
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param dropCascade When true, will also drop all the objects that depend on the extension, and in turn all objects that depend on those objects. (Default: false)
         * 
         * @return builder
         * 
         */
        public Builder dropCascade(@Nullable Output<Boolean> dropCascade) {
            $.dropCascade = dropCascade;
            return this;
        }

        /**
         * @param dropCascade When true, will also drop all the objects that depend on the extension, and in turn all objects that depend on those objects. (Default: false)
         * 
         * @return builder
         * 
         */
        public Builder dropCascade(Boolean dropCascade) {
            return dropCascade(Output.of(dropCascade));
        }

        /**
         * @param name The name of the extension.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the extension.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param schema Sets the schema of an extension.
         * 
         * @return builder
         * 
         */
        public Builder schema(@Nullable Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema Sets the schema of an extension.
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        /**
         * @param version Sets the version number of the extension.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Sets the version number of the extension.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public ExtensionArgs build() {
            return $;
        }
    }

}
