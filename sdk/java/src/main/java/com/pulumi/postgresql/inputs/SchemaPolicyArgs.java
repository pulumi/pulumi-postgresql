// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.postgresql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SchemaPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final SchemaPolicyArgs Empty = new SchemaPolicyArgs();

    /**
     * Should the specified ROLE have CREATE privileges to the specified SCHEMA.
     * 
     */
    @Import(name="create")
    private @Nullable Output<Boolean> create;

    /**
     * @return Should the specified ROLE have CREATE privileges to the specified SCHEMA.
     * 
     */
    public Optional<Output<Boolean>> create() {
        return Optional.ofNullable(this.create);
    }

    /**
     * Should the specified ROLE have CREATE privileges to the specified SCHEMA and the ability to GRANT the CREATE privilege to other ROLEs.
     * 
     */
    @Import(name="createWithGrant")
    private @Nullable Output<Boolean> createWithGrant;

    /**
     * @return Should the specified ROLE have CREATE privileges to the specified SCHEMA and the ability to GRANT the CREATE privilege to other ROLEs.
     * 
     */
    public Optional<Output<Boolean>> createWithGrant() {
        return Optional.ofNullable(this.createWithGrant);
    }

    /**
     * The ROLE who is receiving the policy.  If this value is empty or not specified it implies the policy is referring to the [`PUBLIC` role](https://www.postgresql.org/docs/current/static/sql-grant.html).
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    /**
     * @return The ROLE who is receiving the policy.  If this value is empty or not specified it implies the policy is referring to the [`PUBLIC` role](https://www.postgresql.org/docs/current/static/sql-grant.html).
     * 
     */
    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * Should the specified ROLE have USAGE privileges to the specified SCHEMA.
     * 
     */
    @Import(name="usage")
    private @Nullable Output<Boolean> usage;

    /**
     * @return Should the specified ROLE have USAGE privileges to the specified SCHEMA.
     * 
     */
    public Optional<Output<Boolean>> usage() {
        return Optional.ofNullable(this.usage);
    }

    /**
     * Should the specified ROLE have USAGE privileges to the specified SCHEMA and the ability to GRANT the USAGE privilege to other ROLEs.
     * 
     * &gt; **NOTE on `policy`:** The permissions of a role specified in multiple policy blocks is cumulative.  For example, if the same role is specified in two different `policy` each with different permissions (e.g. `create` and `usage_with_grant`, respectively), then the specified role with have both `create` and `usage_with_grant` privileges.
     * 
     */
    @Import(name="usageWithGrant")
    private @Nullable Output<Boolean> usageWithGrant;

    /**
     * @return Should the specified ROLE have USAGE privileges to the specified SCHEMA and the ability to GRANT the USAGE privilege to other ROLEs.
     * 
     * &gt; **NOTE on `policy`:** The permissions of a role specified in multiple policy blocks is cumulative.  For example, if the same role is specified in two different `policy` each with different permissions (e.g. `create` and `usage_with_grant`, respectively), then the specified role with have both `create` and `usage_with_grant` privileges.
     * 
     */
    public Optional<Output<Boolean>> usageWithGrant() {
        return Optional.ofNullable(this.usageWithGrant);
    }

    private SchemaPolicyArgs() {}

    private SchemaPolicyArgs(SchemaPolicyArgs $) {
        this.create = $.create;
        this.createWithGrant = $.createWithGrant;
        this.role = $.role;
        this.usage = $.usage;
        this.usageWithGrant = $.usageWithGrant;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SchemaPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SchemaPolicyArgs $;

        public Builder() {
            $ = new SchemaPolicyArgs();
        }

        public Builder(SchemaPolicyArgs defaults) {
            $ = new SchemaPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param create Should the specified ROLE have CREATE privileges to the specified SCHEMA.
         * 
         * @return builder
         * 
         */
        public Builder create(@Nullable Output<Boolean> create) {
            $.create = create;
            return this;
        }

        /**
         * @param create Should the specified ROLE have CREATE privileges to the specified SCHEMA.
         * 
         * @return builder
         * 
         */
        public Builder create(Boolean create) {
            return create(Output.of(create));
        }

        /**
         * @param createWithGrant Should the specified ROLE have CREATE privileges to the specified SCHEMA and the ability to GRANT the CREATE privilege to other ROLEs.
         * 
         * @return builder
         * 
         */
        public Builder createWithGrant(@Nullable Output<Boolean> createWithGrant) {
            $.createWithGrant = createWithGrant;
            return this;
        }

        /**
         * @param createWithGrant Should the specified ROLE have CREATE privileges to the specified SCHEMA and the ability to GRANT the CREATE privilege to other ROLEs.
         * 
         * @return builder
         * 
         */
        public Builder createWithGrant(Boolean createWithGrant) {
            return createWithGrant(Output.of(createWithGrant));
        }

        /**
         * @param role The ROLE who is receiving the policy.  If this value is empty or not specified it implies the policy is referring to the [`PUBLIC` role](https://www.postgresql.org/docs/current/static/sql-grant.html).
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role The ROLE who is receiving the policy.  If this value is empty or not specified it implies the policy is referring to the [`PUBLIC` role](https://www.postgresql.org/docs/current/static/sql-grant.html).
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param usage Should the specified ROLE have USAGE privileges to the specified SCHEMA.
         * 
         * @return builder
         * 
         */
        public Builder usage(@Nullable Output<Boolean> usage) {
            $.usage = usage;
            return this;
        }

        /**
         * @param usage Should the specified ROLE have USAGE privileges to the specified SCHEMA.
         * 
         * @return builder
         * 
         */
        public Builder usage(Boolean usage) {
            return usage(Output.of(usage));
        }

        /**
         * @param usageWithGrant Should the specified ROLE have USAGE privileges to the specified SCHEMA and the ability to GRANT the USAGE privilege to other ROLEs.
         * 
         * &gt; **NOTE on `policy`:** The permissions of a role specified in multiple policy blocks is cumulative.  For example, if the same role is specified in two different `policy` each with different permissions (e.g. `create` and `usage_with_grant`, respectively), then the specified role with have both `create` and `usage_with_grant` privileges.
         * 
         * @return builder
         * 
         */
        public Builder usageWithGrant(@Nullable Output<Boolean> usageWithGrant) {
            $.usageWithGrant = usageWithGrant;
            return this;
        }

        /**
         * @param usageWithGrant Should the specified ROLE have USAGE privileges to the specified SCHEMA and the ability to GRANT the USAGE privilege to other ROLEs.
         * 
         * &gt; **NOTE on `policy`:** The permissions of a role specified in multiple policy blocks is cumulative.  For example, if the same role is specified in two different `policy` each with different permissions (e.g. `create` and `usage_with_grant`, respectively), then the specified role with have both `create` and `usage_with_grant` privileges.
         * 
         * @return builder
         * 
         */
        public Builder usageWithGrant(Boolean usageWithGrant) {
            return usageWithGrant(Output.of(usageWithGrant));
        }

        public SchemaPolicyArgs build() {
            return $;
        }
    }

}
