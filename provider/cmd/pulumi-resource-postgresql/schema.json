{
    "name": "postgresql",
    "description": "A Pulumi package for creating and managing postgresql cloud resources.",
    "keywords": [
        "pulumi",
        "postgresql"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`postgresql` Terraform Provider](https://github.com/terraform-providers/terraform-provider-postgresql).",
    "repository": "https://github.com/pulumi/pulumi-postgresql",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "clientcert": {
                "$ref": "#/types/postgresql:config/clientcert:clientcert",
                "description": "SSL client certificate if required by the database.\n"
            },
            "connectTimeout": {
                "type": "integer",
                "description": "Maximum wait for connection, in seconds. Zero or not specified means wait indefinitely.\n",
                "default": 180,
                "defaultInfo": {
                    "environment": [
                        "PGCONNECT_TIMEOUT"
                    ]
                }
            },
            "database": {
                "type": "string",
                "description": "The name of the database to connect to in order to conenct to (defaults to `postgres`).\n",
                "default": "postgres",
                "defaultInfo": {
                    "environment": [
                        "PGDATABASE"
                    ]
                }
            },
            "databaseUsername": {
                "type": "string",
                "description": "Database username associated to the connected user (for user name maps)\n"
            },
            "expectedVersion": {
                "type": "string",
                "description": "Specify the expected version of PostgreSQL.\n"
            },
            "host": {
                "type": "string",
                "description": "Name of PostgreSQL server address to connect to\n",
                "defaultInfo": {
                    "environment": [
                        "PGHOST"
                    ]
                }
            },
            "maxConnections": {
                "type": "integer",
                "description": "Maximum number of connections to establish to the database. Zero means unlimited.\n"
            },
            "password": {
                "type": "string",
                "description": "Password to be used if the PostgreSQL server demands password authentication\n",
                "defaultInfo": {
                    "environment": [
                        "PGPASSWORD"
                    ]
                }
            },
            "port": {
                "type": "integer",
                "description": "The PostgreSQL port number to connect to at the server host, or socket file name extension for Unix-domain connections\n",
                "default": 5432,
                "defaultInfo": {
                    "environment": [
                        "PGPORT"
                    ]
                }
            },
            "sslMode": {
                "type": "string",
                "deprecationMessage": "Rename PostgreSQL provider `ssl_mode` attribute to `sslmode`"
            },
            "sslmode": {
                "type": "string",
                "description": "This option determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the\nPostgreSQL server\n",
                "defaultInfo": {
                    "environment": [
                        "PGSSLMODE"
                    ]
                }
            },
            "sslrootcert": {
                "type": "string",
                "description": "The SSL server root certificate file path. The file must contain PEM encoded data.\n"
            },
            "superuser": {
                "type": "boolean",
                "description": "Specify if the user to connect as is a Postgres superuser or not.If not, some feature might be disabled (e.g.:\nRefreshing state password from Postgres)\n"
            },
            "username": {
                "type": "string",
                "description": "PostgreSQL user name to connect as\n",
                "default": "postgres",
                "defaultInfo": {
                    "environment": [
                        "PGUSER"
                    ]
                }
            }
        }
    },
    "types": {
        "postgresql:config/clientcert:clientcert": {
            "properties": {
                "cert": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "cert",
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "postgresql:index/ProviderClientcert:ProviderClientcert": {
            "properties": {
                "cert": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cert",
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": []
                }
            }
        },
        "postgresql:index/SchemaPolicy:SchemaPolicy": {
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Should the specified ROLE have CREATE privileges to the specified SCHEMA.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createWithGrant": {
                    "type": "boolean",
                    "description": "Should the specified ROLE have CREATE privileges to the specified SCHEMA and the ability to GRANT the CREATE privilege to other ROLEs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "role": {
                    "type": "string",
                    "description": "The ROLE who is receiving the policy.  If this value is empty or not specified it implies the policy is referring to the [`PUBLIC` role](https://www.postgresql.org/docs/current/static/sql-grant.html).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usage": {
                    "type": "boolean",
                    "description": "Should the specified ROLE have USAGE privileges to the specified SCHEMA.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usageWithGrant": {
                    "type": "boolean",
                    "description": "Should the specified ROLE have USAGE privileges to the specified SCHEMA and the ability to GRANT the USAGE privilege to other ROLEs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        }
    },
    "provider": {
        "description": "The provider type for the postgresql package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "inputProperties": {
            "clientcert": {
                "$ref": "#/types/postgresql:index/ProviderClientcert:ProviderClientcert",
                "description": "SSL client certificate if required by the database.\n"
            },
            "connectTimeout": {
                "type": "integer",
                "description": "Maximum wait for connection, in seconds. Zero or not specified means wait indefinitely.\n",
                "default": 180,
                "defaultInfo": {
                    "environment": [
                        "PGCONNECT_TIMEOUT"
                    ]
                }
            },
            "database": {
                "type": "string",
                "description": "The name of the database to connect to in order to conenct to (defaults to `postgres`).\n",
                "default": "postgres",
                "defaultInfo": {
                    "environment": [
                        "PGDATABASE"
                    ]
                }
            },
            "databaseUsername": {
                "type": "string",
                "description": "Database username associated to the connected user (for user name maps)\n"
            },
            "expectedVersion": {
                "type": "string",
                "description": "Specify the expected version of PostgreSQL.\n"
            },
            "host": {
                "type": "string",
                "description": "Name of PostgreSQL server address to connect to\n",
                "defaultInfo": {
                    "environment": [
                        "PGHOST"
                    ]
                }
            },
            "maxConnections": {
                "type": "integer",
                "description": "Maximum number of connections to establish to the database. Zero means unlimited.\n"
            },
            "password": {
                "type": "string",
                "description": "Password to be used if the PostgreSQL server demands password authentication\n",
                "defaultInfo": {
                    "environment": [
                        "PGPASSWORD"
                    ]
                }
            },
            "port": {
                "type": "integer",
                "description": "The PostgreSQL port number to connect to at the server host, or socket file name extension for Unix-domain connections\n",
                "default": 5432,
                "defaultInfo": {
                    "environment": [
                        "PGPORT"
                    ]
                }
            },
            "sslMode": {
                "type": "string",
                "deprecationMessage": "Rename PostgreSQL provider `ssl_mode` attribute to `sslmode`"
            },
            "sslmode": {
                "type": "string",
                "description": "This option determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the\nPostgreSQL server\n",
                "defaultInfo": {
                    "environment": [
                        "PGSSLMODE"
                    ]
                }
            },
            "sslrootcert": {
                "type": "string",
                "description": "The SSL server root certificate file path. The file must contain PEM encoded data.\n"
            },
            "superuser": {
                "type": "boolean",
                "description": "Specify if the user to connect as is a Postgres superuser or not.If not, some feature might be disabled (e.g.:\nRefreshing state password from Postgres)\n"
            },
            "username": {
                "type": "string",
                "description": "PostgreSQL user name to connect as\n",
                "default": "postgres",
                "defaultInfo": {
                    "environment": [
                        "PGUSER"
                    ]
                }
            }
        }
    },
    "resources": {
        "postgresql:index/database:Database": {
            "properties": {
                "allowConnections": {
                    "type": "boolean",
                    "description": "If `false` then no one can connect to this\ndatabase. The default is `true`, allowing connections (except as restricted by\nother mechanisms, such as `GRANT` or `REVOKE CONNECT`).\n"
                },
                "connectionLimit": {
                    "type": "integer",
                    "description": "How many concurrent connections can be\nestablished to this database. `-1` (the default) means no limit.\n"
                },
                "encoding": {
                    "type": "string",
                    "description": "Character set encoding to use in the new database\n"
                },
                "isTemplate": {
                    "type": "boolean",
                    "description": "If `true`, then this database can be cloned by any\nuser with `CREATEDB` privileges; if `false` (the default), then only\nsuperusers or the owner of the database can clone it.\n"
                },
                "lcCollate": {
                    "type": "string",
                    "description": "Collation order (LC_COLLATE) to use in the new database\n"
                },
                "lcCtype": {
                    "type": "string",
                    "description": "Character classification (LC_CTYPE) to use in the new database\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the database. Must be unique on the PostgreSQL\nserver instance where it is configured.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The role name of the user who will own the database, or\n`DEFAULT` to use the default (namely, the user executing the command). To\ncreate a database owned by another role or to change the owner of an existing\ndatabase, you must be a direct or indirect member of the specified role, or\nthe username in the provider is a superuser.\n"
                },
                "tablespaceName": {
                    "type": "string",
                    "description": "The name of the tablespace that will be\nassociated with the database, or `DEFAULT` to use the template database's\ntablespace.  This tablespace will be the default tablespace used for objects\ncreated in this database.\n"
                },
                "template": {
                    "type": "string",
                    "description": "The name of the template from which to create the new database\n"
                }
            },
            "required": [
                "encoding",
                "isTemplate",
                "lcCollate",
                "lcCtype",
                "name",
                "owner",
                "tablespaceName",
                "template"
            ],
            "inputProperties": {
                "allowConnections": {
                    "type": "boolean",
                    "description": "If `false` then no one can connect to this\ndatabase. The default is `true`, allowing connections (except as restricted by\nother mechanisms, such as `GRANT` or `REVOKE CONNECT`).\n"
                },
                "connectionLimit": {
                    "type": "integer",
                    "description": "How many concurrent connections can be\nestablished to this database. `-1` (the default) means no limit.\n"
                },
                "encoding": {
                    "type": "string",
                    "description": "Character set encoding to use in the new database\n"
                },
                "isTemplate": {
                    "type": "boolean",
                    "description": "If `true`, then this database can be cloned by any\nuser with `CREATEDB` privileges; if `false` (the default), then only\nsuperusers or the owner of the database can clone it.\n"
                },
                "lcCollate": {
                    "type": "string",
                    "description": "Collation order (LC_COLLATE) to use in the new database\n"
                },
                "lcCtype": {
                    "type": "string",
                    "description": "Character classification (LC_CTYPE) to use in the new database\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the database. Must be unique on the PostgreSQL\nserver instance where it is configured.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The role name of the user who will own the database, or\n`DEFAULT` to use the default (namely, the user executing the command). To\ncreate a database owned by another role or to change the owner of an existing\ndatabase, you must be a direct or indirect member of the specified role, or\nthe username in the provider is a superuser.\n"
                },
                "tablespaceName": {
                    "type": "string",
                    "description": "The name of the tablespace that will be\nassociated with the database, or `DEFAULT` to use the template database's\ntablespace.  This tablespace will be the default tablespace used for objects\ncreated in this database.\n"
                },
                "template": {
                    "type": "string",
                    "description": "The name of the template from which to create the new database\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Database resources.\n",
                "properties": {
                    "allowConnections": {
                        "type": "boolean",
                        "description": "If `false` then no one can connect to this\ndatabase. The default is `true`, allowing connections (except as restricted by\nother mechanisms, such as `GRANT` or `REVOKE CONNECT`).\n"
                    },
                    "connectionLimit": {
                        "type": "integer",
                        "description": "How many concurrent connections can be\nestablished to this database. `-1` (the default) means no limit.\n"
                    },
                    "encoding": {
                        "type": "string",
                        "description": "Character set encoding to use in the new database\n"
                    },
                    "isTemplate": {
                        "type": "boolean",
                        "description": "If `true`, then this database can be cloned by any\nuser with `CREATEDB` privileges; if `false` (the default), then only\nsuperusers or the owner of the database can clone it.\n"
                    },
                    "lcCollate": {
                        "type": "string",
                        "description": "Collation order (LC_COLLATE) to use in the new database\n"
                    },
                    "lcCtype": {
                        "type": "string",
                        "description": "Character classification (LC_CTYPE) to use in the new database\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the database. Must be unique on the PostgreSQL\nserver instance where it is configured.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The role name of the user who will own the database, or\n`DEFAULT` to use the default (namely, the user executing the command). To\ncreate a database owned by another role or to change the owner of an existing\ndatabase, you must be a direct or indirect member of the specified role, or\nthe username in the provider is a superuser.\n"
                    },
                    "tablespaceName": {
                        "type": "string",
                        "description": "The name of the tablespace that will be\nassociated with the database, or `DEFAULT` to use the template database's\ntablespace.  This tablespace will be the default tablespace used for objects\ncreated in this database.\n"
                    },
                    "template": {
                        "type": "string",
                        "description": "The name of the template from which to create the new database\n"
                    }
                },
                "type": "object"
            }
        },
        "postgresql:index/defaultPrivileg:DefaultPrivileg": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "The database to grant default privileges for this role\n"
                },
                "objectType": {
                    "type": "string",
                    "description": "The PostgreSQL object type to set the default privileges on (one of: table, sequence, function, type)\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Target role for which to alter default privileges.\n"
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of privileges to apply as default privileges\n"
                },
                "role": {
                    "type": "string",
                    "description": "The name of the role to which grant default privileges on\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The database schema to set default privileges for this role\n"
                }
            },
            "required": [
                "database",
                "objectType",
                "owner",
                "privileges",
                "role",
                "schema"
            ],
            "inputProperties": {
                "database": {
                    "type": "string",
                    "description": "The database to grant default privileges for this role\n"
                },
                "objectType": {
                    "type": "string",
                    "description": "The PostgreSQL object type to set the default privileges on (one of: table, sequence, function, type)\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Target role for which to alter default privileges.\n"
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of privileges to apply as default privileges\n"
                },
                "role": {
                    "type": "string",
                    "description": "The name of the role to which grant default privileges on\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The database schema to set default privileges for this role\n"
                }
            },
            "requiredInputs": [
                "database",
                "objectType",
                "owner",
                "privileges",
                "role",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DefaultPrivileg resources.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The database to grant default privileges for this role\n"
                    },
                    "objectType": {
                        "type": "string",
                        "description": "The PostgreSQL object type to set the default privileges on (one of: table, sequence, function, type)\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Target role for which to alter default privileges.\n"
                    },
                    "privileges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of privileges to apply as default privileges\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The name of the role to which grant default privileges on\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The database schema to set default privileges for this role\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "postgresql.DefaultPrivileg has been deprecated in favor of postgresql.DefaultPrivileges"
        },
        "postgresql:index/defaultPrivileges:DefaultPrivileges": {
            "description": "The ``postgresql.DefaultPrivileges`` resource creates and manages default privileges given to a user for a database schema.\n\n\u003e **Note:** This resource needs Postgresql version 9 or above.\n\n## Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as postgresql from \"@pulumi/postgresql\";\n\nconst readOnlyTables = new postgresql.DefaultPrivileges(\"read_only_tables\", {\n    database: \"test_db\",\n    objectType: \"table\",\n    owner: \"db_owner\",\n    privileges: [\"SELECT\"],\n    role: \"test_role\",\n    schema: \"public\",\n});\n```\n```python\nimport pulumi\nimport pulumi_postgresql as postgresql\n\nread_only_tables = postgresql.DefaultPrivileges(\"readOnlyTables\",\n    database=\"test_db\",\n    object_type=\"table\",\n    owner=\"db_owner\",\n    privileges=[\"SELECT\"],\n    role=\"test_role\",\n    schema=\"public\")\n```\n```csharp\nusing Pulumi;\nusing PostgreSql = Pulumi.PostgreSql;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var readOnlyTables = new PostgreSql.DefaultPrivileges(\"readOnlyTables\", new PostgreSql.DefaultPrivilegesArgs\n        {\n            Database = \"test_db\",\n            ObjectType = \"table\",\n            Owner = \"db_owner\",\n            Privileges = \n            {\n                \"SELECT\",\n            },\n            Role = \"test_role\",\n            Schema = \"public\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-postgresql/sdk/v2/go/postgresql\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := postgresql.NewDefaultPrivileges(ctx, \"readOnlyTables\", \u0026postgresql.DefaultPrivilegesArgs{\n\t\t\tDatabase:   pulumi.String(\"test_db\"),\n\t\t\tObjectType: pulumi.String(\"table\"),\n\t\t\tOwner:      pulumi.String(\"db_owner\"),\n\t\t\tPrivileges: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"SELECT\"),\n\t\t\t},\n\t\t\tRole:   pulumi.String(\"test_role\"),\n\t\t\tSchema: pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n",
            "properties": {
                "database": {
                    "type": "string",
                    "description": "The database to grant default privileges for this role.\n"
                },
                "objectType": {
                    "type": "string",
                    "description": "The PostgreSQL object type to set the default privileges on (one of: table, sequence, function, type).\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Role for which apply default privileges (You can change default privileges only for objects that will be created by yourself or by roles that you are a member of).\n"
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of privileges to apply as default privileges.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The name of the role to which grant default privileges on.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The database schema to set default privileges for this role.\n"
                }
            },
            "required": [
                "database",
                "objectType",
                "owner",
                "privileges",
                "role",
                "schema"
            ],
            "inputProperties": {
                "database": {
                    "type": "string",
                    "description": "The database to grant default privileges for this role.\n"
                },
                "objectType": {
                    "type": "string",
                    "description": "The PostgreSQL object type to set the default privileges on (one of: table, sequence, function, type).\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Role for which apply default privileges (You can change default privileges only for objects that will be created by yourself or by roles that you are a member of).\n"
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of privileges to apply as default privileges.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The name of the role to which grant default privileges on.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The database schema to set default privileges for this role.\n"
                }
            },
            "requiredInputs": [
                "database",
                "objectType",
                "owner",
                "privileges",
                "role",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DefaultPrivileges resources.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The database to grant default privileges for this role.\n"
                    },
                    "objectType": {
                        "type": "string",
                        "description": "The PostgreSQL object type to set the default privileges on (one of: table, sequence, function, type).\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Role for which apply default privileges (You can change default privileges only for objects that will be created by yourself or by roles that you are a member of).\n"
                    },
                    "privileges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of privileges to apply as default privileges.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The name of the role to which grant default privileges on.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The database schema to set default privileges for this role.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "postgresql:index/defaultPrivileg:DefaultPrivileg"
                }
            ]
        },
        "postgresql:index/extension:Extension": {
            "description": "The ``postgresql.Extension`` resource creates and manages an extension on a PostgreSQL\nserver.\n\n\n## Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as postgresql from \"@pulumi/postgresql\";\n\nconst myExtension = new postgresql.Extension(\"my_extension\", {});\n```\n```python\nimport pulumi\nimport pulumi_postgresql as postgresql\n\nmy_extension = postgresql.Extension(\"myExtension\")\n```\n```csharp\nusing Pulumi;\nusing PostgreSql = Pulumi.PostgreSql;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myExtension = new PostgreSql.Extension(\"myExtension\", new PostgreSql.ExtensionArgs\n        {\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-postgresql/sdk/v2/go/postgresql\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := postgresql.NewExtension(ctx, \"myExtension\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n",
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Which database to create the extension on. Defaults to provider database.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the extension.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Sets the schema of an extension.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Sets the version number of the extension.\n"
                }
            },
            "required": [
                "database",
                "name",
                "schema",
                "version"
            ],
            "inputProperties": {
                "database": {
                    "type": "string",
                    "description": "Which database to create the extension on. Defaults to provider database.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the extension.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Sets the schema of an extension.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Sets the version number of the extension.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Extension resources.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "Which database to create the extension on. Defaults to provider database.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the extension.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "Sets the schema of an extension.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Sets the version number of the extension.\n"
                    }
                },
                "type": "object"
            }
        },
        "postgresql:index/grant:Grant": {
            "description": "The ``postgresql.Grant`` resource creates and manages privileges given to a user for a database schema.\n\nSee [PostgreSQL documentation](https://www.postgresql.org/docs/current/sql-grant.html)\n\n\u003e **Note:** This resource needs Postgresql version 9 or above.\n\n## Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as postgresql from \"@pulumi/postgresql\";\n\nconst readonlyTables = new postgresql.Grant(\"readonly_tables\", {\n    database: \"test_db\",\n    objectType: \"table\",\n    privileges: [\"SELECT\"],\n    role: \"test_role\",\n    schema: \"public\",\n});\n```\n```python\nimport pulumi\nimport pulumi_postgresql as postgresql\n\nreadonly_tables = postgresql.Grant(\"readonlyTables\",\n    database=\"test_db\",\n    object_type=\"table\",\n    privileges=[\"SELECT\"],\n    role=\"test_role\",\n    schema=\"public\")\n```\n```csharp\nusing Pulumi;\nusing PostgreSql = Pulumi.PostgreSql;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var readonlyTables = new PostgreSql.Grant(\"readonlyTables\", new PostgreSql.GrantArgs\n        {\n            Database = \"test_db\",\n            ObjectType = \"table\",\n            Privileges = \n            {\n                \"SELECT\",\n            },\n            Role = \"test_role\",\n            Schema = \"public\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-postgresql/sdk/v2/go/postgresql\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := postgresql.NewGrant(ctx, \"readonlyTables\", \u0026postgresql.GrantArgs{\n\t\t\tDatabase:   pulumi.String(\"test_db\"),\n\t\t\tObjectType: pulumi.String(\"table\"),\n\t\t\tPrivileges: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"SELECT\"),\n\t\t\t},\n\t\t\tRole:   pulumi.String(\"test_role\"),\n\t\t\tSchema: pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n",
            "properties": {
                "database": {
                    "type": "string",
                    "description": "The database to grant privileges on for this role.\n"
                },
                "objectType": {
                    "type": "string",
                    "description": "The PostgreSQL object type to grant the privileges on (one of: database, table, sequence,function).\n"
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of privileges to grant. There are different kinds of privileges: SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER, CREATE, CONNECT, TEMPORARY, EXECUTE, and USAGE.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The name of the role to grant privileges on.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The database schema to grant privileges on for this role.\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "Permit the grant recipient to grant it to others\n"
                }
            },
            "required": [
                "database",
                "objectType",
                "privileges",
                "role"
            ],
            "inputProperties": {
                "database": {
                    "type": "string",
                    "description": "The database to grant privileges on for this role.\n"
                },
                "objectType": {
                    "type": "string",
                    "description": "The PostgreSQL object type to grant the privileges on (one of: database, table, sequence,function).\n"
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of privileges to grant. There are different kinds of privileges: SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER, CREATE, CONNECT, TEMPORARY, EXECUTE, and USAGE.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The name of the role to grant privileges on.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The database schema to grant privileges on for this role.\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "Permit the grant recipient to grant it to others\n"
                }
            },
            "requiredInputs": [
                "database",
                "objectType",
                "privileges",
                "role"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Grant resources.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The database to grant privileges on for this role.\n"
                    },
                    "objectType": {
                        "type": "string",
                        "description": "The PostgreSQL object type to grant the privileges on (one of: database, table, sequence,function).\n"
                    },
                    "privileges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of privileges to grant. There are different kinds of privileges: SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER, CREATE, CONNECT, TEMPORARY, EXECUTE, and USAGE.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The name of the role to grant privileges on.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The database schema to grant privileges on for this role.\n"
                    },
                    "withGrantOption": {
                        "type": "boolean",
                        "description": "Permit the grant recipient to grant it to others\n"
                    }
                },
                "type": "object"
            }
        },
        "postgresql:index/role:Role": {
            "properties": {
                "bypassRowLevelSecurity": {
                    "type": "boolean",
                    "description": "Defines whether a role bypasses every\nrow-level security (RLS) policy.  Default value is `false`.\n"
                },
                "connectionLimit": {
                    "type": "integer",
                    "description": "If this role can log in, this specifies how\nmany concurrent connections the role can establish. `-1` (the default) means no\nlimit.\n"
                },
                "createDatabase": {
                    "type": "boolean",
                    "description": "Defines a role's ability to execute `CREATE\nDATABASE`.  Default value is `false`.\n"
                },
                "createRole": {
                    "type": "boolean",
                    "description": "Defines a role's ability to execute `CREATE ROLE`.\nA role with this privilege can also alter and drop other roles.  Default value\nis `false`.\n"
                },
                "encrypted": {
                    "type": "string",
                    "deprecationMessage": "Rename PostgreSQL role resource attribute \"encrypted\" to \"encrypted_password\""
                },
                "encryptedPassword": {
                    "type": "boolean",
                    "description": "Defines whether the password is stored\nencrypted in the system catalogs.  Default value is `true`.  NOTE: this value\nis always set (to the conservative and safe value), but may interfere with the\nbehavior of\n[PostgreSQL's `password_encryption` setting](https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION).\n"
                },
                "inherit": {
                    "type": "boolean",
                    "description": "Defines whether a role \"inherits\" the privileges of\nroles it is a member of.  Default value is `true`.\n"
                },
                "login": {
                    "type": "boolean",
                    "description": "Defines whether role is allowed to log in.  Roles without\nthis attribute are useful for managing database privileges, but are not users\nin the usual sense of the word.  Default value is `false`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the role. Must be unique on the PostgreSQL\nserver instance where it is configured.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Sets the role's password. A password is only of use\nfor roles having the `login` attribute set to true.\n"
                },
                "replication": {
                    "type": "boolean",
                    "description": "Defines whether a role is allowed to initiate\nstreaming replication or put the system in and out of backup mode.  Default\nvalue is `false`\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Defines list of roles which will be granted to this new role.\n"
                },
                "searchPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Alters the search path of this new role. Note that\ndue to limitations in the implementation, values cannot contain the substring\n`\", \"`.\n"
                },
                "skipDropRole": {
                    "type": "boolean",
                    "description": "When a PostgreSQL ROLE exists in multiple\ndatabases and the ROLE is dropped, the\n[cleanup of ownership of objects](https://www.postgresql.org/docs/current/static/role-removal.html)\nin each of the respective databases must occur before the ROLE can be dropped\nfrom the catalog.  Set this option to true when there are multiple databases\nin a PostgreSQL cluster using the same PostgreSQL ROLE for object ownership.\nThis is the third and final step taken when removing a ROLE from a database.\n"
                },
                "skipReassignOwned": {
                    "type": "boolean",
                    "description": "When a PostgreSQL ROLE exists in multiple\ndatabases and the ROLE is dropped, a\n[`REASSIGN OWNED`](https://www.postgresql.org/docs/current/static/sql-reassign-owned.html) in\nmust be executed on each of the respective databases before the `DROP ROLE`\ncan be executed to dropped the ROLE from the catalog.  This is the first and\nsecond steps taken when removing a ROLE from a database (the second step being\nan implicit\n[`DROP OWNED`](https://www.postgresql.org/docs/current/static/sql-drop-owned.html)).\n"
                },
                "statementTimeout": {
                    "type": "integer",
                    "description": "Defines [`statement_timeout`](https://www.postgresql.org/docs/current/runtime-config-client.html#RUNTIME-CONFIG-CLIENT-STATEMENT) setting for this role which allows to abort any statement that takes more than the specified amount of time.\n"
                },
                "superuser": {
                    "type": "boolean",
                    "description": "Defines whether the role is a \"superuser\", and\ntherefore can override all access restrictions within the database.  Default\nvalue is `false`.\n"
                },
                "validUntil": {
                    "type": "string",
                    "description": "Defines the date and time after which the role's\npassword is no longer valid.  Established connections past this `valid_time`\nwill have to be manually terminated.  This value corresponds to a PostgreSQL\ndatetime. If omitted or the magic value `NULL` is used, `valid_until` will be\nset to `infinity`.  Default is `NULL`, therefore `infinity`.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "bypassRowLevelSecurity": {
                    "type": "boolean",
                    "description": "Defines whether a role bypasses every\nrow-level security (RLS) policy.  Default value is `false`.\n"
                },
                "connectionLimit": {
                    "type": "integer",
                    "description": "If this role can log in, this specifies how\nmany concurrent connections the role can establish. `-1` (the default) means no\nlimit.\n"
                },
                "createDatabase": {
                    "type": "boolean",
                    "description": "Defines a role's ability to execute `CREATE\nDATABASE`.  Default value is `false`.\n"
                },
                "createRole": {
                    "type": "boolean",
                    "description": "Defines a role's ability to execute `CREATE ROLE`.\nA role with this privilege can also alter and drop other roles.  Default value\nis `false`.\n"
                },
                "encrypted": {
                    "type": "string",
                    "deprecationMessage": "Rename PostgreSQL role resource attribute \"encrypted\" to \"encrypted_password\""
                },
                "encryptedPassword": {
                    "type": "boolean",
                    "description": "Defines whether the password is stored\nencrypted in the system catalogs.  Default value is `true`.  NOTE: this value\nis always set (to the conservative and safe value), but may interfere with the\nbehavior of\n[PostgreSQL's `password_encryption` setting](https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION).\n"
                },
                "inherit": {
                    "type": "boolean",
                    "description": "Defines whether a role \"inherits\" the privileges of\nroles it is a member of.  Default value is `true`.\n"
                },
                "login": {
                    "type": "boolean",
                    "description": "Defines whether role is allowed to log in.  Roles without\nthis attribute are useful for managing database privileges, but are not users\nin the usual sense of the word.  Default value is `false`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the role. Must be unique on the PostgreSQL\nserver instance where it is configured.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Sets the role's password. A password is only of use\nfor roles having the `login` attribute set to true.\n"
                },
                "replication": {
                    "type": "boolean",
                    "description": "Defines whether a role is allowed to initiate\nstreaming replication or put the system in and out of backup mode.  Default\nvalue is `false`\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Defines list of roles which will be granted to this new role.\n"
                },
                "searchPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Alters the search path of this new role. Note that\ndue to limitations in the implementation, values cannot contain the substring\n`\", \"`.\n"
                },
                "skipDropRole": {
                    "type": "boolean",
                    "description": "When a PostgreSQL ROLE exists in multiple\ndatabases and the ROLE is dropped, the\n[cleanup of ownership of objects](https://www.postgresql.org/docs/current/static/role-removal.html)\nin each of the respective databases must occur before the ROLE can be dropped\nfrom the catalog.  Set this option to true when there are multiple databases\nin a PostgreSQL cluster using the same PostgreSQL ROLE for object ownership.\nThis is the third and final step taken when removing a ROLE from a database.\n"
                },
                "skipReassignOwned": {
                    "type": "boolean",
                    "description": "When a PostgreSQL ROLE exists in multiple\ndatabases and the ROLE is dropped, a\n[`REASSIGN OWNED`](https://www.postgresql.org/docs/current/static/sql-reassign-owned.html) in\nmust be executed on each of the respective databases before the `DROP ROLE`\ncan be executed to dropped the ROLE from the catalog.  This is the first and\nsecond steps taken when removing a ROLE from a database (the second step being\nan implicit\n[`DROP OWNED`](https://www.postgresql.org/docs/current/static/sql-drop-owned.html)).\n"
                },
                "statementTimeout": {
                    "type": "integer",
                    "description": "Defines [`statement_timeout`](https://www.postgresql.org/docs/current/runtime-config-client.html#RUNTIME-CONFIG-CLIENT-STATEMENT) setting for this role which allows to abort any statement that takes more than the specified amount of time.\n"
                },
                "superuser": {
                    "type": "boolean",
                    "description": "Defines whether the role is a \"superuser\", and\ntherefore can override all access restrictions within the database.  Default\nvalue is `false`.\n"
                },
                "validUntil": {
                    "type": "string",
                    "description": "Defines the date and time after which the role's\npassword is no longer valid.  Established connections past this `valid_time`\nwill have to be manually terminated.  This value corresponds to a PostgreSQL\ndatetime. If omitted or the magic value `NULL` is used, `valid_until` will be\nset to `infinity`.  Default is `NULL`, therefore `infinity`.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Role resources.\n",
                "properties": {
                    "bypassRowLevelSecurity": {
                        "type": "boolean",
                        "description": "Defines whether a role bypasses every\nrow-level security (RLS) policy.  Default value is `false`.\n"
                    },
                    "connectionLimit": {
                        "type": "integer",
                        "description": "If this role can log in, this specifies how\nmany concurrent connections the role can establish. `-1` (the default) means no\nlimit.\n"
                    },
                    "createDatabase": {
                        "type": "boolean",
                        "description": "Defines a role's ability to execute `CREATE\nDATABASE`.  Default value is `false`.\n"
                    },
                    "createRole": {
                        "type": "boolean",
                        "description": "Defines a role's ability to execute `CREATE ROLE`.\nA role with this privilege can also alter and drop other roles.  Default value\nis `false`.\n"
                    },
                    "encrypted": {
                        "type": "string",
                        "deprecationMessage": "Rename PostgreSQL role resource attribute \"encrypted\" to \"encrypted_password\""
                    },
                    "encryptedPassword": {
                        "type": "boolean",
                        "description": "Defines whether the password is stored\nencrypted in the system catalogs.  Default value is `true`.  NOTE: this value\nis always set (to the conservative and safe value), but may interfere with the\nbehavior of\n[PostgreSQL's `password_encryption` setting](https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION).\n"
                    },
                    "inherit": {
                        "type": "boolean",
                        "description": "Defines whether a role \"inherits\" the privileges of\nroles it is a member of.  Default value is `true`.\n"
                    },
                    "login": {
                        "type": "boolean",
                        "description": "Defines whether role is allowed to log in.  Roles without\nthis attribute are useful for managing database privileges, but are not users\nin the usual sense of the word.  Default value is `false`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the role. Must be unique on the PostgreSQL\nserver instance where it is configured.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Sets the role's password. A password is only of use\nfor roles having the `login` attribute set to true.\n"
                    },
                    "replication": {
                        "type": "boolean",
                        "description": "Defines whether a role is allowed to initiate\nstreaming replication or put the system in and out of backup mode.  Default\nvalue is `false`\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Defines list of roles which will be granted to this new role.\n"
                    },
                    "searchPaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Alters the search path of this new role. Note that\ndue to limitations in the implementation, values cannot contain the substring\n`\", \"`.\n"
                    },
                    "skipDropRole": {
                        "type": "boolean",
                        "description": "When a PostgreSQL ROLE exists in multiple\ndatabases and the ROLE is dropped, the\n[cleanup of ownership of objects](https://www.postgresql.org/docs/current/static/role-removal.html)\nin each of the respective databases must occur before the ROLE can be dropped\nfrom the catalog.  Set this option to true when there are multiple databases\nin a PostgreSQL cluster using the same PostgreSQL ROLE for object ownership.\nThis is the third and final step taken when removing a ROLE from a database.\n"
                    },
                    "skipReassignOwned": {
                        "type": "boolean",
                        "description": "When a PostgreSQL ROLE exists in multiple\ndatabases and the ROLE is dropped, a\n[`REASSIGN OWNED`](https://www.postgresql.org/docs/current/static/sql-reassign-owned.html) in\nmust be executed on each of the respective databases before the `DROP ROLE`\ncan be executed to dropped the ROLE from the catalog.  This is the first and\nsecond steps taken when removing a ROLE from a database (the second step being\nan implicit\n[`DROP OWNED`](https://www.postgresql.org/docs/current/static/sql-drop-owned.html)).\n"
                    },
                    "statementTimeout": {
                        "type": "integer",
                        "description": "Defines [`statement_timeout`](https://www.postgresql.org/docs/current/runtime-config-client.html#RUNTIME-CONFIG-CLIENT-STATEMENT) setting for this role which allows to abort any statement that takes more than the specified amount of time.\n"
                    },
                    "superuser": {
                        "type": "boolean",
                        "description": "Defines whether the role is a \"superuser\", and\ntherefore can override all access restrictions within the database.  Default\nvalue is `false`.\n"
                    },
                    "validUntil": {
                        "type": "string",
                        "description": "Defines the date and time after which the role's\npassword is no longer valid.  Established connections past this `valid_time`\nwill have to be manually terminated.  This value corresponds to a PostgreSQL\ndatetime. If omitted or the magic value `NULL` is used, `valid_until` will be\nset to `infinity`.  Default is `NULL`, therefore `infinity`.\n"
                    }
                },
                "type": "object"
            }
        },
        "postgresql:index/schema:Schema": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "The DATABASE in which where this schema will be created. (Default: The database used by your `provider` configuration)\n"
                },
                "dropCascade": {
                    "type": "boolean",
                    "description": "When true, will also drop all the objects that are contained in the schema. (Default: false)\n"
                },
                "ifNotExists": {
                    "type": "boolean",
                    "description": "When true, use the existing schema if it exists. (Default: true)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the schema. Must be unique in the PostgreSQL\ndatabase instance where it is configured.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The ROLE who owns the schema.\n"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/postgresql:index/SchemaPolicy:SchemaPolicy"
                    },
                    "description": "Can be specified multiple times for each policy.  Each\npolicy block supports fields documented below.\n"
                }
            },
            "required": [
                "database",
                "name",
                "owner",
                "policies"
            ],
            "inputProperties": {
                "database": {
                    "type": "string",
                    "description": "The DATABASE in which where this schema will be created. (Default: The database used by your `provider` configuration)\n"
                },
                "dropCascade": {
                    "type": "boolean",
                    "description": "When true, will also drop all the objects that are contained in the schema. (Default: false)\n"
                },
                "ifNotExists": {
                    "type": "boolean",
                    "description": "When true, use the existing schema if it exists. (Default: true)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the schema. Must be unique in the PostgreSQL\ndatabase instance where it is configured.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The ROLE who owns the schema.\n"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/postgresql:index/SchemaPolicy:SchemaPolicy"
                    },
                    "description": "Can be specified multiple times for each policy.  Each\npolicy block supports fields documented below.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Schema resources.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The DATABASE in which where this schema will be created. (Default: The database used by your `provider` configuration)\n"
                    },
                    "dropCascade": {
                        "type": "boolean",
                        "description": "When true, will also drop all the objects that are contained in the schema. (Default: false)\n"
                    },
                    "ifNotExists": {
                        "type": "boolean",
                        "description": "When true, use the existing schema if it exists. (Default: true)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the schema. Must be unique in the PostgreSQL\ndatabase instance where it is configured.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The ROLE who owns the schema.\n"
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/postgresql:index/SchemaPolicy:SchemaPolicy"
                        },
                        "description": "Can be specified multiple times for each policy.  Each\npolicy block supports fields documented below.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "language": {
        "csharp": {
            "namespaces": {
                "postgresql": "PostgreSql"
            },
            "packageReferences": {
                "Pulumi": "2.*",
                "System.Collections.Immutable": "1.6.0"
            }
        },
        "nodejs": {
            "dependencies": {
                "@pulumi/pulumi": "^2.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^8.0.25"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing postgresql cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-postgresql)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-postgresql` repo](https://github.com/pulumi/pulumi-postgresql/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-providers/terraform-provider-postgresql` repo](https://github.com/terraform-providers/terraform-provider-postgresql/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-postgresql)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-postgresql` repo](https://github.com/pulumi/pulumi-postgresql/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-providers/terraform-provider-postgresql` repo](https://github.com/terraform-providers/terraform-provider-postgresql/issues).",
            "requires": {
                "pulumi": "\u003e=2.9.0,\u003c3.0.0"
            },
            "usesIOClasses": true
        }
    }
}