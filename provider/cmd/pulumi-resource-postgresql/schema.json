{
    "name": "postgresql",
    "description": "A Pulumi package for creating and managing postgresql cloud resources.",
    "keywords": [
        "pulumi",
        "postgresql"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`postgresql` Terraform Provider](https://github.com/cyrilgdn/terraform-provider-postgresql).",
    "repository": "https://github.com/pulumi/pulumi-postgresql",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "namespaces": {
                "postgresql": "PostgreSql"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-postgresql/sdk/v3/go/postgresql",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing postgresql cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/cyrilgdn/terraform-provider-postgresql)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-postgresql` repo](https://github.com/pulumi/pulumi-postgresql/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-postgresql` repo](https://github.com/cyrilgdn/terraform-provider-postgresql/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/cyrilgdn/terraform-provider-postgresql)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-postgresql` repo](https://github.com/pulumi/pulumi-postgresql/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-postgresql` repo](https://github.com/cyrilgdn/terraform-provider-postgresql/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "awsRdsIamAuth": {
                "type": "boolean",
                "description": "Use rds_iam instead of password authentication (see:\nhttps://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html)\n"
            },
            "awsRdsIamProfile": {
                "type": "string",
                "description": "AWS profile to use for IAM auth\n"
            },
            "awsRdsIamRegion": {
                "type": "string",
                "description": "AWS region to use for IAM auth\n"
            },
            "azureIdentityAuth": {
                "type": "boolean",
                "description": "Use MS Azure identity OAuth token (see:\nhttps://learn.microsoft.com/en-us/azure/postgresql/flexible-server/how-to-configure-sign-in-azure-ad-authentication)\n"
            },
            "azureTenantId": {
                "type": "string",
                "description": "MS Azure tenant ID (see:\nhttps://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/data-sources/client_config.html)\n"
            },
            "clientcert": {
                "$ref": "#/types/postgresql:config/clientcert:clientcert",
                "description": "SSL client certificate if required by the database.\n"
            },
            "connectTimeout": {
                "type": "integer",
                "description": "Maximum wait for connection, in seconds. Zero or not specified means wait indefinitely.\n",
                "default": 180,
                "defaultInfo": {
                    "environment": [
                        "PGCONNECT_TIMEOUT"
                    ]
                }
            },
            "database": {
                "type": "string",
                "description": "The name of the database to connect to in order to conenct to (defaults to `postgres`).\n"
            },
            "databaseUsername": {
                "type": "string",
                "description": "Database username associated to the connected user (for user name maps)\n"
            },
            "expectedVersion": {
                "type": "string",
                "description": "Specify the expected version of PostgreSQL.\n"
            },
            "host": {
                "type": "string",
                "description": "Name of PostgreSQL server address to connect to\n"
            },
            "maxConnections": {
                "type": "integer",
                "description": "Maximum number of connections to establish to the database. Zero means unlimited.\n"
            },
            "password": {
                "type": "string",
                "description": "Password to be used if the PostgreSQL server demands password authentication\n",
                "secret": true
            },
            "port": {
                "type": "integer",
                "description": "The PostgreSQL port number to connect to at the server host, or socket file name extension for Unix-domain connections\n"
            },
            "scheme": {
                "type": "string"
            },
            "sslMode": {
                "type": "string",
                "deprecationMessage": "Rename PostgreSQL provider `ssl_mode` attribute to `sslmode`"
            },
            "sslmode": {
                "type": "string",
                "description": "This option determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the\nPostgreSQL server\n",
                "defaultInfo": {
                    "environment": [
                        "PGSSLMODE"
                    ]
                }
            },
            "sslrootcert": {
                "type": "string",
                "description": "The SSL server root certificate file path. The file must contain PEM encoded data.\n"
            },
            "superuser": {
                "type": "boolean",
                "description": "Specify if the user to connect as is a Postgres superuser or not.If not, some feature might be disabled (e.g.:\nRefreshing state password from Postgres)\n"
            },
            "username": {
                "type": "string",
                "description": "PostgreSQL user name to connect as\n"
            }
        }
    },
    "types": {
        "postgresql:config/clientcert:clientcert": {
            "properties": {
                "cert": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "sslinline": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "cert",
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "postgresql:index/FunctionArg:FunctionArg": {
            "properties": {
                "default": {
                    "type": "string",
                    "description": "An expression to be used as default value if the parameter is not specified.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Can be one of IN, INOUT, OUT, or VARIADIC. Default is IN.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the argument.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The type of the argument.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "postgresql:index/ProviderClientcert:ProviderClientcert": {
            "properties": {
                "cert": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "sslinline": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "cert",
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": []
                }
            }
        },
        "postgresql:index/SchemaPolicy:SchemaPolicy": {
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Should the specified ROLE have CREATE privileges to the specified SCHEMA.\n"
                },
                "createWithGrant": {
                    "type": "boolean",
                    "description": "Should the specified ROLE have CREATE privileges to the specified SCHEMA and the ability to GRANT the CREATE privilege to other ROLEs.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The ROLE who is receiving the policy.  If this value is empty or not specified it implies the policy is referring to the [`PUBLIC` role](https://www.postgresql.org/docs/current/static/sql-grant.html).\n"
                },
                "usage": {
                    "type": "boolean",
                    "description": "Should the specified ROLE have USAGE privileges to the specified SCHEMA.\n"
                },
                "usageWithGrant": {
                    "type": "boolean",
                    "description": "Should the specified ROLE have USAGE privileges to the specified SCHEMA and the ability to GRANT the USAGE privilege to other ROLEs.\n\n\u003e **NOTE on `policy`:** The permissions of a role specified in multiple policy blocks is cumulative.  For example, if the same role is specified in two different `policy` each with different permissions (e.g. `create` and `usage_with_grant`, respectively), then the specified role with have both `create` and `usage_with_grant` privileges.\n"
                }
            },
            "type": "object"
        },
        "postgresql:index/getSequencesSequence:getSequencesSequence": {
            "properties": {
                "dataType": {
                    "type": "string",
                    "description": "The sequence's data type as defined in ``information_schema.sequences``.\n"
                },
                "objectName": {
                    "type": "string",
                    "description": "The sequence name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The parent schema.\n"
                }
            },
            "type": "object",
            "required": [
                "dataType",
                "objectName",
                "schemaName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "postgresql:index/getTablesTable:getTablesTable": {
            "properties": {
                "objectName": {
                    "type": "string",
                    "description": "The table name.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The parent schema.\n"
                },
                "tableType": {
                    "type": "string",
                    "description": "The table type as defined in ``information_schema.tables``.\n"
                }
            },
            "type": "object",
            "required": [
                "objectName",
                "schemaName",
                "tableType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the postgresql package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "awsRdsIamAuth": {
                "type": "boolean",
                "description": "Use rds_iam instead of password authentication (see:\nhttps://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html)\n"
            },
            "awsRdsIamProfile": {
                "type": "string",
                "description": "AWS profile to use for IAM auth\n"
            },
            "awsRdsIamRegion": {
                "type": "string",
                "description": "AWS region to use for IAM auth\n"
            },
            "azureIdentityAuth": {
                "type": "boolean",
                "description": "Use MS Azure identity OAuth token (see:\nhttps://learn.microsoft.com/en-us/azure/postgresql/flexible-server/how-to-configure-sign-in-azure-ad-authentication)\n"
            },
            "azureTenantId": {
                "type": "string",
                "description": "MS Azure tenant ID (see:\nhttps://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/data-sources/client_config.html)\n"
            },
            "clientcert": {
                "$ref": "#/types/postgresql:index/ProviderClientcert:ProviderClientcert",
                "description": "SSL client certificate if required by the database.\n"
            },
            "connectTimeout": {
                "type": "integer",
                "description": "Maximum wait for connection, in seconds. Zero or not specified means wait indefinitely.\n"
            },
            "database": {
                "type": "string",
                "description": "The name of the database to connect to in order to conenct to (defaults to `postgres`).\n"
            },
            "databaseUsername": {
                "type": "string",
                "description": "Database username associated to the connected user (for user name maps)\n"
            },
            "expectedVersion": {
                "type": "string",
                "description": "Specify the expected version of PostgreSQL.\n"
            },
            "host": {
                "type": "string",
                "description": "Name of PostgreSQL server address to connect to\n"
            },
            "maxConnections": {
                "type": "integer",
                "description": "Maximum number of connections to establish to the database. Zero means unlimited.\n"
            },
            "password": {
                "type": "string",
                "description": "Password to be used if the PostgreSQL server demands password authentication\n",
                "secret": true
            },
            "port": {
                "type": "integer",
                "description": "The PostgreSQL port number to connect to at the server host, or socket file name extension for Unix-domain connections\n"
            },
            "scheme": {
                "type": "string"
            },
            "sslMode": {
                "type": "string",
                "deprecationMessage": "Rename PostgreSQL provider `ssl_mode` attribute to `sslmode`"
            },
            "sslmode": {
                "type": "string",
                "description": "This option determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the\nPostgreSQL server\n"
            },
            "sslrootcert": {
                "type": "string",
                "description": "The SSL server root certificate file path. The file must contain PEM encoded data.\n"
            },
            "superuser": {
                "type": "boolean",
                "description": "Specify if the user to connect as is a Postgres superuser or not.If not, some feature might be disabled (e.g.:\nRefreshing state password from Postgres)\n"
            },
            "username": {
                "type": "string",
                "description": "PostgreSQL user name to connect as\n"
            }
        },
        "inputProperties": {
            "awsRdsIamAuth": {
                "type": "boolean",
                "description": "Use rds_iam instead of password authentication (see:\nhttps://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html)\n"
            },
            "awsRdsIamProfile": {
                "type": "string",
                "description": "AWS profile to use for IAM auth\n"
            },
            "awsRdsIamRegion": {
                "type": "string",
                "description": "AWS region to use for IAM auth\n"
            },
            "azureIdentityAuth": {
                "type": "boolean",
                "description": "Use MS Azure identity OAuth token (see:\nhttps://learn.microsoft.com/en-us/azure/postgresql/flexible-server/how-to-configure-sign-in-azure-ad-authentication)\n"
            },
            "azureTenantId": {
                "type": "string",
                "description": "MS Azure tenant ID (see:\nhttps://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/data-sources/client_config.html)\n"
            },
            "clientcert": {
                "$ref": "#/types/postgresql:index/ProviderClientcert:ProviderClientcert",
                "description": "SSL client certificate if required by the database.\n"
            },
            "connectTimeout": {
                "type": "integer",
                "description": "Maximum wait for connection, in seconds. Zero or not specified means wait indefinitely.\n",
                "default": 180,
                "defaultInfo": {
                    "environment": [
                        "PGCONNECT_TIMEOUT"
                    ]
                }
            },
            "database": {
                "type": "string",
                "description": "The name of the database to connect to in order to conenct to (defaults to `postgres`).\n"
            },
            "databaseUsername": {
                "type": "string",
                "description": "Database username associated to the connected user (for user name maps)\n"
            },
            "expectedVersion": {
                "type": "string",
                "description": "Specify the expected version of PostgreSQL.\n"
            },
            "host": {
                "type": "string",
                "description": "Name of PostgreSQL server address to connect to\n"
            },
            "maxConnections": {
                "type": "integer",
                "description": "Maximum number of connections to establish to the database. Zero means unlimited.\n"
            },
            "password": {
                "type": "string",
                "description": "Password to be used if the PostgreSQL server demands password authentication\n",
                "secret": true
            },
            "port": {
                "type": "integer",
                "description": "The PostgreSQL port number to connect to at the server host, or socket file name extension for Unix-domain connections\n"
            },
            "scheme": {
                "type": "string"
            },
            "sslMode": {
                "type": "string",
                "deprecationMessage": "Rename PostgreSQL provider `ssl_mode` attribute to `sslmode`"
            },
            "sslmode": {
                "type": "string",
                "description": "This option determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the\nPostgreSQL server\n",
                "defaultInfo": {
                    "environment": [
                        "PGSSLMODE"
                    ]
                }
            },
            "sslrootcert": {
                "type": "string",
                "description": "The SSL server root certificate file path. The file must contain PEM encoded data.\n"
            },
            "superuser": {
                "type": "boolean",
                "description": "Specify if the user to connect as is a Postgres superuser or not.If not, some feature might be disabled (e.g.:\nRefreshing state password from Postgres)\n"
            },
            "username": {
                "type": "string",
                "description": "PostgreSQL user name to connect as\n"
            }
        }
    },
    "resources": {
        "postgresql:index/database:Database": {
            "properties": {
                "allowConnections": {
                    "type": "boolean",
                    "description": "If `false` then no one can connect to this\ndatabase. The default is `true`, allowing connections (except as restricted by\nother mechanisms, such as `GRANT` or `REVOKE CONNECT`).\n"
                },
                "connectionLimit": {
                    "type": "integer",
                    "description": "How many concurrent connections can be\nestablished to this database. `-1` (the default) means no limit.\n"
                },
                "encoding": {
                    "type": "string",
                    "description": "Character set encoding to use in the new database\n"
                },
                "isTemplate": {
                    "type": "boolean",
                    "description": "If `true`, then this database can be cloned by any\nuser with `CREATEDB` privileges; if `false` (the default), then only\nsuperusers or the owner of the database can clone it.\n"
                },
                "lcCollate": {
                    "type": "string",
                    "description": "Collation order (LC_COLLATE) to use in the new database\n"
                },
                "lcCtype": {
                    "type": "string",
                    "description": "Character classification (LC_CTYPE) to use in the new database\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the database. Must be unique on the PostgreSQL\nserver instance where it is configured.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The role name of the user who will own the database, or\n`DEFAULT` to use the default (namely, the user executing the command). To\ncreate a database owned by another role or to change the owner of an existing\ndatabase, you must be a direct or indirect member of the specified role, or\nthe username in the provider is a superuser.\n"
                },
                "tablespaceName": {
                    "type": "string",
                    "description": "The name of the tablespace that will be\nassociated with the database, or `DEFAULT` to use the template database's\ntablespace.  This tablespace will be the default tablespace used for objects\ncreated in this database.\n"
                },
                "template": {
                    "type": "string",
                    "description": "The name of the template from which to create the new database\n"
                }
            },
            "required": [
                "encoding",
                "isTemplate",
                "lcCollate",
                "lcCtype",
                "name",
                "owner",
                "tablespaceName",
                "template"
            ],
            "inputProperties": {
                "allowConnections": {
                    "type": "boolean",
                    "description": "If `false` then no one can connect to this\ndatabase. The default is `true`, allowing connections (except as restricted by\nother mechanisms, such as `GRANT` or `REVOKE CONNECT`).\n"
                },
                "connectionLimit": {
                    "type": "integer",
                    "description": "How many concurrent connections can be\nestablished to this database. `-1` (the default) means no limit.\n"
                },
                "encoding": {
                    "type": "string",
                    "description": "Character set encoding to use in the new database\n",
                    "willReplaceOnChanges": true
                },
                "isTemplate": {
                    "type": "boolean",
                    "description": "If `true`, then this database can be cloned by any\nuser with `CREATEDB` privileges; if `false` (the default), then only\nsuperusers or the owner of the database can clone it.\n"
                },
                "lcCollate": {
                    "type": "string",
                    "description": "Collation order (LC_COLLATE) to use in the new database\n",
                    "willReplaceOnChanges": true
                },
                "lcCtype": {
                    "type": "string",
                    "description": "Character classification (LC_CTYPE) to use in the new database\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the database. Must be unique on the PostgreSQL\nserver instance where it is configured.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The role name of the user who will own the database, or\n`DEFAULT` to use the default (namely, the user executing the command). To\ncreate a database owned by another role or to change the owner of an existing\ndatabase, you must be a direct or indirect member of the specified role, or\nthe username in the provider is a superuser.\n"
                },
                "tablespaceName": {
                    "type": "string",
                    "description": "The name of the tablespace that will be\nassociated with the database, or `DEFAULT` to use the template database's\ntablespace.  This tablespace will be the default tablespace used for objects\ncreated in this database.\n"
                },
                "template": {
                    "type": "string",
                    "description": "The name of the template from which to create the new database\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Database resources.\n",
                "properties": {
                    "allowConnections": {
                        "type": "boolean",
                        "description": "If `false` then no one can connect to this\ndatabase. The default is `true`, allowing connections (except as restricted by\nother mechanisms, such as `GRANT` or `REVOKE CONNECT`).\n"
                    },
                    "connectionLimit": {
                        "type": "integer",
                        "description": "How many concurrent connections can be\nestablished to this database. `-1` (the default) means no limit.\n"
                    },
                    "encoding": {
                        "type": "string",
                        "description": "Character set encoding to use in the new database\n",
                        "willReplaceOnChanges": true
                    },
                    "isTemplate": {
                        "type": "boolean",
                        "description": "If `true`, then this database can be cloned by any\nuser with `CREATEDB` privileges; if `false` (the default), then only\nsuperusers or the owner of the database can clone it.\n"
                    },
                    "lcCollate": {
                        "type": "string",
                        "description": "Collation order (LC_COLLATE) to use in the new database\n",
                        "willReplaceOnChanges": true
                    },
                    "lcCtype": {
                        "type": "string",
                        "description": "Character classification (LC_CTYPE) to use in the new database\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the database. Must be unique on the PostgreSQL\nserver instance where it is configured.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The role name of the user who will own the database, or\n`DEFAULT` to use the default (namely, the user executing the command). To\ncreate a database owned by another role or to change the owner of an existing\ndatabase, you must be a direct or indirect member of the specified role, or\nthe username in the provider is a superuser.\n"
                    },
                    "tablespaceName": {
                        "type": "string",
                        "description": "The name of the tablespace that will be\nassociated with the database, or `DEFAULT` to use the template database's\ntablespace.  This tablespace will be the default tablespace used for objects\ncreated in this database.\n"
                    },
                    "template": {
                        "type": "string",
                        "description": "The name of the template from which to create the new database\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "postgresql:index/defaultPrivileg:DefaultPrivileg": {
            "description": "The ``postgresql.DefaultPrivileges`` resource creates and manages default privileges given to a user for a database schema.\n\n\u003e **Note:** This resource needs Postgresql version 9 or above.\n\n## Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as postgresql from \"@pulumi/postgresql\";\n\nconst readOnlyTables = new postgresql.DefaultPrivileges(\"readOnlyTables\", {\n    database: \"test_db\",\n    objectType: \"table\",\n    owner: \"db_owner\",\n    privileges: [\"SELECT\"],\n    role: \"test_role\",\n    schema: \"public\",\n});\n```\n```python\nimport pulumi\nimport pulumi_postgresql as postgresql\n\nread_only_tables = postgresql.DefaultPrivileges(\"readOnlyTables\",\n    database=\"test_db\",\n    object_type=\"table\",\n    owner=\"db_owner\",\n    privileges=[\"SELECT\"],\n    role=\"test_role\",\n    schema=\"public\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing PostgreSql = Pulumi.PostgreSql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var readOnlyTables = new PostgreSql.DefaultPrivileges(\"readOnlyTables\", new()\n    {\n        Database = \"test_db\",\n        ObjectType = \"table\",\n        Owner = \"db_owner\",\n        Privileges = new[]\n        {\n            \"SELECT\",\n        },\n        Role = \"test_role\",\n        Schema = \"public\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-postgresql/sdk/v3/go/postgresql\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := postgresql.NewDefaultPrivileges(ctx, \"readOnlyTables\", \u0026postgresql.DefaultPrivilegesArgs{\n\t\t\tDatabase:   pulumi.String(\"test_db\"),\n\t\t\tObjectType: pulumi.String(\"table\"),\n\t\t\tOwner:      pulumi.String(\"db_owner\"),\n\t\t\tPrivileges: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"SELECT\"),\n\t\t\t},\n\t\t\tRole:   pulumi.String(\"test_role\"),\n\t\t\tSchema: pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.postgresql.DefaultPrivileges;\nimport com.pulumi.postgresql.DefaultPrivilegesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var readOnlyTables = new DefaultPrivileges(\"readOnlyTables\", DefaultPrivilegesArgs.builder()        \n            .database(\"test_db\")\n            .objectType(\"table\")\n            .owner(\"db_owner\")\n            .privileges(\"SELECT\")\n            .role(\"test_role\")\n            .schema(\"public\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  readOnlyTables:\n    type: postgresql:DefaultPrivileges\n    properties:\n      database: test_db\n      objectType: table\n      owner: db_owner\n      privileges:\n        - SELECT\n      role: test_role\n      schema: public\n```\n\n## Examples\n\nRevoke default privileges for functions for \"public\" role:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as postgresql from \"@pulumi/postgresql\";\n\nconst revokePublic = new postgresql.DefaultPrivileges(\"revokePublic\", {\n    database: postgresql_database.example_db.name,\n    role: \"public\",\n    owner: \"object_owner\",\n    objectType: \"function\",\n    privileges: [],\n});\n```\n```python\nimport pulumi\nimport pulumi_postgresql as postgresql\n\nrevoke_public = postgresql.DefaultPrivileges(\"revokePublic\",\n    database=postgresql_database[\"example_db\"][\"name\"],\n    role=\"public\",\n    owner=\"object_owner\",\n    object_type=\"function\",\n    privileges=[])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing PostgreSql = Pulumi.PostgreSql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var revokePublic = new PostgreSql.DefaultPrivileges(\"revokePublic\", new()\n    {\n        Database = postgresql_database.Example_db.Name,\n        Role = \"public\",\n        Owner = \"object_owner\",\n        ObjectType = \"function\",\n        Privileges = new[] {},\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-postgresql/sdk/v3/go/postgresql\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := postgresql.NewDefaultPrivileges(ctx, \"revokePublic\", \u0026postgresql.DefaultPrivilegesArgs{\n\t\t\tDatabase:   pulumi.Any(postgresql_database.Example_db.Name),\n\t\t\tRole:       pulumi.String(\"public\"),\n\t\t\tOwner:      pulumi.String(\"object_owner\"),\n\t\t\tObjectType: pulumi.String(\"function\"),\n\t\t\tPrivileges: pulumi.StringArray{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.postgresql.DefaultPrivileges;\nimport com.pulumi.postgresql.DefaultPrivilegesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var revokePublic = new DefaultPrivileges(\"revokePublic\", DefaultPrivilegesArgs.builder()        \n            .database(postgresql_database.example_db().name())\n            .role(\"public\")\n            .owner(\"object_owner\")\n            .objectType(\"function\")\n            .privileges()\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  revokePublic:\n    type: postgresql:DefaultPrivileges\n    properties:\n      database: ${postgresql_database.example_db.name}\n      role: public\n      owner: object_owner\n      objectType: function\n      privileges: []\n```\n",
            "properties": {
                "database": {
                    "type": "string",
                    "description": "The database to grant default privileges for this role.\n"
                },
                "objectType": {
                    "type": "string",
                    "description": "The PostgreSQL object type to set the default privileges on (one of: table, sequence, function, type, schema).\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Role for which apply default privileges (You can change default privileges only for objects that will be created by yourself or by roles that you are a member of).\n"
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of privileges to apply as default privileges. An empty list could be provided to revoke all default privileges for this role.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The name of the role to which grant default privileges on.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The database schema to set default privileges for this role.\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "Permit the grant recipient to grant it to others\n"
                }
            },
            "required": [
                "database",
                "objectType",
                "owner",
                "privileges",
                "role"
            ],
            "inputProperties": {
                "database": {
                    "type": "string",
                    "description": "The database to grant default privileges for this role.\n",
                    "willReplaceOnChanges": true
                },
                "objectType": {
                    "type": "string",
                    "description": "The PostgreSQL object type to set the default privileges on (one of: table, sequence, function, type, schema).\n",
                    "willReplaceOnChanges": true
                },
                "owner": {
                    "type": "string",
                    "description": "Role for which apply default privileges (You can change default privileges only for objects that will be created by yourself or by roles that you are a member of).\n",
                    "willReplaceOnChanges": true
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of privileges to apply as default privileges. An empty list could be provided to revoke all default privileges for this role.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The name of the role to which grant default privileges on.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The database schema to set default privileges for this role.\n",
                    "willReplaceOnChanges": true
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "Permit the grant recipient to grant it to others\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "database",
                "objectType",
                "owner",
                "privileges",
                "role"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DefaultPrivileg resources.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The database to grant default privileges for this role.\n",
                        "willReplaceOnChanges": true
                    },
                    "objectType": {
                        "type": "string",
                        "description": "The PostgreSQL object type to set the default privileges on (one of: table, sequence, function, type, schema).\n",
                        "willReplaceOnChanges": true
                    },
                    "owner": {
                        "type": "string",
                        "description": "Role for which apply default privileges (You can change default privileges only for objects that will be created by yourself or by roles that you are a member of).\n",
                        "willReplaceOnChanges": true
                    },
                    "privileges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of privileges to apply as default privileges. An empty list could be provided to revoke all default privileges for this role.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The name of the role to which grant default privileges on.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The database schema to set default privileges for this role.\n",
                        "willReplaceOnChanges": true
                    },
                    "withGrantOption": {
                        "type": "boolean",
                        "description": "Permit the grant recipient to grant it to others\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "postgresql.DefaultPrivileg has been deprecated in favor of postgresql.DefaultPrivileges"
        },
        "postgresql:index/defaultPrivileges:DefaultPrivileges": {
            "description": "The ``postgresql.DefaultPrivileges`` resource creates and manages default privileges given to a user for a database schema.\n\n\u003e **Note:** This resource needs Postgresql version 9 or above.\n\n## Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as postgresql from \"@pulumi/postgresql\";\n\nconst readOnlyTables = new postgresql.DefaultPrivileges(\"readOnlyTables\", {\n    database: \"test_db\",\n    objectType: \"table\",\n    owner: \"db_owner\",\n    privileges: [\"SELECT\"],\n    role: \"test_role\",\n    schema: \"public\",\n});\n```\n```python\nimport pulumi\nimport pulumi_postgresql as postgresql\n\nread_only_tables = postgresql.DefaultPrivileges(\"readOnlyTables\",\n    database=\"test_db\",\n    object_type=\"table\",\n    owner=\"db_owner\",\n    privileges=[\"SELECT\"],\n    role=\"test_role\",\n    schema=\"public\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing PostgreSql = Pulumi.PostgreSql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var readOnlyTables = new PostgreSql.DefaultPrivileges(\"readOnlyTables\", new()\n    {\n        Database = \"test_db\",\n        ObjectType = \"table\",\n        Owner = \"db_owner\",\n        Privileges = new[]\n        {\n            \"SELECT\",\n        },\n        Role = \"test_role\",\n        Schema = \"public\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-postgresql/sdk/v3/go/postgresql\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := postgresql.NewDefaultPrivileges(ctx, \"readOnlyTables\", \u0026postgresql.DefaultPrivilegesArgs{\n\t\t\tDatabase:   pulumi.String(\"test_db\"),\n\t\t\tObjectType: pulumi.String(\"table\"),\n\t\t\tOwner:      pulumi.String(\"db_owner\"),\n\t\t\tPrivileges: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"SELECT\"),\n\t\t\t},\n\t\t\tRole:   pulumi.String(\"test_role\"),\n\t\t\tSchema: pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.postgresql.DefaultPrivileges;\nimport com.pulumi.postgresql.DefaultPrivilegesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var readOnlyTables = new DefaultPrivileges(\"readOnlyTables\", DefaultPrivilegesArgs.builder()        \n            .database(\"test_db\")\n            .objectType(\"table\")\n            .owner(\"db_owner\")\n            .privileges(\"SELECT\")\n            .role(\"test_role\")\n            .schema(\"public\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  readOnlyTables:\n    type: postgresql:DefaultPrivileges\n    properties:\n      database: test_db\n      objectType: table\n      owner: db_owner\n      privileges:\n        - SELECT\n      role: test_role\n      schema: public\n```\n\n## Examples\n\nRevoke default privileges for functions for \"public\" role:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as postgresql from \"@pulumi/postgresql\";\n\nconst revokePublic = new postgresql.DefaultPrivileges(\"revokePublic\", {\n    database: postgresql_database.example_db.name,\n    role: \"public\",\n    owner: \"object_owner\",\n    objectType: \"function\",\n    privileges: [],\n});\n```\n```python\nimport pulumi\nimport pulumi_postgresql as postgresql\n\nrevoke_public = postgresql.DefaultPrivileges(\"revokePublic\",\n    database=postgresql_database[\"example_db\"][\"name\"],\n    role=\"public\",\n    owner=\"object_owner\",\n    object_type=\"function\",\n    privileges=[])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing PostgreSql = Pulumi.PostgreSql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var revokePublic = new PostgreSql.DefaultPrivileges(\"revokePublic\", new()\n    {\n        Database = postgresql_database.Example_db.Name,\n        Role = \"public\",\n        Owner = \"object_owner\",\n        ObjectType = \"function\",\n        Privileges = new[] {},\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-postgresql/sdk/v3/go/postgresql\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := postgresql.NewDefaultPrivileges(ctx, \"revokePublic\", \u0026postgresql.DefaultPrivilegesArgs{\n\t\t\tDatabase:   pulumi.Any(postgresql_database.Example_db.Name),\n\t\t\tRole:       pulumi.String(\"public\"),\n\t\t\tOwner:      pulumi.String(\"object_owner\"),\n\t\t\tObjectType: pulumi.String(\"function\"),\n\t\t\tPrivileges: pulumi.StringArray{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.postgresql.DefaultPrivileges;\nimport com.pulumi.postgresql.DefaultPrivilegesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var revokePublic = new DefaultPrivileges(\"revokePublic\", DefaultPrivilegesArgs.builder()        \n            .database(postgresql_database.example_db().name())\n            .role(\"public\")\n            .owner(\"object_owner\")\n            .objectType(\"function\")\n            .privileges()\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  revokePublic:\n    type: postgresql:DefaultPrivileges\n    properties:\n      database: ${postgresql_database.example_db.name}\n      role: public\n      owner: object_owner\n      objectType: function\n      privileges: []\n```\n",
            "properties": {
                "database": {
                    "type": "string",
                    "description": "The database to grant default privileges for this role.\n"
                },
                "objectType": {
                    "type": "string",
                    "description": "The PostgreSQL object type to set the default privileges on (one of: table, sequence, function, type, schema).\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Role for which apply default privileges (You can change default privileges only for objects that will be created by yourself or by roles that you are a member of).\n"
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of privileges to apply as default privileges. An empty list could be provided to revoke all default privileges for this role.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The name of the role to which grant default privileges on.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The database schema to set default privileges for this role.\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "Permit the grant recipient to grant it to others\n"
                }
            },
            "required": [
                "database",
                "objectType",
                "owner",
                "privileges",
                "role"
            ],
            "inputProperties": {
                "database": {
                    "type": "string",
                    "description": "The database to grant default privileges for this role.\n",
                    "willReplaceOnChanges": true
                },
                "objectType": {
                    "type": "string",
                    "description": "The PostgreSQL object type to set the default privileges on (one of: table, sequence, function, type, schema).\n",
                    "willReplaceOnChanges": true
                },
                "owner": {
                    "type": "string",
                    "description": "Role for which apply default privileges (You can change default privileges only for objects that will be created by yourself or by roles that you are a member of).\n",
                    "willReplaceOnChanges": true
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of privileges to apply as default privileges. An empty list could be provided to revoke all default privileges for this role.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The name of the role to which grant default privileges on.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The database schema to set default privileges for this role.\n",
                    "willReplaceOnChanges": true
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "Permit the grant recipient to grant it to others\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "database",
                "objectType",
                "owner",
                "privileges",
                "role"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DefaultPrivileges resources.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The database to grant default privileges for this role.\n",
                        "willReplaceOnChanges": true
                    },
                    "objectType": {
                        "type": "string",
                        "description": "The PostgreSQL object type to set the default privileges on (one of: table, sequence, function, type, schema).\n",
                        "willReplaceOnChanges": true
                    },
                    "owner": {
                        "type": "string",
                        "description": "Role for which apply default privileges (You can change default privileges only for objects that will be created by yourself or by roles that you are a member of).\n",
                        "willReplaceOnChanges": true
                    },
                    "privileges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of privileges to apply as default privileges. An empty list could be provided to revoke all default privileges for this role.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The name of the role to which grant default privileges on.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The database schema to set default privileges for this role.\n",
                        "willReplaceOnChanges": true
                    },
                    "withGrantOption": {
                        "type": "boolean",
                        "description": "Permit the grant recipient to grant it to others\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "postgresql:index/defaultPrivileg:DefaultPrivileg"
                }
            ]
        },
        "postgresql:index/extension:Extension": {
            "description": "The ``postgresql.Extension`` resource creates and manages an extension on a PostgreSQL\nserver.\n\n\n## Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as postgresql from \"@pulumi/postgresql\";\n\nconst myExtension = new postgresql.Extension(\"myExtension\", {});\n```\n```python\nimport pulumi\nimport pulumi_postgresql as postgresql\n\nmy_extension = postgresql.Extension(\"myExtension\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing PostgreSql = Pulumi.PostgreSql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myExtension = new PostgreSql.Extension(\"myExtension\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-postgresql/sdk/v3/go/postgresql\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := postgresql.NewExtension(ctx, \"myExtension\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.postgresql.Extension;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myExtension = new Extension(\"myExtension\");\n\n    }\n}\n```\n```yaml\nresources:\n  myExtension:\n    type: postgresql:Extension\n```\n\n\n## Import\n\nPostgreSQL Extensions can be imported using the database name and the extension's resource name, e.g.\n\n```sh\n $ pulumi import postgresql:index/extension:Extension uuid_ossp example-database.uuid-ossp`\n```\n\n ",
            "properties": {
                "createCascade": {
                    "type": "boolean",
                    "description": "When true, will also create any extensions that this extension depends on that are not already installed. (Default: false)\n"
                },
                "database": {
                    "type": "string",
                    "description": "Which database to create the extension on. Defaults to provider database.\n"
                },
                "dropCascade": {
                    "type": "boolean",
                    "description": "When true, will also drop all the objects that depend on the extension, and in turn all objects that depend on those objects. (Default: false)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the extension.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Sets the schema of an extension.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Sets the version number of the extension.\n"
                }
            },
            "required": [
                "database",
                "name",
                "schema",
                "version"
            ],
            "inputProperties": {
                "createCascade": {
                    "type": "boolean",
                    "description": "When true, will also create any extensions that this extension depends on that are not already installed. (Default: false)\n"
                },
                "database": {
                    "type": "string",
                    "description": "Which database to create the extension on. Defaults to provider database.\n",
                    "willReplaceOnChanges": true
                },
                "dropCascade": {
                    "type": "boolean",
                    "description": "When true, will also drop all the objects that depend on the extension, and in turn all objects that depend on those objects. (Default: false)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the extension.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "Sets the schema of an extension.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Sets the version number of the extension.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Extension resources.\n",
                "properties": {
                    "createCascade": {
                        "type": "boolean",
                        "description": "When true, will also create any extensions that this extension depends on that are not already installed. (Default: false)\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "Which database to create the extension on. Defaults to provider database.\n",
                        "willReplaceOnChanges": true
                    },
                    "dropCascade": {
                        "type": "boolean",
                        "description": "When true, will also drop all the objects that depend on the extension, and in turn all objects that depend on those objects. (Default: false)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the extension.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "Sets the schema of an extension.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Sets the version number of the extension.\n"
                    }
                },
                "type": "object"
            }
        },
        "postgresql:index/function:Function": {
            "description": "The ``postgresql.Function`` resource creates and manages a function on a PostgreSQL\nserver.\n\n## Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as postgresql from \"@pulumi/postgresql\";\n\nconst increment = new postgresql.Function(\"increment\", {\n    args: [{\n        name: \"i\",\n        type: \"integer\",\n    }],\n    body: `    BEGIN\n        RETURN i + 1;\n    END;\n\n`,\n    language: \"plpgsql\",\n    returns: \"integer\",\n});\n```\n```python\nimport pulumi\nimport pulumi_postgresql as postgresql\n\nincrement = postgresql.Function(\"increment\",\n    args=[postgresql.FunctionArgArgs(\n        name=\"i\",\n        type=\"integer\",\n    )],\n    body=\"\"\"    BEGIN\n        RETURN i + 1;\n    END;\n\n\"\"\",\n    language=\"plpgsql\",\n    returns=\"integer\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing PostgreSql = Pulumi.PostgreSql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var increment = new PostgreSql.Function(\"increment\", new()\n    {\n        Args = new[]\n        {\n            new PostgreSql.Inputs.FunctionArgArgs\n            {\n                Name = \"i\",\n                Type = \"integer\",\n            },\n        },\n        Body = @\"    BEGIN\n        RETURN i + 1;\n    END;\n\n\",\n        Language = \"plpgsql\",\n        Returns = \"integer\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-postgresql/sdk/v3/go/postgresql\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := postgresql.NewFunction(ctx, \"increment\", \u0026postgresql.FunctionArgs{\n\t\t\tArgs: postgresql.FunctionArgArray{\n\t\t\t\t\u0026postgresql.FunctionArgArgs{\n\t\t\t\t\tName: pulumi.String(\"i\"),\n\t\t\t\t\tType: pulumi.String(\"integer\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tBody:     pulumi.String(\"    BEGIN\\n        RETURN i + 1;\\n    END;\\n\\n\"),\n\t\t\tLanguage: pulumi.String(\"plpgsql\"),\n\t\t\tReturns:  pulumi.String(\"integer\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.postgresql.Function;\nimport com.pulumi.postgresql.FunctionArgs;\nimport com.pulumi.postgresql.inputs.FunctionArgArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var increment = new Function(\"increment\", FunctionArgs.builder()        \n            .args(FunctionArgArgs.builder()\n                .name(\"i\")\n                .type(\"integer\")\n                .build())\n            .body(\"\"\"\n    BEGIN\n        RETURN i + 1;\n    END;\n\n            \"\"\")\n            .language(\"plpgsql\")\n            .returns(\"integer\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  increment:\n    type: postgresql:Function\n    properties:\n      args:\n        - name: i\n          type: integer\n      body: |2+\n            BEGIN\n                RETURN i + 1;\n            END;\n\n      language: plpgsql\n      returns: integer\n```\n\n\n## Import\n\nIt is possible to import a `postgresql_function` resource with the following command:\n\n```sh\n $ pulumi import postgresql:index/function:Function function_foo \"my_database.my_schema.my_function_name(arguments)\"\n```\n Where `my_database` is the name of the database containing the schema, `my_schema` is the name of the schema in the PostgreSQL database, `my_function_name` is the function name to be imported, `arguments` is the argument signature of the function including all non OUT types and `postgresql_schema.function_foo` is the name of the resource whose state will be populated as a result of the command.\n\n",
            "properties": {
                "args": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/postgresql:index/FunctionArg:FunctionArg"
                    },
                    "description": "List of arguments for the function.\n"
                },
                "body": {
                    "type": "string",
                    "description": "Function body.\nThis should be the body content within the `AS $$` and the final `$$`. It will also accept the `AS $$` and `$$` if added.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database where the function is located.\nIf not specified, the function is created in the current database.\n"
                },
                "dropCascade": {
                    "type": "boolean",
                    "description": "True to automatically drop objects that depend on the function (such as\noperators or triggers), and in turn all objects that depend on those objects. Default is false.\n"
                },
                "language": {
                    "type": "string",
                    "description": "The function programming language. Can be one of internal, sql, c, plpgsql. Default is plpgsql.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the argument.\n"
                },
                "parallel": {
                    "type": "string",
                    "description": "Indicates if the function is parallel safe. Can be one of UNSAFE, RESTRICTED, or SAFE. Default is UNSAFE.\n"
                },
                "returns": {
                    "type": "string",
                    "description": "Type that the function returns. It can be computed from the OUT arguments. Default is void.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema where the function is located.\nIf not specified, the function is created in the current schema.\n"
                },
                "securityDefiner": {
                    "type": "boolean",
                    "description": "If the function should execute with the permissions of the owner, rather than the permissions of the caller. Default is false.\n"
                },
                "strict": {
                    "type": "boolean",
                    "description": "If the function should always return NULL when any of the inputs is NULL. Default is false.\n"
                },
                "volatility": {
                    "type": "string",
                    "description": "Defines the volatility of the function. Can be one of VOLATILE, STABLE, or IMMUTABLE. Default is VOLATILE.\n"
                }
            },
            "required": [
                "body",
                "database",
                "name",
                "returns",
                "schema"
            ],
            "inputProperties": {
                "args": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/postgresql:index/FunctionArg:FunctionArg"
                    },
                    "description": "List of arguments for the function.\n",
                    "willReplaceOnChanges": true
                },
                "body": {
                    "type": "string",
                    "description": "Function body.\nThis should be the body content within the `AS $$` and the final `$$`. It will also accept the `AS $$` and `$$` if added.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database where the function is located.\nIf not specified, the function is created in the current database.\n",
                    "willReplaceOnChanges": true
                },
                "dropCascade": {
                    "type": "boolean",
                    "description": "True to automatically drop objects that depend on the function (such as\noperators or triggers), and in turn all objects that depend on those objects. Default is false.\n"
                },
                "language": {
                    "type": "string",
                    "description": "The function programming language. Can be one of internal, sql, c, plpgsql. Default is plpgsql.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the argument.\n",
                    "willReplaceOnChanges": true
                },
                "parallel": {
                    "type": "string",
                    "description": "Indicates if the function is parallel safe. Can be one of UNSAFE, RESTRICTED, or SAFE. Default is UNSAFE.\n"
                },
                "returns": {
                    "type": "string",
                    "description": "Type that the function returns. It can be computed from the OUT arguments. Default is void.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema where the function is located.\nIf not specified, the function is created in the current schema.\n",
                    "willReplaceOnChanges": true
                },
                "securityDefiner": {
                    "type": "boolean",
                    "description": "If the function should execute with the permissions of the owner, rather than the permissions of the caller. Default is false.\n"
                },
                "strict": {
                    "type": "boolean",
                    "description": "If the function should always return NULL when any of the inputs is NULL. Default is false.\n"
                },
                "volatility": {
                    "type": "string",
                    "description": "Defines the volatility of the function. Can be one of VOLATILE, STABLE, or IMMUTABLE. Default is VOLATILE.\n"
                }
            },
            "requiredInputs": [
                "body"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Function resources.\n",
                "properties": {
                    "args": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/postgresql:index/FunctionArg:FunctionArg"
                        },
                        "description": "List of arguments for the function.\n",
                        "willReplaceOnChanges": true
                    },
                    "body": {
                        "type": "string",
                        "description": "Function body.\nThis should be the body content within the `AS $$` and the final `$$`. It will also accept the `AS $$` and `$$` if added.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database where the function is located.\nIf not specified, the function is created in the current database.\n",
                        "willReplaceOnChanges": true
                    },
                    "dropCascade": {
                        "type": "boolean",
                        "description": "True to automatically drop objects that depend on the function (such as\noperators or triggers), and in turn all objects that depend on those objects. Default is false.\n"
                    },
                    "language": {
                        "type": "string",
                        "description": "The function programming language. Can be one of internal, sql, c, plpgsql. Default is plpgsql.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the argument.\n",
                        "willReplaceOnChanges": true
                    },
                    "parallel": {
                        "type": "string",
                        "description": "Indicates if the function is parallel safe. Can be one of UNSAFE, RESTRICTED, or SAFE. Default is UNSAFE.\n"
                    },
                    "returns": {
                        "type": "string",
                        "description": "Type that the function returns. It can be computed from the OUT arguments. Default is void.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema where the function is located.\nIf not specified, the function is created in the current schema.\n",
                        "willReplaceOnChanges": true
                    },
                    "securityDefiner": {
                        "type": "boolean",
                        "description": "If the function should execute with the permissions of the owner, rather than the permissions of the caller. Default is false.\n"
                    },
                    "strict": {
                        "type": "boolean",
                        "description": "If the function should always return NULL when any of the inputs is NULL. Default is false.\n"
                    },
                    "volatility": {
                        "type": "string",
                        "description": "Defines the volatility of the function. Can be one of VOLATILE, STABLE, or IMMUTABLE. Default is VOLATILE.\n"
                    }
                },
                "type": "object"
            }
        },
        "postgresql:index/grant:Grant": {
            "description": "The ``postgresql.Grant`` resource creates and manages privileges given to a user for a database schema.\n\nSee [PostgreSQL documentation](https://www.postgresql.org/docs/current/sql-grant.html)\n\n\u003e **Note:** This resource needs Postgresql version 9 or above.\n\u003e **Note:** Using column \u0026 table grants on the _same_ table with the _same_ privileges can lead to unexpected behaviours.\n\n## Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as postgresql from \"@pulumi/postgresql\";\n\n// Grant SELECT privileges on 2 tables\nconst readonlyTables = new postgresql.Grant(\"readonlyTables\", {\n    database: \"test_db\",\n    objectType: \"table\",\n    objects: [\n        \"table1\",\n        \"table2\",\n    ],\n    privileges: [\"SELECT\"],\n    role: \"test_role\",\n    schema: \"public\",\n});\n// Grant SELECT \u0026 INSERT privileges on 2 columns in 1 table\nconst readInsertColumn = new postgresql.Grant(\"readInsertColumn\", {\n    columns: [\n        \"col1\",\n        \"col2\",\n    ],\n    database: \"test_db\",\n    objectType: \"column\",\n    objects: [\"table1\"],\n    privileges: [\n        \"UPDATE\",\n        \"INSERT\",\n    ],\n    role: \"test_role\",\n    schema: \"public\",\n});\n```\n```python\nimport pulumi\nimport pulumi_postgresql as postgresql\n\n# Grant SELECT privileges on 2 tables\nreadonly_tables = postgresql.Grant(\"readonlyTables\",\n    database=\"test_db\",\n    object_type=\"table\",\n    objects=[\n        \"table1\",\n        \"table2\",\n    ],\n    privileges=[\"SELECT\"],\n    role=\"test_role\",\n    schema=\"public\")\n# Grant SELECT \u0026 INSERT privileges on 2 columns in 1 table\nread_insert_column = postgresql.Grant(\"readInsertColumn\",\n    columns=[\n        \"col1\",\n        \"col2\",\n    ],\n    database=\"test_db\",\n    object_type=\"column\",\n    objects=[\"table1\"],\n    privileges=[\n        \"UPDATE\",\n        \"INSERT\",\n    ],\n    role=\"test_role\",\n    schema=\"public\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing PostgreSql = Pulumi.PostgreSql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Grant SELECT privileges on 2 tables\n    var readonlyTables = new PostgreSql.Grant(\"readonlyTables\", new()\n    {\n        Database = \"test_db\",\n        ObjectType = \"table\",\n        Objects = new[]\n        {\n            \"table1\",\n            \"table2\",\n        },\n        Privileges = new[]\n        {\n            \"SELECT\",\n        },\n        Role = \"test_role\",\n        Schema = \"public\",\n    });\n\n    // Grant SELECT \u0026 INSERT privileges on 2 columns in 1 table\n    var readInsertColumn = new PostgreSql.Grant(\"readInsertColumn\", new()\n    {\n        Columns = new[]\n        {\n            \"col1\",\n            \"col2\",\n        },\n        Database = \"test_db\",\n        ObjectType = \"column\",\n        Objects = new[]\n        {\n            \"table1\",\n        },\n        Privileges = new[]\n        {\n            \"UPDATE\",\n            \"INSERT\",\n        },\n        Role = \"test_role\",\n        Schema = \"public\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-postgresql/sdk/v3/go/postgresql\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := postgresql.NewGrant(ctx, \"readonlyTables\", \u0026postgresql.GrantArgs{\n\t\t\tDatabase:   pulumi.String(\"test_db\"),\n\t\t\tObjectType: pulumi.String(\"table\"),\n\t\t\tObjects: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"table1\"),\n\t\t\t\tpulumi.String(\"table2\"),\n\t\t\t},\n\t\t\tPrivileges: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"SELECT\"),\n\t\t\t},\n\t\t\tRole:   pulumi.String(\"test_role\"),\n\t\t\tSchema: pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = postgresql.NewGrant(ctx, \"readInsertColumn\", \u0026postgresql.GrantArgs{\n\t\t\tColumns: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"col1\"),\n\t\t\t\tpulumi.String(\"col2\"),\n\t\t\t},\n\t\t\tDatabase:   pulumi.String(\"test_db\"),\n\t\t\tObjectType: pulumi.String(\"column\"),\n\t\t\tObjects: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"table1\"),\n\t\t\t},\n\t\t\tPrivileges: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"UPDATE\"),\n\t\t\t\tpulumi.String(\"INSERT\"),\n\t\t\t},\n\t\t\tRole:   pulumi.String(\"test_role\"),\n\t\t\tSchema: pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.postgresql.Grant;\nimport com.pulumi.postgresql.GrantArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var readonlyTables = new Grant(\"readonlyTables\", GrantArgs.builder()        \n            .database(\"test_db\")\n            .objectType(\"table\")\n            .objects(            \n                \"table1\",\n                \"table2\")\n            .privileges(\"SELECT\")\n            .role(\"test_role\")\n            .schema(\"public\")\n            .build());\n\n        var readInsertColumn = new Grant(\"readInsertColumn\", GrantArgs.builder()        \n            .columns(            \n                \"col1\",\n                \"col2\")\n            .database(\"test_db\")\n            .objectType(\"column\")\n            .objects(\"table1\")\n            .privileges(            \n                \"UPDATE\",\n                \"INSERT\")\n            .role(\"test_role\")\n            .schema(\"public\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Grant SELECT privileges on 2 tables\n  readonlyTables:\n    type: postgresql:Grant\n    properties:\n      database: test_db\n      objectType: table\n      objects:\n        - table1\n        - table2\n      privileges:\n        - SELECT\n      role: test_role\n      schema: public\n  # Grant SELECT \u0026 INSERT privileges on 2 columns in 1 table\n  readInsertColumn:\n    type: postgresql:Grant\n    properties:\n      columns:\n        - col1\n        - col2\n      database: test_db\n      objectType: column\n      objects:\n        - table1\n      privileges:\n        - UPDATE\n        - INSERT\n      role: test_role\n      schema: public\n```\n\n## Examples\n\nRevoke default accesses for public schema:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as postgresql from \"@pulumi/postgresql\";\n\nconst revokePublic = new postgresql.Grant(\"revokePublic\", {\n    database: \"test_db\",\n    objectType: \"schema\",\n    privileges: [],\n    role: \"public\",\n    schema: \"public\",\n});\n```\n```python\nimport pulumi\nimport pulumi_postgresql as postgresql\n\nrevoke_public = postgresql.Grant(\"revokePublic\",\n    database=\"test_db\",\n    object_type=\"schema\",\n    privileges=[],\n    role=\"public\",\n    schema=\"public\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing PostgreSql = Pulumi.PostgreSql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var revokePublic = new PostgreSql.Grant(\"revokePublic\", new()\n    {\n        Database = \"test_db\",\n        ObjectType = \"schema\",\n        Privileges = new[] {},\n        Role = \"public\",\n        Schema = \"public\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-postgresql/sdk/v3/go/postgresql\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := postgresql.NewGrant(ctx, \"revokePublic\", \u0026postgresql.GrantArgs{\n\t\t\tDatabase:   pulumi.String(\"test_db\"),\n\t\t\tObjectType: pulumi.String(\"schema\"),\n\t\t\tPrivileges: pulumi.StringArray{},\n\t\t\tRole:       pulumi.String(\"public\"),\n\t\t\tSchema:     pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.postgresql.Grant;\nimport com.pulumi.postgresql.GrantArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var revokePublic = new Grant(\"revokePublic\", GrantArgs.builder()        \n            .database(\"test_db\")\n            .objectType(\"schema\")\n            .privileges()\n            .role(\"public\")\n            .schema(\"public\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  revokePublic:\n    type: postgresql:Grant\n    properties:\n      database: test_db\n      objectType: schema\n      privileges: []\n      role: public\n      schema: public\n```\n",
            "properties": {
                "columns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The columns upon which to grant the privileges. Required when `object_type` is `column`. You cannot specify this option if the `object_type` is not `column`.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database to grant privileges on for this role.\n"
                },
                "objectType": {
                    "type": "string",
                    "description": "The PostgreSQL object type to grant the privileges on (one of: database, schema, table, sequence, function, procedure, routine, foreign_data_wrapper, foreign_server, column).\n"
                },
                "objects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The objects upon which to grant the privileges. An empty list (the default) means to grant permissions on *all* objects of the specified type. You cannot specify this option if the `object_type` is `database` or `schema`. When `object_type` is `column`, only one value is allowed.\n"
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of privileges to grant. There are different kinds of privileges: SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER, CREATE, CONNECT, TEMPORARY, EXECUTE, and USAGE. An empty list could be provided to revoke all privileges for this role.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The name of the role to grant privileges on, Set it to \"public\" for all roles.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The database schema to grant privileges on for this role (Required except if object_type is \"database\")\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "Whether the recipient of these privileges can grant the same privileges to others. Defaults to false.\n"
                }
            },
            "required": [
                "database",
                "objectType",
                "privileges",
                "role"
            ],
            "inputProperties": {
                "columns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The columns upon which to grant the privileges. Required when `object_type` is `column`. You cannot specify this option if the `object_type` is not `column`.\n",
                    "willReplaceOnChanges": true
                },
                "database": {
                    "type": "string",
                    "description": "The database to grant privileges on for this role.\n",
                    "willReplaceOnChanges": true
                },
                "objectType": {
                    "type": "string",
                    "description": "The PostgreSQL object type to grant the privileges on (one of: database, schema, table, sequence, function, procedure, routine, foreign_data_wrapper, foreign_server, column).\n",
                    "willReplaceOnChanges": true
                },
                "objects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The objects upon which to grant the privileges. An empty list (the default) means to grant permissions on *all* objects of the specified type. You cannot specify this option if the `object_type` is `database` or `schema`. When `object_type` is `column`, only one value is allowed.\n",
                    "willReplaceOnChanges": true
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of privileges to grant. There are different kinds of privileges: SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER, CREATE, CONNECT, TEMPORARY, EXECUTE, and USAGE. An empty list could be provided to revoke all privileges for this role.\n",
                    "willReplaceOnChanges": true
                },
                "role": {
                    "type": "string",
                    "description": "The name of the role to grant privileges on, Set it to \"public\" for all roles.\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The database schema to grant privileges on for this role (Required except if object_type is \"database\")\n",
                    "willReplaceOnChanges": true
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "Whether the recipient of these privileges can grant the same privileges to others. Defaults to false.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "database",
                "objectType",
                "privileges",
                "role"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Grant resources.\n",
                "properties": {
                    "columns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The columns upon which to grant the privileges. Required when `object_type` is `column`. You cannot specify this option if the `object_type` is not `column`.\n",
                        "willReplaceOnChanges": true
                    },
                    "database": {
                        "type": "string",
                        "description": "The database to grant privileges on for this role.\n",
                        "willReplaceOnChanges": true
                    },
                    "objectType": {
                        "type": "string",
                        "description": "The PostgreSQL object type to grant the privileges on (one of: database, schema, table, sequence, function, procedure, routine, foreign_data_wrapper, foreign_server, column).\n",
                        "willReplaceOnChanges": true
                    },
                    "objects": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The objects upon which to grant the privileges. An empty list (the default) means to grant permissions on *all* objects of the specified type. You cannot specify this option if the `object_type` is `database` or `schema`. When `object_type` is `column`, only one value is allowed.\n",
                        "willReplaceOnChanges": true
                    },
                    "privileges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of privileges to grant. There are different kinds of privileges: SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER, CREATE, CONNECT, TEMPORARY, EXECUTE, and USAGE. An empty list could be provided to revoke all privileges for this role.\n",
                        "willReplaceOnChanges": true
                    },
                    "role": {
                        "type": "string",
                        "description": "The name of the role to grant privileges on, Set it to \"public\" for all roles.\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The database schema to grant privileges on for this role (Required except if object_type is \"database\")\n",
                        "willReplaceOnChanges": true
                    },
                    "withGrantOption": {
                        "type": "boolean",
                        "description": "Whether the recipient of these privileges can grant the same privileges to others. Defaults to false.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "postgresql:index/grantRole:GrantRole": {
            "description": "The ``postgresql.GrantRole`` resource creates and manages membership in a role to one or more other roles in a non-authoritative way.\n\nWhen using ``postgresql.GrantRole`` resource it is likely because the PostgreSQL role you are modifying was created outside of this provider.\n\n\u003e **Note:** This resource needs PostgreSQL version 9 or above.\n\n## Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as postgresql from \"@pulumi/postgresql\";\n\nconst grantRoot = new postgresql.GrantRole(\"grantRoot\", {\n    grantRole: \"application\",\n    role: \"root\",\n    withAdminOption: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_postgresql as postgresql\n\ngrant_root = postgresql.GrantRole(\"grantRoot\",\n    grant_role=\"application\",\n    role=\"root\",\n    with_admin_option=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing PostgreSql = Pulumi.PostgreSql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var grantRoot = new PostgreSql.GrantRole(\"grantRoot\", new()\n    {\n        GrantRoleName = \"application\",\n        Role = \"root\",\n        WithAdminOption = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-postgresql/sdk/v3/go/postgresql\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := postgresql.NewGrantRole(ctx, \"grantRoot\", \u0026postgresql.GrantRoleArgs{\n\t\t\tGrantRole:       pulumi.String(\"application\"),\n\t\t\tRole:            pulumi.String(\"root\"),\n\t\t\tWithAdminOption: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.postgresql.GrantRole;\nimport com.pulumi.postgresql.GrantRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var grantRoot = new GrantRole(\"grantRoot\", GrantRoleArgs.builder()        \n            .grantRole(\"application\")\n            .role(\"root\")\n            .withAdminOption(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  grantRoot:\n    type: postgresql:GrantRole\n    properties:\n      grantRole: application\n      role: root\n      withAdminOption: true\n```\n\n\u003e **Note:** If you use `postgresql.GrantRole` for a role that you also manage with a `postgresql.Role` resource, you need to ignore the changes of the `roles` attribute in the `postgresql.Role` resource or they will fight over what your role grants should be. e.g.:\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.postgresql.Role;\nimport com.pulumi.postgresql.RoleArgs;\nimport com.pulumi.postgresql.GrantRole;\nimport com.pulumi.postgresql.GrantRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var bob = new Role(\"bob\", RoleArgs.builder()        \n            .role(\"bob\")\n            .build());\n\n        var bobAdmin = new GrantRole(\"bobAdmin\", GrantRoleArgs.builder()        \n            .role(\"bob\")\n            .grantRole(\"admin\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  bob:\n    type: postgresql:Role\n    properties:\n      role: bob\n  bobAdmin:\n    type: postgresql:GrantRole\n    properties:\n      role: bob\n      grantRole: admin\n```\n",
            "properties": {
                "grantRole": {
                    "type": "string",
                    "description": "The name of the role that is added to `role`.\n",
                    "language": {
                        "csharp": {
                            "name": "GrantRoleName"
                        }
                    }
                },
                "role": {
                    "type": "string",
                    "description": "The name of the role that is granted a new membership.\n"
                },
                "withAdminOption": {
                    "type": "boolean",
                    "description": "Giving ability to grant membership to others or not for `role`. (Default: false)\n"
                }
            },
            "required": [
                "grantRole",
                "role"
            ],
            "inputProperties": {
                "grantRole": {
                    "type": "string",
                    "description": "The name of the role that is added to `role`.\n",
                    "language": {
                        "csharp": {
                            "name": "GrantRoleName"
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "role": {
                    "type": "string",
                    "description": "The name of the role that is granted a new membership.\n",
                    "willReplaceOnChanges": true
                },
                "withAdminOption": {
                    "type": "boolean",
                    "description": "Giving ability to grant membership to others or not for `role`. (Default: false)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "grantRole",
                "role"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrantRole resources.\n",
                "properties": {
                    "grantRole": {
                        "type": "string",
                        "description": "The name of the role that is added to `role`.\n",
                        "language": {
                            "csharp": {
                                "name": "GrantRoleName"
                            }
                        },
                        "willReplaceOnChanges": true
                    },
                    "role": {
                        "type": "string",
                        "description": "The name of the role that is granted a new membership.\n",
                        "willReplaceOnChanges": true
                    },
                    "withAdminOption": {
                        "type": "boolean",
                        "description": "Giving ability to grant membership to others or not for `role`. (Default: false)\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "postgresql:index/physicalReplicationSlot:PhysicalReplicationSlot": {
            "description": "The ``postgresql.PhysicalReplicationSlot`` resource creates and manages a physical replication slot on a PostgreSQL\nserver. This is useful to setup a cross datacenter replication, with Patroni for example, or permit\nany stand-by cluster to replicate physically data.\n\n\n## Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as postgresql from \"@pulumi/postgresql\";\n\nconst mySlot = new postgresql.PhysicalReplicationSlot(\"mySlot\", {});\n```\n```python\nimport pulumi\nimport pulumi_postgresql as postgresql\n\nmy_slot = postgresql.PhysicalReplicationSlot(\"mySlot\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing PostgreSql = Pulumi.PostgreSql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySlot = new PostgreSql.PhysicalReplicationSlot(\"mySlot\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-postgresql/sdk/v3/go/postgresql\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := postgresql.NewPhysicalReplicationSlot(ctx, \"mySlot\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.postgresql.PhysicalReplicationSlot;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySlot = new PhysicalReplicationSlot(\"mySlot\");\n\n    }\n}\n```\n```yaml\nresources:\n  mySlot:\n    type: postgresql:PhysicalReplicationSlot\n```\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the replication slot.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the replication slot.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PhysicalReplicationSlot resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the replication slot.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "postgresql:index/publication:Publication": {
            "description": "The `postgresql.Publication` resource creates and manages a publication on a PostgreSQL\nserver.\n\n## Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as postgresql from \"@pulumi/postgresql\";\n\nconst publication = new postgresql.Publication(\"publication\", {tables: [\n    \"public.test\",\n    \"another_schema.test\",\n]});\n```\n```python\nimport pulumi\nimport pulumi_postgresql as postgresql\n\npublication = postgresql.Publication(\"publication\", tables=[\n    \"public.test\",\n    \"another_schema.test\",\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing PostgreSql = Pulumi.PostgreSql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var publication = new PostgreSql.Publication(\"publication\", new()\n    {\n        Tables = new[]\n        {\n            \"public.test\",\n            \"another_schema.test\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-postgresql/sdk/v3/go/postgresql\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := postgresql.NewPublication(ctx, \"publication\", \u0026postgresql.PublicationArgs{\n\t\t\tTables: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"public.test\"),\n\t\t\t\tpulumi.String(\"another_schema.test\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.postgresql.Publication;\nimport com.pulumi.postgresql.PublicationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var publication = new Publication(\"publication\", PublicationArgs.builder()        \n            .tables(            \n                \"public.test\",\n                \"another_schema.test\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  publication:\n    type: postgresql:Publication\n    properties:\n      tables:\n        - public.test\n        - another_schema.test\n```\n",
            "properties": {
                "allTables": {
                    "type": "boolean",
                    "description": "Should be ALL TABLES added to the publication. Defaults to 'false'\n"
                },
                "database": {
                    "type": "string",
                    "description": "Which database to create the publication on. Defaults to provider database.\n"
                },
                "dropCascade": {
                    "type": "boolean",
                    "description": "Should all subsequent resources of the publication be dropped. Defaults to 'false'\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the publication.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Who owns the publication. Defaults to provider user.\n"
                },
                "publishParams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Which 'publish' options should be turned on. Default to 'insert','update','delete'\n"
                },
                "publishViaPartitionRootParam": {
                    "type": "boolean",
                    "description": "Should be option 'publish_via_partition_root' be turned on. Default to 'false'\n"
                },
                "tables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Which tables add to the publication. By defaults no tables added. Format of table is `\u003cschema_name\u003e.\u003ctable_name\u003e`. If `\u003cschema_name\u003e` is not specified - default database schema will be used.  Table string must be listed in alphabetical order.\n"
                }
            },
            "required": [
                "allTables",
                "database",
                "name",
                "owner",
                "publishParams",
                "tables"
            ],
            "inputProperties": {
                "allTables": {
                    "type": "boolean",
                    "description": "Should be ALL TABLES added to the publication. Defaults to 'false'\n",
                    "willReplaceOnChanges": true
                },
                "database": {
                    "type": "string",
                    "description": "Which database to create the publication on. Defaults to provider database.\n",
                    "willReplaceOnChanges": true
                },
                "dropCascade": {
                    "type": "boolean",
                    "description": "Should all subsequent resources of the publication be dropped. Defaults to 'false'\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the publication.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Who owns the publication. Defaults to provider user.\n"
                },
                "publishParams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Which 'publish' options should be turned on. Default to 'insert','update','delete'\n"
                },
                "publishViaPartitionRootParam": {
                    "type": "boolean",
                    "description": "Should be option 'publish_via_partition_root' be turned on. Default to 'false'\n"
                },
                "tables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Which tables add to the publication. By defaults no tables added. Format of table is `\u003cschema_name\u003e.\u003ctable_name\u003e`. If `\u003cschema_name\u003e` is not specified - default database schema will be used.  Table string must be listed in alphabetical order.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Publication resources.\n",
                "properties": {
                    "allTables": {
                        "type": "boolean",
                        "description": "Should be ALL TABLES added to the publication. Defaults to 'false'\n",
                        "willReplaceOnChanges": true
                    },
                    "database": {
                        "type": "string",
                        "description": "Which database to create the publication on. Defaults to provider database.\n",
                        "willReplaceOnChanges": true
                    },
                    "dropCascade": {
                        "type": "boolean",
                        "description": "Should all subsequent resources of the publication be dropped. Defaults to 'false'\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the publication.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Who owns the publication. Defaults to provider user.\n"
                    },
                    "publishParams": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Which 'publish' options should be turned on. Default to 'insert','update','delete'\n"
                    },
                    "publishViaPartitionRootParam": {
                        "type": "boolean",
                        "description": "Should be option 'publish_via_partition_root' be turned on. Default to 'false'\n"
                    },
                    "tables": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Which tables add to the publication. By defaults no tables added. Format of table is `\u003cschema_name\u003e.\u003ctable_name\u003e`. If `\u003cschema_name\u003e` is not specified - default database schema will be used.  Table string must be listed in alphabetical order.\n"
                    }
                },
                "type": "object"
            }
        },
        "postgresql:index/replicationSlot:ReplicationSlot": {
            "description": "The ``postgresql.ReplicationSlot`` resource creates and manages a replication slot on a PostgreSQL\nserver.\n\n\n## Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as postgresql from \"@pulumi/postgresql\";\n\nconst mySlot = new postgresql.ReplicationSlot(\"mySlot\", {plugin: \"test_decoding\"});\n```\n```python\nimport pulumi\nimport pulumi_postgresql as postgresql\n\nmy_slot = postgresql.ReplicationSlot(\"mySlot\", plugin=\"test_decoding\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing PostgreSql = Pulumi.PostgreSql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySlot = new PostgreSql.ReplicationSlot(\"mySlot\", new()\n    {\n        Plugin = \"test_decoding\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-postgresql/sdk/v3/go/postgresql\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := postgresql.NewReplicationSlot(ctx, \"mySlot\", \u0026postgresql.ReplicationSlotArgs{\n\t\t\tPlugin: pulumi.String(\"test_decoding\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.postgresql.ReplicationSlot;\nimport com.pulumi.postgresql.ReplicationSlotArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySlot = new ReplicationSlot(\"mySlot\", ReplicationSlotArgs.builder()        \n            .plugin(\"test_decoding\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySlot:\n    type: postgresql:ReplicationSlot\n    properties:\n      plugin: test_decoding\n```\n",
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Which database to create the replication slot on. Defaults to provider database.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the replication slot.\n"
                },
                "plugin": {
                    "type": "string",
                    "description": "Sets the output plugin.\n"
                }
            },
            "required": [
                "database",
                "name",
                "plugin"
            ],
            "inputProperties": {
                "database": {
                    "type": "string",
                    "description": "Which database to create the replication slot on. Defaults to provider database.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the replication slot.\n",
                    "willReplaceOnChanges": true
                },
                "plugin": {
                    "type": "string",
                    "description": "Sets the output plugin.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "plugin"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ReplicationSlot resources.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "Which database to create the replication slot on. Defaults to provider database.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the replication slot.\n",
                        "willReplaceOnChanges": true
                    },
                    "plugin": {
                        "type": "string",
                        "description": "Sets the output plugin.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "postgresql:index/role:Role": {
            "properties": {
                "assumeRole": {
                    "type": "string",
                    "description": "Defines the role to switch to at login via [`SET ROLE`](https://www.postgresql.org/docs/current/sql-set-role.html).\n"
                },
                "bypassRowLevelSecurity": {
                    "type": "boolean",
                    "description": "Defines whether a role bypasses every\nrow-level security (RLS) policy.  Default value is `false`.\n"
                },
                "connectionLimit": {
                    "type": "integer",
                    "description": "If this role can log in, this specifies how\nmany concurrent connections the role can establish. `-1` (the default) means no\nlimit.\n"
                },
                "createDatabase": {
                    "type": "boolean",
                    "description": "Defines a role's ability to execute `CREATE\nDATABASE`.  Default value is `false`.\n"
                },
                "createRole": {
                    "type": "boolean",
                    "description": "Defines a role's ability to execute `CREATE ROLE`.\nA role with this privilege can also alter and drop other roles.  Default value\nis `false`.\n"
                },
                "encrypted": {
                    "type": "string",
                    "deprecationMessage": "Rename PostgreSQL role resource attribute \"encrypted\" to \"encrypted_password\""
                },
                "encryptedPassword": {
                    "type": "boolean",
                    "description": "Defines whether the password is stored\nencrypted in the system catalogs.  Default value is `true`.  NOTE: this value\nis always set (to the conservative and safe value), but may interfere with the\nbehavior of\n[PostgreSQL's `password_encryption` setting](https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION).\n"
                },
                "idleInTransactionSessionTimeout": {
                    "type": "integer",
                    "description": "Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds\n"
                },
                "inherit": {
                    "type": "boolean",
                    "description": "Defines whether a role \"inherits\" the privileges of\nroles it is a member of.  Default value is `true`.\n"
                },
                "login": {
                    "type": "boolean",
                    "description": "Defines whether role is allowed to log in.  Roles without\nthis attribute are useful for managing database privileges, but are not users\nin the usual sense of the word.  Default value is `false`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the role. Must be unique on the PostgreSQL\nserver instance where it is configured.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Sets the role's password. A password is only of use\nfor roles having the `login` attribute set to true.\n",
                    "secret": true
                },
                "replication": {
                    "type": "boolean",
                    "description": "Defines whether a role is allowed to initiate\nstreaming replication or put the system in and out of backup mode.  Default\nvalue is `false`\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Defines list of roles which will be granted to this new role.\n"
                },
                "searchPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Alters the search path of this new role. Note that\ndue to limitations in the implementation, values cannot contain the substring\n`\", \"`.\n"
                },
                "skipDropRole": {
                    "type": "boolean",
                    "description": "When a PostgreSQL ROLE exists in multiple\ndatabases and the ROLE is dropped, the\n[cleanup of ownership of objects](https://www.postgresql.org/docs/current/static/role-removal.html)\nin each of the respective databases must occur before the ROLE can be dropped\nfrom the catalog.  Set this option to true when there are multiple databases\nin a PostgreSQL cluster using the same PostgreSQL ROLE for object ownership.\nThis is the third and final step taken when removing a ROLE from a database.\n"
                },
                "skipReassignOwned": {
                    "type": "boolean",
                    "description": "When a PostgreSQL ROLE exists in multiple\ndatabases and the ROLE is dropped, a\n[`REASSIGN OWNED`](https://www.postgresql.org/docs/current/static/sql-reassign-owned.html) in\nmust be executed on each of the respective databases before the `DROP ROLE`\ncan be executed to dropped the ROLE from the catalog.  This is the first and\nsecond steps taken when removing a ROLE from a database (the second step being\nan implicit\n[`DROP OWNED`](https://www.postgresql.org/docs/current/static/sql-drop-owned.html)).\n"
                },
                "statementTimeout": {
                    "type": "integer",
                    "description": "Defines [`statement_timeout`](https://www.postgresql.org/docs/current/runtime-config-client.html#RUNTIME-CONFIG-CLIENT-STATEMENT) setting for this role which allows to abort any statement that takes more than the specified amount of time.\n"
                },
                "superuser": {
                    "type": "boolean",
                    "description": "Defines whether the role is a \"superuser\", and\ntherefore can override all access restrictions within the database.  Default\nvalue is `false`.\n"
                },
                "validUntil": {
                    "type": "string",
                    "description": "Defines the date and time after which the role's\npassword is no longer valid.  Established connections past this `valid_time`\nwill have to be manually terminated.  This value corresponds to a PostgreSQL\ndatetime. If omitted or the magic value `NULL` is used, `valid_until` will be\nset to `infinity`.  Default is `NULL`, therefore `infinity`.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "assumeRole": {
                    "type": "string",
                    "description": "Defines the role to switch to at login via [`SET ROLE`](https://www.postgresql.org/docs/current/sql-set-role.html).\n"
                },
                "bypassRowLevelSecurity": {
                    "type": "boolean",
                    "description": "Defines whether a role bypasses every\nrow-level security (RLS) policy.  Default value is `false`.\n"
                },
                "connectionLimit": {
                    "type": "integer",
                    "description": "If this role can log in, this specifies how\nmany concurrent connections the role can establish. `-1` (the default) means no\nlimit.\n"
                },
                "createDatabase": {
                    "type": "boolean",
                    "description": "Defines a role's ability to execute `CREATE\nDATABASE`.  Default value is `false`.\n"
                },
                "createRole": {
                    "type": "boolean",
                    "description": "Defines a role's ability to execute `CREATE ROLE`.\nA role with this privilege can also alter and drop other roles.  Default value\nis `false`.\n"
                },
                "encrypted": {
                    "type": "string",
                    "deprecationMessage": "Rename PostgreSQL role resource attribute \"encrypted\" to \"encrypted_password\""
                },
                "encryptedPassword": {
                    "type": "boolean",
                    "description": "Defines whether the password is stored\nencrypted in the system catalogs.  Default value is `true`.  NOTE: this value\nis always set (to the conservative and safe value), but may interfere with the\nbehavior of\n[PostgreSQL's `password_encryption` setting](https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION).\n"
                },
                "idleInTransactionSessionTimeout": {
                    "type": "integer",
                    "description": "Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds\n"
                },
                "inherit": {
                    "type": "boolean",
                    "description": "Defines whether a role \"inherits\" the privileges of\nroles it is a member of.  Default value is `true`.\n"
                },
                "login": {
                    "type": "boolean",
                    "description": "Defines whether role is allowed to log in.  Roles without\nthis attribute are useful for managing database privileges, but are not users\nin the usual sense of the word.  Default value is `false`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the role. Must be unique on the PostgreSQL\nserver instance where it is configured.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Sets the role's password. A password is only of use\nfor roles having the `login` attribute set to true.\n",
                    "secret": true
                },
                "replication": {
                    "type": "boolean",
                    "description": "Defines whether a role is allowed to initiate\nstreaming replication or put the system in and out of backup mode.  Default\nvalue is `false`\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Defines list of roles which will be granted to this new role.\n"
                },
                "searchPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Alters the search path of this new role. Note that\ndue to limitations in the implementation, values cannot contain the substring\n`\", \"`.\n"
                },
                "skipDropRole": {
                    "type": "boolean",
                    "description": "When a PostgreSQL ROLE exists in multiple\ndatabases and the ROLE is dropped, the\n[cleanup of ownership of objects](https://www.postgresql.org/docs/current/static/role-removal.html)\nin each of the respective databases must occur before the ROLE can be dropped\nfrom the catalog.  Set this option to true when there are multiple databases\nin a PostgreSQL cluster using the same PostgreSQL ROLE for object ownership.\nThis is the third and final step taken when removing a ROLE from a database.\n"
                },
                "skipReassignOwned": {
                    "type": "boolean",
                    "description": "When a PostgreSQL ROLE exists in multiple\ndatabases and the ROLE is dropped, a\n[`REASSIGN OWNED`](https://www.postgresql.org/docs/current/static/sql-reassign-owned.html) in\nmust be executed on each of the respective databases before the `DROP ROLE`\ncan be executed to dropped the ROLE from the catalog.  This is the first and\nsecond steps taken when removing a ROLE from a database (the second step being\nan implicit\n[`DROP OWNED`](https://www.postgresql.org/docs/current/static/sql-drop-owned.html)).\n"
                },
                "statementTimeout": {
                    "type": "integer",
                    "description": "Defines [`statement_timeout`](https://www.postgresql.org/docs/current/runtime-config-client.html#RUNTIME-CONFIG-CLIENT-STATEMENT) setting for this role which allows to abort any statement that takes more than the specified amount of time.\n"
                },
                "superuser": {
                    "type": "boolean",
                    "description": "Defines whether the role is a \"superuser\", and\ntherefore can override all access restrictions within the database.  Default\nvalue is `false`.\n"
                },
                "validUntil": {
                    "type": "string",
                    "description": "Defines the date and time after which the role's\npassword is no longer valid.  Established connections past this `valid_time`\nwill have to be manually terminated.  This value corresponds to a PostgreSQL\ndatetime. If omitted or the magic value `NULL` is used, `valid_until` will be\nset to `infinity`.  Default is `NULL`, therefore `infinity`.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Role resources.\n",
                "properties": {
                    "assumeRole": {
                        "type": "string",
                        "description": "Defines the role to switch to at login via [`SET ROLE`](https://www.postgresql.org/docs/current/sql-set-role.html).\n"
                    },
                    "bypassRowLevelSecurity": {
                        "type": "boolean",
                        "description": "Defines whether a role bypasses every\nrow-level security (RLS) policy.  Default value is `false`.\n"
                    },
                    "connectionLimit": {
                        "type": "integer",
                        "description": "If this role can log in, this specifies how\nmany concurrent connections the role can establish. `-1` (the default) means no\nlimit.\n"
                    },
                    "createDatabase": {
                        "type": "boolean",
                        "description": "Defines a role's ability to execute `CREATE\nDATABASE`.  Default value is `false`.\n"
                    },
                    "createRole": {
                        "type": "boolean",
                        "description": "Defines a role's ability to execute `CREATE ROLE`.\nA role with this privilege can also alter and drop other roles.  Default value\nis `false`.\n"
                    },
                    "encrypted": {
                        "type": "string",
                        "deprecationMessage": "Rename PostgreSQL role resource attribute \"encrypted\" to \"encrypted_password\""
                    },
                    "encryptedPassword": {
                        "type": "boolean",
                        "description": "Defines whether the password is stored\nencrypted in the system catalogs.  Default value is `true`.  NOTE: this value\nis always set (to the conservative and safe value), but may interfere with the\nbehavior of\n[PostgreSQL's `password_encryption` setting](https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION).\n"
                    },
                    "idleInTransactionSessionTimeout": {
                        "type": "integer",
                        "description": "Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds\n"
                    },
                    "inherit": {
                        "type": "boolean",
                        "description": "Defines whether a role \"inherits\" the privileges of\nroles it is a member of.  Default value is `true`.\n"
                    },
                    "login": {
                        "type": "boolean",
                        "description": "Defines whether role is allowed to log in.  Roles without\nthis attribute are useful for managing database privileges, but are not users\nin the usual sense of the word.  Default value is `false`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the role. Must be unique on the PostgreSQL\nserver instance where it is configured.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Sets the role's password. A password is only of use\nfor roles having the `login` attribute set to true.\n",
                        "secret": true
                    },
                    "replication": {
                        "type": "boolean",
                        "description": "Defines whether a role is allowed to initiate\nstreaming replication or put the system in and out of backup mode.  Default\nvalue is `false`\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Defines list of roles which will be granted to this new role.\n"
                    },
                    "searchPaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Alters the search path of this new role. Note that\ndue to limitations in the implementation, values cannot contain the substring\n`\", \"`.\n"
                    },
                    "skipDropRole": {
                        "type": "boolean",
                        "description": "When a PostgreSQL ROLE exists in multiple\ndatabases and the ROLE is dropped, the\n[cleanup of ownership of objects](https://www.postgresql.org/docs/current/static/role-removal.html)\nin each of the respective databases must occur before the ROLE can be dropped\nfrom the catalog.  Set this option to true when there are multiple databases\nin a PostgreSQL cluster using the same PostgreSQL ROLE for object ownership.\nThis is the third and final step taken when removing a ROLE from a database.\n"
                    },
                    "skipReassignOwned": {
                        "type": "boolean",
                        "description": "When a PostgreSQL ROLE exists in multiple\ndatabases and the ROLE is dropped, a\n[`REASSIGN OWNED`](https://www.postgresql.org/docs/current/static/sql-reassign-owned.html) in\nmust be executed on each of the respective databases before the `DROP ROLE`\ncan be executed to dropped the ROLE from the catalog.  This is the first and\nsecond steps taken when removing a ROLE from a database (the second step being\nan implicit\n[`DROP OWNED`](https://www.postgresql.org/docs/current/static/sql-drop-owned.html)).\n"
                    },
                    "statementTimeout": {
                        "type": "integer",
                        "description": "Defines [`statement_timeout`](https://www.postgresql.org/docs/current/runtime-config-client.html#RUNTIME-CONFIG-CLIENT-STATEMENT) setting for this role which allows to abort any statement that takes more than the specified amount of time.\n"
                    },
                    "superuser": {
                        "type": "boolean",
                        "description": "Defines whether the role is a \"superuser\", and\ntherefore can override all access restrictions within the database.  Default\nvalue is `false`.\n"
                    },
                    "validUntil": {
                        "type": "string",
                        "description": "Defines the date and time after which the role's\npassword is no longer valid.  Established connections past this `valid_time`\nwill have to be manually terminated.  This value corresponds to a PostgreSQL\ndatetime. If omitted or the magic value `NULL` is used, `valid_until` will be\nset to `infinity`.  Default is `NULL`, therefore `infinity`.\n"
                    }
                },
                "type": "object"
            }
        },
        "postgresql:index/schema:Schema": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "The DATABASE in which where this schema will be created. (Default: The database used by your `provider` configuration)\n"
                },
                "dropCascade": {
                    "type": "boolean",
                    "description": "When true, will also drop all the objects that are contained in the schema. (Default: false)\n"
                },
                "ifNotExists": {
                    "type": "boolean",
                    "description": "When true, use the existing schema if it exists. (Default: true)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the schema. Must be unique in the PostgreSQL\ndatabase instance where it is configured.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The ROLE who owns the schema.\n"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/postgresql:index/SchemaPolicy:SchemaPolicy"
                    },
                    "description": "Can be specified multiple times for each policy.  Each\npolicy block supports fields documented below.\n",
                    "deprecationMessage": "Use postgresql_grant resource instead (with object_type=\"schema\")"
                }
            },
            "required": [
                "database",
                "name",
                "owner",
                "policies"
            ],
            "inputProperties": {
                "database": {
                    "type": "string",
                    "description": "The DATABASE in which where this schema will be created. (Default: The database used by your `provider` configuration)\n",
                    "willReplaceOnChanges": true
                },
                "dropCascade": {
                    "type": "boolean",
                    "description": "When true, will also drop all the objects that are contained in the schema. (Default: false)\n"
                },
                "ifNotExists": {
                    "type": "boolean",
                    "description": "When true, use the existing schema if it exists. (Default: true)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the schema. Must be unique in the PostgreSQL\ndatabase instance where it is configured.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The ROLE who owns the schema.\n"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/postgresql:index/SchemaPolicy:SchemaPolicy"
                    },
                    "description": "Can be specified multiple times for each policy.  Each\npolicy block supports fields documented below.\n",
                    "deprecationMessage": "Use postgresql_grant resource instead (with object_type=\"schema\")"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Schema resources.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The DATABASE in which where this schema will be created. (Default: The database used by your `provider` configuration)\n",
                        "willReplaceOnChanges": true
                    },
                    "dropCascade": {
                        "type": "boolean",
                        "description": "When true, will also drop all the objects that are contained in the schema. (Default: false)\n"
                    },
                    "ifNotExists": {
                        "type": "boolean",
                        "description": "When true, use the existing schema if it exists. (Default: true)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the schema. Must be unique in the PostgreSQL\ndatabase instance where it is configured.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The ROLE who owns the schema.\n"
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/postgresql:index/SchemaPolicy:SchemaPolicy"
                        },
                        "description": "Can be specified multiple times for each policy.  Each\npolicy block supports fields documented below.\n",
                        "deprecationMessage": "Use postgresql_grant resource instead (with object_type=\"schema\")"
                    }
                },
                "type": "object"
            }
        },
        "postgresql:index/server:Server": {
            "description": "The ``postgresql.Server`` resource creates and manages a foreign server on a PostgreSQL server.\n\n\n## Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as postgresql from \"@pulumi/postgresql\";\n\nconst extPostgresFdw = new postgresql.Extension(\"extPostgresFdw\", {});\nconst myserverPostgres = new postgresql.Server(\"myserverPostgres\", {\n    serverName: \"myserver_postgres\",\n    fdwName: \"postgres_fdw\",\n    options: {\n        host: \"foo\",\n        dbname: \"foodb\",\n        port: \"5432\",\n    },\n}, {\n    dependsOn: [extPostgresFdw],\n});\n```\n```python\nimport pulumi\nimport pulumi_postgresql as postgresql\n\next_postgres_fdw = postgresql.Extension(\"extPostgresFdw\")\nmyserver_postgres = postgresql.Server(\"myserverPostgres\",\n    server_name=\"myserver_postgres\",\n    fdw_name=\"postgres_fdw\",\n    options={\n        \"host\": \"foo\",\n        \"dbname\": \"foodb\",\n        \"port\": \"5432\",\n    },\n    opts=pulumi.ResourceOptions(depends_on=[ext_postgres_fdw]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing PostgreSql = Pulumi.PostgreSql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var extPostgresFdw = new PostgreSql.Extension(\"extPostgresFdw\");\n\n    var myserverPostgres = new PostgreSql.Server(\"myserverPostgres\", new()\n    {\n        ServerName = \"myserver_postgres\",\n        FdwName = \"postgres_fdw\",\n        Options = \n        {\n            { \"host\", \"foo\" },\n            { \"dbname\", \"foodb\" },\n            { \"port\", \"5432\" },\n        },\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            extPostgresFdw,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-postgresql/sdk/v3/go/postgresql\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\textPostgresFdw, err := postgresql.NewExtension(ctx, \"extPostgresFdw\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = postgresql.NewServer(ctx, \"myserverPostgres\", \u0026postgresql.ServerArgs{\n\t\t\tServerName: pulumi.String(\"myserver_postgres\"),\n\t\t\tFdwName:    pulumi.String(\"postgres_fdw\"),\n\t\t\tOptions: pulumi.StringMap{\n\t\t\t\t\"host\":   pulumi.String(\"foo\"),\n\t\t\t\t\"dbname\": pulumi.String(\"foodb\"),\n\t\t\t\t\"port\":   pulumi.String(\"5432\"),\n\t\t\t},\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\textPostgresFdw,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.postgresql.Extension;\nimport com.pulumi.postgresql.Server;\nimport com.pulumi.postgresql.ServerArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var extPostgresFdw = new Extension(\"extPostgresFdw\");\n\n        var myserverPostgres = new Server(\"myserverPostgres\", ServerArgs.builder()        \n            .serverName(\"myserver_postgres\")\n            .fdwName(\"postgres_fdw\")\n            .options(Map.ofEntries(\n                Map.entry(\"host\", \"foo\"),\n                Map.entry(\"dbname\", \"foodb\"),\n                Map.entry(\"port\", \"5432\")\n            ))\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(extPostgresFdw)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  extPostgresFdw:\n    type: postgresql:Extension\n  myserverPostgres:\n    type: postgresql:Server\n    properties:\n      serverName: myserver_postgres\n      fdwName: postgres_fdw\n      options:\n        host: foo\n        dbname: foodb\n        port: '5432'\n    options:\n      dependson:\n        - ${extPostgresFdw}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as postgresql from \"@pulumi/postgresql\";\n\nconst extFileFdw = new postgresql.Extension(\"extFileFdw\", {});\nconst myserverFile = new postgresql.Server(\"myserverFile\", {\n    serverName: \"myserver_file\",\n    fdwName: \"file_fdw\",\n}, {\n    dependsOn: [extFileFdw],\n});\n```\n```python\nimport pulumi\nimport pulumi_postgresql as postgresql\n\next_file_fdw = postgresql.Extension(\"extFileFdw\")\nmyserver_file = postgresql.Server(\"myserverFile\",\n    server_name=\"myserver_file\",\n    fdw_name=\"file_fdw\",\n    opts=pulumi.ResourceOptions(depends_on=[ext_file_fdw]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing PostgreSql = Pulumi.PostgreSql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var extFileFdw = new PostgreSql.Extension(\"extFileFdw\");\n\n    var myserverFile = new PostgreSql.Server(\"myserverFile\", new()\n    {\n        ServerName = \"myserver_file\",\n        FdwName = \"file_fdw\",\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            extFileFdw,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-postgresql/sdk/v3/go/postgresql\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\textFileFdw, err := postgresql.NewExtension(ctx, \"extFileFdw\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = postgresql.NewServer(ctx, \"myserverFile\", \u0026postgresql.ServerArgs{\n\t\t\tServerName: pulumi.String(\"myserver_file\"),\n\t\t\tFdwName:    pulumi.String(\"file_fdw\"),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\textFileFdw,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.postgresql.Extension;\nimport com.pulumi.postgresql.Server;\nimport com.pulumi.postgresql.ServerArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var extFileFdw = new Extension(\"extFileFdw\");\n\n        var myserverFile = new Server(\"myserverFile\", ServerArgs.builder()        \n            .serverName(\"myserver_file\")\n            .fdwName(\"file_fdw\")\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(extFileFdw)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  extFileFdw:\n    type: postgresql:Extension\n  myserverFile:\n    type: postgresql:Server\n    properties:\n      serverName: myserver_file\n      fdwName: file_fdw\n    options:\n      dependson:\n        - ${extFileFdw}\n```\n",
            "properties": {
                "dropCascade": {
                    "type": "boolean",
                    "description": "When true, will drop objects that depend on the server (such as user mappings), and in turn all objects that depend on those objects . (Default: false)\n"
                },
                "fdwName": {
                    "type": "string",
                    "description": "The name of the foreign-data wrapper that manages the server.\nChanging this value\nwill force the creation of a new resource as this value can only be set\nwhen the foreign server is created.\n"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "This clause specifies the options for the server. The options typically define the connection details of the server, but the actual names and values are dependent on the server's foreign-data wrapper.\n"
                },
                "serverName": {
                    "type": "string",
                    "description": "The name of the foreign server to be created.\n"
                },
                "serverOwner": {
                    "type": "string",
                    "description": "By default, the user who defines the server becomes its owner. Set this value to configure the new owner of the foreign server.\n"
                },
                "serverType": {
                    "type": "string",
                    "description": "Optional server type, potentially useful to foreign-data wrappers.\nChanging this value\nwill force the creation of a new resource as this value can only be set\nwhen the foreign server is created.\n"
                },
                "serverVersion": {
                    "type": "string",
                    "description": "Optional server version, potentially useful to foreign-data wrappers.\n"
                }
            },
            "required": [
                "fdwName",
                "serverName",
                "serverOwner"
            ],
            "inputProperties": {
                "dropCascade": {
                    "type": "boolean",
                    "description": "When true, will drop objects that depend on the server (such as user mappings), and in turn all objects that depend on those objects . (Default: false)\n"
                },
                "fdwName": {
                    "type": "string",
                    "description": "The name of the foreign-data wrapper that manages the server.\nChanging this value\nwill force the creation of a new resource as this value can only be set\nwhen the foreign server is created.\n",
                    "willReplaceOnChanges": true
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "This clause specifies the options for the server. The options typically define the connection details of the server, but the actual names and values are dependent on the server's foreign-data wrapper.\n"
                },
                "serverName": {
                    "type": "string",
                    "description": "The name of the foreign server to be created.\n"
                },
                "serverOwner": {
                    "type": "string",
                    "description": "By default, the user who defines the server becomes its owner. Set this value to configure the new owner of the foreign server.\n"
                },
                "serverType": {
                    "type": "string",
                    "description": "Optional server type, potentially useful to foreign-data wrappers.\nChanging this value\nwill force the creation of a new resource as this value can only be set\nwhen the foreign server is created.\n",
                    "willReplaceOnChanges": true
                },
                "serverVersion": {
                    "type": "string",
                    "description": "Optional server version, potentially useful to foreign-data wrappers.\n"
                }
            },
            "requiredInputs": [
                "fdwName",
                "serverName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Server resources.\n",
                "properties": {
                    "dropCascade": {
                        "type": "boolean",
                        "description": "When true, will drop objects that depend on the server (such as user mappings), and in turn all objects that depend on those objects . (Default: false)\n"
                    },
                    "fdwName": {
                        "type": "string",
                        "description": "The name of the foreign-data wrapper that manages the server.\nChanging this value\nwill force the creation of a new resource as this value can only be set\nwhen the foreign server is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "options": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "This clause specifies the options for the server. The options typically define the connection details of the server, but the actual names and values are dependent on the server's foreign-data wrapper.\n"
                    },
                    "serverName": {
                        "type": "string",
                        "description": "The name of the foreign server to be created.\n"
                    },
                    "serverOwner": {
                        "type": "string",
                        "description": "By default, the user who defines the server becomes its owner. Set this value to configure the new owner of the foreign server.\n"
                    },
                    "serverType": {
                        "type": "string",
                        "description": "Optional server type, potentially useful to foreign-data wrappers.\nChanging this value\nwill force the creation of a new resource as this value can only be set\nwhen the foreign server is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "serverVersion": {
                        "type": "string",
                        "description": "Optional server version, potentially useful to foreign-data wrappers.\n"
                    }
                },
                "type": "object"
            }
        },
        "postgresql:index/subscription:Subscription": {
            "description": "The `postgresql.Subscription` resource creates and manages a publication on a PostgreSQL\nserver.\n\n## Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as postgresql from \"@pulumi/postgresql\";\n\nconst subscription = new postgresql.Subscription(\"subscription\", {\n    conninfo: \"host=localhost port=5432 dbname=mydb user=postgres password=postgres\",\n    publications: [\"publication\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_postgresql as postgresql\n\nsubscription = postgresql.Subscription(\"subscription\",\n    conninfo=\"host=localhost port=5432 dbname=mydb user=postgres password=postgres\",\n    publications=[\"publication\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing PostgreSql = Pulumi.PostgreSql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var subscription = new PostgreSql.Subscription(\"subscription\", new()\n    {\n        Conninfo = \"host=localhost port=5432 dbname=mydb user=postgres password=postgres\",\n        Publications = new[]\n        {\n            \"publication\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-postgresql/sdk/v3/go/postgresql\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := postgresql.NewSubscription(ctx, \"subscription\", \u0026postgresql.SubscriptionArgs{\n\t\t\tConninfo: pulumi.String(\"host=localhost port=5432 dbname=mydb user=postgres password=postgres\"),\n\t\t\tPublications: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"publication\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.postgresql.Subscription;\nimport com.pulumi.postgresql.SubscriptionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var subscription = new Subscription(\"subscription\", SubscriptionArgs.builder()        \n            .conninfo(\"host=localhost port=5432 dbname=mydb user=postgres password=postgres\")\n            .publications(\"publication\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  subscription:\n    type: postgresql:Subscription\n    properties:\n      conninfo: host=localhost port=5432 dbname=mydb user=postgres password=postgres\n      publications:\n        - publication\n```\n\n## Postgres documentation\n\n- https://www.postgresql.org/docs/current/sql-createsubscription.html\n",
            "properties": {
                "conninfo": {
                    "type": "string",
                    "description": "The connection string to the publisher. It should follow the [keyword/value format](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING)\n",
                    "secret": true
                },
                "createSlot": {
                    "type": "boolean",
                    "description": "Specifies whether the command should create the replication slot on the publisher. Default behavior is true\n"
                },
                "database": {
                    "type": "string",
                    "description": "Which database to create the subscription on. Defaults to provider database.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the publication.\n"
                },
                "publications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Names of the publications on the publisher to subscribe to\n"
                },
                "slotName": {
                    "type": "string",
                    "description": "Name of the replication slot to use. The default behavior is to use the name of the subscription for the slot name\n"
                }
            },
            "required": [
                "conninfo",
                "database",
                "name",
                "publications"
            ],
            "inputProperties": {
                "conninfo": {
                    "type": "string",
                    "description": "The connection string to the publisher. It should follow the [keyword/value format](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING)\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "createSlot": {
                    "type": "boolean",
                    "description": "Specifies whether the command should create the replication slot on the publisher. Default behavior is true\n",
                    "willReplaceOnChanges": true
                },
                "database": {
                    "type": "string",
                    "description": "Which database to create the subscription on. Defaults to provider database.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the publication.\n",
                    "willReplaceOnChanges": true
                },
                "publications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Names of the publications on the publisher to subscribe to\n",
                    "willReplaceOnChanges": true
                },
                "slotName": {
                    "type": "string",
                    "description": "Name of the replication slot to use. The default behavior is to use the name of the subscription for the slot name\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "conninfo",
                "publications"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Subscription resources.\n",
                "properties": {
                    "conninfo": {
                        "type": "string",
                        "description": "The connection string to the publisher. It should follow the [keyword/value format](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING)\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "createSlot": {
                        "type": "boolean",
                        "description": "Specifies whether the command should create the replication slot on the publisher. Default behavior is true\n",
                        "willReplaceOnChanges": true
                    },
                    "database": {
                        "type": "string",
                        "description": "Which database to create the subscription on. Defaults to provider database.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the publication.\n",
                        "willReplaceOnChanges": true
                    },
                    "publications": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Names of the publications on the publisher to subscribe to\n",
                        "willReplaceOnChanges": true
                    },
                    "slotName": {
                        "type": "string",
                        "description": "Name of the replication slot to use. The default behavior is to use the name of the subscription for the slot name\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "postgresql:index/userMapping:UserMapping": {
            "description": "The ``postgresql.UserMapping`` resource creates and manages a user mapping on a PostgreSQL server.\n\n\n## Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as postgresql from \"@pulumi/postgresql\";\n\nconst extPostgresFdw = new postgresql.Extension(\"extPostgresFdw\", {});\nconst myserverPostgres = new postgresql.Server(\"myserverPostgres\", {\n    serverName: \"myserver_postgres\",\n    fdwName: \"postgres_fdw\",\n    options: {\n        host: \"foo\",\n        dbname: \"foodb\",\n        port: \"5432\",\n    },\n}, {\n    dependsOn: [extPostgresFdw],\n});\nconst remoteRole = new postgresql.Role(\"remoteRole\", {});\nconst remoteUserMapping = new postgresql.UserMapping(\"remoteUserMapping\", {\n    serverName: myserverPostgres.serverName,\n    userName: remoteRole.name,\n    options: {\n        user: \"admin\",\n        password: \"pass\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_postgresql as postgresql\n\next_postgres_fdw = postgresql.Extension(\"extPostgresFdw\")\nmyserver_postgres = postgresql.Server(\"myserverPostgres\",\n    server_name=\"myserver_postgres\",\n    fdw_name=\"postgres_fdw\",\n    options={\n        \"host\": \"foo\",\n        \"dbname\": \"foodb\",\n        \"port\": \"5432\",\n    },\n    opts=pulumi.ResourceOptions(depends_on=[ext_postgres_fdw]))\nremote_role = postgresql.Role(\"remoteRole\")\nremote_user_mapping = postgresql.UserMapping(\"remoteUserMapping\",\n    server_name=myserver_postgres.server_name,\n    user_name=remote_role.name,\n    options={\n        \"user\": \"admin\",\n        \"password\": \"pass\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing PostgreSql = Pulumi.PostgreSql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var extPostgresFdw = new PostgreSql.Extension(\"extPostgresFdw\");\n\n    var myserverPostgres = new PostgreSql.Server(\"myserverPostgres\", new()\n    {\n        ServerName = \"myserver_postgres\",\n        FdwName = \"postgres_fdw\",\n        Options = \n        {\n            { \"host\", \"foo\" },\n            { \"dbname\", \"foodb\" },\n            { \"port\", \"5432\" },\n        },\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            extPostgresFdw,\n        },\n    });\n\n    var remoteRole = new PostgreSql.Role(\"remoteRole\");\n\n    var remoteUserMapping = new PostgreSql.UserMapping(\"remoteUserMapping\", new()\n    {\n        ServerName = myserverPostgres.ServerName,\n        UserName = remoteRole.Name,\n        Options = \n        {\n            { \"user\", \"admin\" },\n            { \"password\", \"pass\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-postgresql/sdk/v3/go/postgresql\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\textPostgresFdw, err := postgresql.NewExtension(ctx, \"extPostgresFdw\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyserverPostgres, err := postgresql.NewServer(ctx, \"myserverPostgres\", \u0026postgresql.ServerArgs{\n\t\t\tServerName: pulumi.String(\"myserver_postgres\"),\n\t\t\tFdwName:    pulumi.String(\"postgres_fdw\"),\n\t\t\tOptions: pulumi.StringMap{\n\t\t\t\t\"host\":   pulumi.String(\"foo\"),\n\t\t\t\t\"dbname\": pulumi.String(\"foodb\"),\n\t\t\t\t\"port\":   pulumi.String(\"5432\"),\n\t\t\t},\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\textPostgresFdw,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tremoteRole, err := postgresql.NewRole(ctx, \"remoteRole\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = postgresql.NewUserMapping(ctx, \"remoteUserMapping\", \u0026postgresql.UserMappingArgs{\n\t\t\tServerName: myserverPostgres.ServerName,\n\t\t\tUserName:   remoteRole.Name,\n\t\t\tOptions: pulumi.StringMap{\n\t\t\t\t\"user\":     pulumi.String(\"admin\"),\n\t\t\t\t\"password\": pulumi.String(\"pass\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.postgresql.Extension;\nimport com.pulumi.postgresql.Server;\nimport com.pulumi.postgresql.ServerArgs;\nimport com.pulumi.postgresql.Role;\nimport com.pulumi.postgresql.UserMapping;\nimport com.pulumi.postgresql.UserMappingArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var extPostgresFdw = new Extension(\"extPostgresFdw\");\n\n        var myserverPostgres = new Server(\"myserverPostgres\", ServerArgs.builder()        \n            .serverName(\"myserver_postgres\")\n            .fdwName(\"postgres_fdw\")\n            .options(Map.ofEntries(\n                Map.entry(\"host\", \"foo\"),\n                Map.entry(\"dbname\", \"foodb\"),\n                Map.entry(\"port\", \"5432\")\n            ))\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(extPostgresFdw)\n                .build());\n\n        var remoteRole = new Role(\"remoteRole\");\n\n        var remoteUserMapping = new UserMapping(\"remoteUserMapping\", UserMappingArgs.builder()        \n            .serverName(myserverPostgres.serverName())\n            .userName(remoteRole.name())\n            .options(Map.ofEntries(\n                Map.entry(\"user\", \"admin\"),\n                Map.entry(\"password\", \"pass\")\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  extPostgresFdw:\n    type: postgresql:Extension\n  myserverPostgres:\n    type: postgresql:Server\n    properties:\n      serverName: myserver_postgres\n      fdwName: postgres_fdw\n      options:\n        host: foo\n        dbname: foodb\n        port: '5432'\n    options:\n      dependson:\n        - ${extPostgresFdw}\n  remoteRole:\n    type: postgresql:Role\n  remoteUserMapping:\n    type: postgresql:UserMapping\n    properties:\n      serverName: ${myserverPostgres.serverName}\n      userName: ${remoteRole.name}\n      options:\n        user: admin\n        password: pass\n```\n",
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "This clause specifies the options of the user mapping. The options typically define the actual user name and password of the mapping. Option names must be unique. The allowed option names and values are specific to the server's foreign-data wrapper.\n"
                },
                "serverName": {
                    "type": "string",
                    "description": "The name of an existing server for which the user mapping is to be created.\nChanging this value\nwill force the creation of a new resource as this value can only be set\nwhen the user mapping is created.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "The name of an existing user that is mapped to foreign server. CURRENT_ROLE, CURRENT_USER, and USER match the name of the current user. When PUBLIC is specified, a so-called public mapping is created that is used when no user-specific mapping is applicable.\nChanging this value\nwill force the creation of a new resource as this value can only be set\nwhen the user mapping is created.\n"
                }
            },
            "required": [
                "serverName",
                "userName"
            ],
            "inputProperties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "This clause specifies the options of the user mapping. The options typically define the actual user name and password of the mapping. Option names must be unique. The allowed option names and values are specific to the server's foreign-data wrapper.\n"
                },
                "serverName": {
                    "type": "string",
                    "description": "The name of an existing server for which the user mapping is to be created.\nChanging this value\nwill force the creation of a new resource as this value can only be set\nwhen the user mapping is created.\n",
                    "willReplaceOnChanges": true
                },
                "userName": {
                    "type": "string",
                    "description": "The name of an existing user that is mapped to foreign server. CURRENT_ROLE, CURRENT_USER, and USER match the name of the current user. When PUBLIC is specified, a so-called public mapping is created that is used when no user-specific mapping is applicable.\nChanging this value\nwill force the creation of a new resource as this value can only be set\nwhen the user mapping is created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "serverName",
                "userName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserMapping resources.\n",
                "properties": {
                    "options": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "This clause specifies the options of the user mapping. The options typically define the actual user name and password of the mapping. Option names must be unique. The allowed option names and values are specific to the server's foreign-data wrapper.\n"
                    },
                    "serverName": {
                        "type": "string",
                        "description": "The name of an existing server for which the user mapping is to be created.\nChanging this value\nwill force the creation of a new resource as this value can only be set\nwhen the user mapping is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "userName": {
                        "type": "string",
                        "description": "The name of an existing user that is mapped to foreign server. CURRENT_ROLE, CURRENT_USER, and USER match the name of the current user. When PUBLIC is specified, a so-called public mapping is created that is used when no user-specific mapping is applicable.\nChanging this value\nwill force the creation of a new resource as this value can only be set\nwhen the user mapping is created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "postgresql:index/getSchemas:getSchemas": {
            "description": "The ``postgresql.getSchemas`` data source retrieves a list of schema names from a specified PostgreSQL database.\n\n\n## Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as postgresql from \"@pulumi/postgresql\";\n\nconst mySchemas = postgresql.getSchemas({\n    database: \"my_database\",\n});\n```\n```python\nimport pulumi\nimport pulumi_postgresql as postgresql\n\nmy_schemas = postgresql.get_schemas(database=\"my_database\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing PostgreSql = Pulumi.PostgreSql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySchemas = PostgreSql.GetSchemas.Invoke(new()\n    {\n        Database = \"my_database\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-postgresql/sdk/v3/go/postgresql\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := postgresql.GetSchemas(ctx, \u0026postgresql.GetSchemasArgs{\n\t\t\tDatabase: \"my_database\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.postgresql.PostgresqlFunctions;\nimport com.pulumi.postgresql.inputs.GetSchemasArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySchemas = PostgresqlFunctions.getSchemas(GetSchemasArgs.builder()\n            .database(\"my_database\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySchemas:\n    fn::invoke:\n      Function: postgresql:getSchemas\n      Arguments:\n        database: my_database\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSchemas.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The PostgreSQL database which will be queried for schema names.\n",
                        "willReplaceOnChanges": true
                    },
                    "includeSystemSchemas": {
                        "type": "boolean",
                        "description": "Determines whether to include system schemas (pg_ prefix and information_schema). 'public' will always be included. Defaults to ``false``.\n"
                    },
                    "likeAllPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of expressions which will be pattern matched in the query using the PostgreSQL ``LIKE ALL`` operators.\n"
                    },
                    "likeAnyPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of expressions which will be pattern matched in the query using the PostgreSQL ``LIKE ANY`` operators.\n"
                    },
                    "notLikeAllPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of expressions which will be pattern matched in the query using the PostgreSQL ``NOT LIKE ALL`` operators.\n"
                    },
                    "regexPattern": {
                        "type": "string",
                        "description": "Expression which will be pattern matched in the query using the PostgreSQL ``~`` (regular expression match) operator.\n\nNote that all optional arguments can be used in conjunction.\n"
                    }
                },
                "type": "object",
                "required": [
                    "database"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSchemas.\n",
                "properties": {
                    "database": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "includeSystemSchemas": {
                        "type": "boolean"
                    },
                    "likeAllPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "likeAnyPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "notLikeAllPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "regexPattern": {
                        "type": "string"
                    },
                    "schemas": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of full names of found schemas.\n"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "schemas",
                    "id"
                ]
            }
        },
        "postgresql:index/getSequences:getSequences": {
            "description": "The ``postgresql.getSequences`` data source retrieves a list of sequence names from a specified PostgreSQL database.\n\n\n## Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as postgresql from \"@pulumi/postgresql\";\n\nconst mySequences = postgresql.getSequences({\n    database: \"my_database\",\n});\n```\n```python\nimport pulumi\nimport pulumi_postgresql as postgresql\n\nmy_sequences = postgresql.get_sequences(database=\"my_database\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing PostgreSql = Pulumi.PostgreSql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySequences = PostgreSql.GetSequences.Invoke(new()\n    {\n        Database = \"my_database\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-postgresql/sdk/v3/go/postgresql\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := postgresql.GetSequences(ctx, \u0026postgresql.GetSequencesArgs{\n\t\t\tDatabase: \"my_database\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.postgresql.PostgresqlFunctions;\nimport com.pulumi.postgresql.inputs.GetSequencesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySequences = PostgresqlFunctions.getSequences(GetSequencesArgs.builder()\n            .database(\"my_database\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySequences:\n    fn::invoke:\n      Function: postgresql:getSequences\n      Arguments:\n        database: my_database\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSequences.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The PostgreSQL database which will be queried for sequence names.\n",
                        "willReplaceOnChanges": true
                    },
                    "likeAllPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of expressions which will be pattern matched against sequence names in the query using the PostgreSQL ``LIKE ALL`` operators.\n"
                    },
                    "likeAnyPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of expressions which will be pattern matched against sequence names in the query using the PostgreSQL ``LIKE ANY`` operators.\n"
                    },
                    "notLikeAllPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of expressions which will be pattern matched against sequence names in the query using the PostgreSQL ``NOT LIKE ALL`` operators.\n"
                    },
                    "regexPattern": {
                        "type": "string",
                        "description": "Expression which will be pattern matched against sequence names in the query using the PostgreSQL ``~`` (regular expression match) operator.\n\nNote that all optional arguments can be used in conjunction.\n"
                    },
                    "schemas": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of PostgreSQL schema(s) which will be queried for sequence names. Queries all schemas in the database by default.\n"
                    }
                },
                "type": "object",
                "required": [
                    "database"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSequences.\n",
                "properties": {
                    "database": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "likeAllPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "likeAnyPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "notLikeAllPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "regexPattern": {
                        "type": "string"
                    },
                    "schemas": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "sequences": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/postgresql:index/getSequencesSequence:getSequencesSequence"
                        },
                        "description": "A list of PostgreSQL sequences retrieved by this data source. Each sequence consists of the fields documented below.\n___\n"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "sequences",
                    "id"
                ]
            }
        },
        "postgresql:index/getTables:getTables": {
            "description": "The ``postgresql.getTables`` data source retrieves a list of table names from a specified PostgreSQL database.\n\n\n## Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as postgresql from \"@pulumi/postgresql\";\n\nconst myTables = postgresql.getTables({\n    database: \"my_database\",\n});\n```\n```python\nimport pulumi\nimport pulumi_postgresql as postgresql\n\nmy_tables = postgresql.get_tables(database=\"my_database\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing PostgreSql = Pulumi.PostgreSql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myTables = PostgreSql.GetTables.Invoke(new()\n    {\n        Database = \"my_database\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-postgresql/sdk/v3/go/postgresql\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := postgresql.GetTables(ctx, \u0026postgresql.GetTablesArgs{\n\t\t\tDatabase: \"my_database\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.postgresql.PostgresqlFunctions;\nimport com.pulumi.postgresql.inputs.GetTablesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myTables = PostgresqlFunctions.getTables(GetTablesArgs.builder()\n            .database(\"my_database\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myTables:\n    fn::invoke:\n      Function: postgresql:getTables\n      Arguments:\n        database: my_database\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTables.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The PostgreSQL database which will be queried for table names.\n",
                        "willReplaceOnChanges": true
                    },
                    "likeAllPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of expressions which will be pattern matched against table names in the query using the PostgreSQL ``LIKE ALL`` operators.\n"
                    },
                    "likeAnyPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of expressions which will be pattern matched against table names in the query using the PostgreSQL ``LIKE ANY`` operators.\n"
                    },
                    "notLikeAllPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of expressions which will be pattern matched against table names in the query using the PostgreSQL ``NOT LIKE ALL`` operators.\n"
                    },
                    "regexPattern": {
                        "type": "string",
                        "description": "Expression which will be pattern matched against table names in the query using the PostgreSQL ``~`` (regular expression match) operator.\n\nNote that all optional arguments can be used in conjunction.\n"
                    },
                    "schemas": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of PostgreSQL schema(s) which will be queried for table names. Queries all schemas in the database by default.\n"
                    },
                    "tableTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of PostgreSQL table types which will be queried for table names. Includes all table types by default (including views and temp tables). Use 'BASE TABLE' for normal tables only.\n"
                    }
                },
                "type": "object",
                "required": [
                    "database"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTables.\n",
                "properties": {
                    "database": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "likeAllPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "likeAnyPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "notLikeAllPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "regexPattern": {
                        "type": "string"
                    },
                    "schemas": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tableTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/postgresql:index/getTablesTable:getTablesTable"
                        },
                        "description": "A list of PostgreSQL tables retrieved by this data source. Each table consists of the fields documented below.\n___\n"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "tables",
                    "id"
                ]
            }
        }
    }
}